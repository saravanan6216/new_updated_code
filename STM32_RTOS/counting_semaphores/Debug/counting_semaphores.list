
counting_semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006cf0  08006cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea8  08006ea8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb0  08006eb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000107c  20000074  08006f2c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  08006f2c  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003313  00000000  00000000  00037b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029572  00000000  00000000  0003d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017487  00000000  00000000  00066c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcb23  00000000  00000000  0007e109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ac2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  0017ac7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cd8 	.word	0x08006cd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006cd8 	.word	0x08006cd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090
 80005a4:	200000e4 	.word	0x200000e4

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_write>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"
int _write(int file,char *ptr,int len)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
    int i=0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e009      	b.n	8000620 <_write+0x2a>
    	ITM_SendChar((*ptr++));
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffc7 	bl	80005a8 <ITM_SendChar>
    for(i=0;i<len;i++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf1      	blt.n	800060c <_write+0x16>
    return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b09e      	sub	sp, #120	; 0x78
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fbbb 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f871 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f8f1 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000646:	f000 f8bf 	bl	80007c8 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myCountingSem */
  osSemaphoreDef(myCountingSem);
 800064a:	2300      	movs	r3, #0
 800064c:	673b      	str	r3, [r7, #112]	; 0x70
 800064e:	2300      	movs	r3, #0
 8000650:	677b      	str	r3, [r7, #116]	; 0x74
  myCountingSemHandle = osSemaphoreCreate(osSemaphore(myCountingSem), 2);
 8000652:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f003 f9e7 	bl	8003a2c <osSemaphoreCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <main+0xcc>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <main+0xd0>)
 8000666:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 f974 	bl	800396c <osThreadCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a20      	ldr	r2, [pc, #128]	; (8000708 <main+0xd4>)
 8000688:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask1 */
  osThreadDef(myTask1, StartTask02, osPriorityIdle, 0, 128);
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <main+0xd8>)
 800068c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 800069e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 f961 	bl	800396c <osThreadCreate>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a18      	ldr	r2, [pc, #96]	; (8000710 <main+0xdc>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask2 */
  osThreadDef(myTask2, StartTask03, osPriorityIdle, 0, 128);
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <main+0xe0>)
 80006b2:	f107 041c 	add.w	r4, r7, #28
 80006b6:	461d      	mov	r5, r3
 80006b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask2Handle = osThreadCreate(osThread(myTask2), NULL);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f94e 	bl	800396c <osThreadCreate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <main+0xe4>)
 80006d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <main+0xe8>)
 80006d8:	463c      	mov	r4, r7
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80006e8:	463b      	mov	r3, r7
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 f93d 	bl	800396c <osThreadCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <main+0xec>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f8:	f003 f931 	bl	800395e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0xc8>
 80006fe:	bf00      	nop
 8000700:	20000378 	.word	0x20000378
 8000704:	08006d18 	.word	0x08006d18
 8000708:	20000368 	.word	0x20000368
 800070c:	08006d34 	.word	0x08006d34
 8000710:	2000036c 	.word	0x2000036c
 8000714:	08006d50 	.word	0x08006d50
 8000718:	20000370 	.word	0x20000370
 800071c:	08006d6c 	.word	0x08006d6c
 8000720:	20000374 	.word	0x20000374

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2244      	movs	r2, #68	; 0x44
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fb3a 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000746:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074a:	f000 fe25 	bl	8001398 <HAL_PWREx_ControlVoltageScaling>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000754:	f000 f952 	bl	80009fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000760:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076a:	2302      	movs	r3, #2
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000772:	230a      	movs	r3, #10
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000776:	2307      	movs	r3, #7
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe5c 	bl	8001444 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000792:	f000 f933 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2303      	movs	r3, #3
 800079c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	2104      	movs	r1, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fa24 	bl	8001bfc <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ba:	f000 f91f 	bl	80009fc <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3758      	adds	r7, #88	; 0x58
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f002 fbda 	bl	8002fc4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f8f1 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200002e4 	.word	0x200002e4
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a24      	ldr	r2, [pc, #144]	; (80008ec <MX_GPIO_Init+0xc4>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_GPIO_Init+0xc4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f000 fd51 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0xc8>)
 80008c2:	f000 fb99 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 fb8a 	bl	8000ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  xSemaphoreTake(myCountingSemHandle,10);
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <StartDefaultTask+0x2c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	210a      	movs	r1, #10
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fc28 	bl	8004158 <xQueueSemaphoreTake>
	  printf("default task %d\n",count);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <StartDefaultTask+0x30>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <StartDefaultTask+0x34>)
 8000910:	f005 fa54 	bl	8005dbc <iprintf>
	  osDelay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f003 f874 	bl	8003a04 <osDelay>
	  xSemaphoreTake(myCountingSemHandle,10);
 800091c:	e7ee      	b.n	80008fc <StartDefaultTask+0x8>
 800091e:	bf00      	nop
 8000920:	20000378 	.word	0x20000378
 8000924:	2000037c 	.word	0x2000037c
 8000928:	08006d88 	.word	0x08006d88

0800092c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(myCountingSemHandle,10);
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <StartTask02+0x2c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	210a      	movs	r1, #10
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fc0c 	bl	8004158 <xQueueSemaphoreTake>
	  	  printf(" task 1%d\n",count);
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <StartTask02+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <StartTask02+0x34>)
 8000948:	f005 fa38 	bl	8005dbc <iprintf>
	  	  osDelay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f003 f858 	bl	8003a04 <osDelay>
	  xSemaphoreTake(myCountingSemHandle,10);
 8000954:	e7ee      	b.n	8000934 <StartTask02+0x8>
 8000956:	bf00      	nop
 8000958:	20000378 	.word	0x20000378
 800095c:	2000037c 	.word	0x2000037c
 8000960:	08006d9c 	.word	0x08006d9c

08000964 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(myCountingSemHandle,10);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <StartTask03+0x2c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	210a      	movs	r1, #10
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fbf0 	bl	8004158 <xQueueSemaphoreTake>
	  	  printf("task2 %d\n",count);
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <StartTask03+0x30>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <StartTask03+0x34>)
 8000980:	f005 fa1c 	bl	8005dbc <iprintf>
	  	  osDelay(1000);
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f003 f83c 	bl	8003a04 <osDelay>
	  xSemaphoreTake(myCountingSemHandle,10);
 800098c:	e7ee      	b.n	800096c <StartTask03+0x8>
 800098e:	bf00      	nop
 8000990:	20000378 	.word	0x20000378
 8000994:	2000037c 	.word	0x2000037c
 8000998:	08006da8 	.word	0x08006da8

0800099c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(myCountingSemHandle,10);
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <StartTask04+0x30>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	210a      	movs	r1, #10
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fbd4 	bl	8004158 <xQueueSemaphoreTake>
		  	  printf("task3 %d\n",count++);
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <StartTask04+0x34>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	4906      	ldr	r1, [pc, #24]	; (80009d0 <StartTask04+0x34>)
 80009b8:	600a      	str	r2, [r1, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <StartTask04+0x38>)
 80009be:	f005 f9fd 	bl	8005dbc <iprintf>
		  	 // count=0;
		  	  osDelay(1000);
 80009c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c6:	f003 f81d 	bl	8003a04 <osDelay>
	  xSemaphoreTake(myCountingSemHandle,10);
 80009ca:	e7eb      	b.n	80009a4 <StartTask04+0x8>
 80009cc:	20000378 	.word	0x20000378
 80009d0:	2000037c 	.word	0x2000037c
 80009d4:	08006db4 	.word	0x08006db4

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ea:	f000 fa03 	bl	8000df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40012c00 	.word	0x40012c00

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6593      	str	r3, [r2, #88]	; 0x58
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	210f      	movs	r1, #15
 8000a42:	f06f 0001 	mvn.w	r0, #1
 8000a46:	f000 faad 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ac      	sub	sp, #176	; 0xb0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2288      	movs	r2, #136	; 0x88
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 f997 	bl	8005dac <memset>
  if(huart->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <HAL_UART_MspInit+0xb0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d13b      	bne.n	8000b00 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fb07 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff ffac 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0xb4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_UART_MspInit+0xb4>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_UART_MspInit+0xb4>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <HAL_UART_MspInit+0xb4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0xb4>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_UART_MspInit+0xb4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aec:	2307      	movs	r3, #7
 8000aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fa7c 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	37b0      	adds	r7, #176	; 0xb0
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_InitTick+0xc8>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <HAL_InitTick+0xc8>)
 8000b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b28:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <HAL_InitTick+0xc8>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b36:	f107 020c 	add.w	r2, r7, #12
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fa1f 	bl	8001f84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b46:	f001 fa07 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8000b4a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_InitTick+0xcc>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	3b01      	subs	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <HAL_InitTick+0xd4>)
 8000b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b80:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b82:	f001 ff4d 	bl	8002a20 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11b      	bne.n	8000bcc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <HAL_InitTick+0xd0>)
 8000b96:	f001 ffa5 	bl	8002ae4 <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d111      	bne.n	8000bcc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ba8:	2019      	movs	r0, #25
 8000baa:	f000 fa17 	bl	8000fdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d808      	bhi.n	8000bc6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2019      	movs	r0, #25
 8000bba:	f000 f9f3 	bl	8000fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_InitTick+0xd8>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e002      	b.n	8000bcc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	20000380 	.word	0x20000380
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	20000004 	.word	0x20000004

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c1e:	f001 ffd1 	bl	8002bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000380 	.word	0x20000380

08000c2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3e:	f3af 8000 	nop.w
 8000c42:	4601      	mov	r1, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf0      	blt.n	8000c3e <_read+0x12>
  }

  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f005 f81c 	bl	8005d3c <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20018000 	.word	0x20018000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	200003cc 	.word	0x200003cc
 8000d38:	200010f0 	.word	0x200010f0

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 ffdb 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fc4f 	bl	8000634 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000da4:	08006eb8 	.word	0x08006eb8
  ldr r2, =_sbss
 8000da8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dac:	200010f0 	.word	0x200010f0

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_Init+0x3c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_Init+0x3c>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f8df 	bl	8000f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f7ff fe9d 	bl	8000b10 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	e001      	b.n	8000de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de2:	f7ff fe11 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	200003d0 	.word	0x200003d0

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200003d0 	.word	0x200003d0

08000e34 <__NVIC_SetPriorityGrouping>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff4c 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb6:	f7ff ff61 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff ffb1 	bl	8000f28 <NVIC_EncodePriority>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff80 	bl	8000ed4 <__NVIC_SetPriority>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff54 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e17f      	b.n	8001308 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2101      	movs	r1, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8171 	beq.w	8001302 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d005      	beq.n	8001038 <HAL_GPIO_Init+0x40>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d130      	bne.n	800109a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106e:	2201      	movs	r2, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	f003 0201 	and.w	r2, r3, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d118      	bne.n	80010d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	6939      	ldr	r1, [r7, #16]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80ac 	beq.w	8001302 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <HAL_GPIO_Init+0x330>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	4a5e      	ldr	r2, [pc, #376]	; (8001328 <HAL_GPIO_Init+0x330>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	; 0x60
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <HAL_GPIO_Init+0x330>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c2:	4a5a      	ldr	r2, [pc, #360]	; (800132c <HAL_GPIO_Init+0x334>)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ec:	d025      	beq.n	800123a <HAL_GPIO_Init+0x242>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x338>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d01f      	beq.n	8001236 <HAL_GPIO_Init+0x23e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4e      	ldr	r2, [pc, #312]	; (8001334 <HAL_GPIO_Init+0x33c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x23a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4d      	ldr	r2, [pc, #308]	; (8001338 <HAL_GPIO_Init+0x340>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x236>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_GPIO_Init+0x344>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x232>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4b      	ldr	r2, [pc, #300]	; (8001340 <HAL_GPIO_Init+0x348>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x22e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4a      	ldr	r2, [pc, #296]	; (8001344 <HAL_GPIO_Init+0x34c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x22a>
 800121e:	2306      	movs	r3, #6
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x244>
 8001222:	2307      	movs	r3, #7
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x244>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x244>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x244>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x244>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x244>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x244>
 800123a:	2300      	movs	r3, #0
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124c:	4937      	ldr	r1, [pc, #220]	; (800132c <HAL_GPIO_Init+0x334>)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_GPIO_Init+0x350>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x350>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_GPIO_Init+0x350>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_GPIO_Init+0x350>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x350>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x350>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_GPIO_Init+0x350>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_GPIO_Init+0x350>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	f47f ae78 	bne.w	8001008 <HAL_GPIO_Init+0x10>
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	48000400 	.word	0x48000400
 8001334:	48000800 	.word	0x48000800
 8001338:	48000c00 	.word	0x48000c00
 800133c:	48001000 	.word	0x48001000
 8001340:	48001400 	.word	0x48001400
 8001344:	48001800 	.word	0x48001800
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001368:	e002      	b.n	8001370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_PWREx_GetVoltageRange+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40007000 	.word	0x40007000

08001398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a6:	d130      	bne.n	800140a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b4:	d038      	beq.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013be:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2232      	movs	r2, #50	; 0x32
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9b      	lsrs	r3, r3, #18
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013dc:	e002      	b.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f0:	d102      	bne.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f2      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001404:	d110      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e00f      	b.n	800142a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d007      	beq.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001426:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e3ca      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001456:	4b97      	ldr	r3, [pc, #604]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001460:	4b94      	ldr	r3, [pc, #592]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80e4 	beq.w	8001640 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_RCC_OscConfig+0x4a>
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	f040 808b 	bne.w	800159c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b01      	cmp	r3, #1
 800148a:	f040 8087 	bne.w	800159c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800148e:	4b89      	ldr	r3, [pc, #548]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x62>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e3a2      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_RCC_OscConfig+0x7c>
 80014b6:	4b7f      	ldr	r3, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014be:	e005      	b.n	80014cc <HAL_RCC_OscConfig+0x88>
 80014c0:	4b7c      	ldr	r3, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d223      	bcs.n	8001518 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fd87 	bl	8001fe8 <RCC_SetFlashLatencyFromMSIRange>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e383      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e4:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a72      	ldr	r2, [pc, #456]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	496d      	ldr	r1, [pc, #436]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001502:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	4968      	ldr	r1, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
 8001516:	e025      	b.n	8001564 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b66      	ldr	r3, [pc, #408]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a65      	ldr	r2, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4960      	ldr	r1, [pc, #384]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	495b      	ldr	r1, [pc, #364]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fd47 	bl	8001fe8 <RCC_SetFlashLatencyFromMSIRange>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e343      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001564:	f000 fc4a 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001568:	4602      	mov	r2, r0
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	4950      	ldr	r1, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001576:	5ccb      	ldrb	r3, [r1, r3]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_RCC_OscConfig+0x278>)
 8001582:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001584:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <HAL_RCC_OscConfig+0x27c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fac1 	bl	8000b10 <HAL_InitTick>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d052      	beq.n	800163e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	e327      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d032      	beq.n	800160a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a42      	ldr	r2, [pc, #264]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc34 	bl	8000e1c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc30 	bl	8000e1c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e310      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4931      	ldr	r1, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	492c      	ldr	r1, [pc, #176]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e01a      	b.n	8001640 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001616:	f7ff fc01 	bl	8000e1c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161e:	f7ff fbfd 	bl	8000e1c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e2dd      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x1da>
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d074      	beq.n	8001736 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x21a>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d10e      	bne.n	8001676 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d10b      	bne.n	8001676 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d064      	beq.n	8001734 <HAL_RCC_OscConfig+0x2f0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d160      	bne.n	8001734 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e2ba      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x24a>
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e026      	b.n	80016dc <HAL_RCC_OscConfig+0x298>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001696:	d115      	bne.n	80016c4 <HAL_RCC_OscConfig+0x280>
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800169e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a02      	ldr	r2, [pc, #8]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e014      	b.n	80016dc <HAL_RCC_OscConfig+0x298>
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08006dc8 	.word	0x08006dc8
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004
 80016c4:	4ba0      	ldr	r3, [pc, #640]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a9f      	ldr	r2, [pc, #636]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b9d      	ldr	r3, [pc, #628]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a9c      	ldr	r2, [pc, #624]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb9a 	bl	8000e1c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fb96 	bl	8000e1c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e276      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fe:	4b92      	ldr	r3, [pc, #584]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x2a8>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fb86 	bl	8000e1c <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fb82 	bl	8000e1c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e262      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001726:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x2d0>
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d060      	beq.n	8001804 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x310>
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d119      	bne.n	8001782 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d116      	bne.n	8001782 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_OscConfig+0x328>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e23f      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	4973      	ldr	r1, [pc, #460]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001780:	e040      	b.n	8001804 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d023      	beq.n	80017d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178a:	4b6f      	ldr	r3, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fb41 	bl	8000e1c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fb3d 	bl	8000e1c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e21d      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	495f      	ldr	r1, [pc, #380]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
 80017d0:	e018      	b.n	8001804 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a5c      	ldr	r2, [pc, #368]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fb1d 	bl	8000e1c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb19 	bl	8000e1c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1f9      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03c      	beq.n	800188a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01c      	beq.n	8001852 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001818:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181e:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff faf8 	bl	8000e1c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff faf4 	bl	8000e1c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1d4      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ef      	beq.n	8001830 <HAL_RCC_OscConfig+0x3ec>
 8001850:	e01b      	b.n	800188a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001858:	4a3b      	ldr	r2, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fadb 	bl	8000e1c <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff fad7 	bl	8000e1c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1b7      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ef      	bne.n	800186a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80a6 	beq.w	80019e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c0:	2301      	movs	r3, #1
 80018c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_RCC_OscConfig+0x508>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d118      	bne.n	8001902 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCC_OscConfig+0x508>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_RCC_OscConfig+0x508>)
 80018d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa9e 	bl	8000e1c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7ff fa9a 	bl	8000e1c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e17a      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x508>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d108      	bne.n	800191c <HAL_RCC_OscConfig+0x4d8>
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191a:	e029      	b.n	8001970 <HAL_RCC_OscConfig+0x52c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d115      	bne.n	8001950 <HAL_RCC_OscConfig+0x50c>
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a03      	ldr	r2, [pc, #12]	; (8001948 <HAL_RCC_OscConfig+0x504>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001944:	e014      	b.n	8001970 <HAL_RCC_OscConfig+0x52c>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
 8001950:	4b9c      	ldr	r3, [pc, #624]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a9b      	ldr	r2, [pc, #620]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001960:	4b98      	ldr	r3, [pc, #608]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	4a97      	ldr	r2, [pc, #604]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff fa50 	bl	8000e1c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff fa4c 	bl	8000e1c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e12a      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ed      	beq.n	8001980 <HAL_RCC_OscConfig+0x53c>
 80019a4:	e015      	b.n	80019d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7ff fa39 	bl	8000e1c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff fa35 	bl	8000e1c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e113      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ed      	bne.n	80019ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b7a      	ldr	r3, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	4a79      	ldr	r2, [pc, #484]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80fe 	beq.w	8001bea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	f040 80d0 	bne.w	8001b98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019f8:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d130      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	3b01      	subs	r3, #1
 8001a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d127      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d11f      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a38:	2a07      	cmp	r2, #7
 8001a3a:	bf14      	ite	ne
 8001a3c:	2201      	movne	r2, #1
 8001a3e:	2200      	moveq	r2, #0
 8001a40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d113      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	3b01      	subs	r3, #1
 8001a54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	3b01      	subs	r3, #1
 8001a68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d06e      	beq.n	8001b4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d069      	beq.n	8001b48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0ad      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a90:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a4b      	ldr	r2, [pc, #300]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a9c:	f7ff f9be 	bl	8000e1c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f9ba 	bl	8000e1c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e09a      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_RCC_OscConfig+0x784>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ad2:	3a01      	subs	r2, #1
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001adc:	0212      	lsls	r2, r2, #8
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ae4:	0852      	lsrs	r2, r2, #1
 8001ae6:	3a01      	subs	r2, #1
 8001ae8:	0552      	lsls	r2, r2, #21
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	3a01      	subs	r2, #1
 8001af4:	0652      	lsls	r2, r2, #25
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001afc:	0912      	lsrs	r2, r2, #4
 8001afe:	0452      	lsls	r2, r2, #17
 8001b00:	430a      	orrs	r2, r1
 8001b02:	4930      	ldr	r1, [pc, #192]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b20:	f7ff f97c 	bl	8000e1c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f978 	bl	8000e1c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e058      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b46:	e050      	b.n	8001bea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04f      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d148      	bne.n	8001bea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b70:	f7ff f954 	bl	8000e1c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f950 	bl	8000e1c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e030      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x734>
 8001b96:	e028      	b.n	8001bea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d023      	beq.n	8001be6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_RCC_OscConfig+0x780>)
 8001ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f937 	bl	8000e1c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	e00c      	b.n	8001bcc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f933 	bl	8000e1c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d905      	bls.n	8001bcc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e013      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ec      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x7b0>)
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4905      	ldr	r1, [pc, #20]	; (8001bf4 <HAL_RCC_OscConfig+0x7b0>)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_OscConfig+0x7b4>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	60cb      	str	r3, [r1, #12]
 8001be4:	e001      	b.n	8001bea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	feeefffc 	.word	0xfeeefffc

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0e7      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4970      	ldr	r1, [pc, #448]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0cf      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d908      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4960      	ldr	r1, [pc, #384]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d04c      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d121      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0a6      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	4b54      	ldr	r3, [pc, #336]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d115      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e09a      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb2:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e08e      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e086      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4943      	ldr	r1, [pc, #268]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f89a 	bl	8000e1c <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f896 	bl	8000e1c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e06e      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d208      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	492b      	ldr	r1, [pc, #172]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d210      	bcs.n	8001d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 0207 	bic.w	r2, r3, #7
 8001d58:	4923      	ldr	r1, [pc, #140]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e036      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4918      	ldr	r1, [pc, #96]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4910      	ldr	r1, [pc, #64]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001db0:	f000 f824 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	490b      	ldr	r1, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1f4>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fe9b 	bl	8000b10 <HAL_InitTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dde:	7afb      	ldrb	r3, [r7, #11]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08006dc8 	.word	0x08006dc8
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x34>
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d121      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d11e      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e005      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	e004      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d134      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d003      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ea0:	e005      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ea4:	617b      	str	r3, [r7, #20]
      break;
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eaa:	617b      	str	r3, [r7, #20]
      break;
 8001eac:	e002      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	617b      	str	r3, [r7, #20]
      break;
 8001eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	fb03 f202 	mul.w	r2, r3, r2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	0e5b      	lsrs	r3, r3, #25
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08006de0 	.word	0x08006de0
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	007a1200 	.word	0x007a1200

08001f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08006dd8 	.word	0x08006dd8

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f5c:	f7ff ffda 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0adb      	lsrs	r3, r3, #11
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08006dd8 	.word	0x08006dd8

08001f84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	220f      	movs	r2, #15
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	08db      	lsrs	r3, r3, #3
 8001fbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_RCC_GetClockConfig+0x60>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0207 	and.w	r2, r3, #7
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002000:	f7ff f9bc 	bl	800137c <HAL_PWREx_GetVoltageRange>
 8002004:	6178      	str	r0, [r7, #20]
 8002006:	e014      	b.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002020:	f7ff f9ac 	bl	800137c <HAL_PWREx_GetVoltageRange>
 8002024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d10b      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b80      	cmp	r3, #128	; 0x80
 800203e:	d919      	bls.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2ba0      	cmp	r3, #160	; 0xa0
 8002044:	d902      	bls.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002046:	2302      	movs	r3, #2
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e013      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800204c:	2301      	movs	r3, #1
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e010      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d902      	bls.n	800205e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002058:	2303      	movs	r3, #3
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e00a      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d102      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002064:	2302      	movs	r3, #2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e004      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b70      	cmp	r3, #112	; 0x70
 800206e:	d101      	bne.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0207 	bic.w	r2, r3, #7
 800207c:	4909      	ldr	r1, [pc, #36]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b4:	2300      	movs	r3, #0
 80020b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d041      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020cc:	d02a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020d2:	d824      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020de:	d81e      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d010      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020ea:	e018      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020ec:	4b86      	ldr	r3, [pc, #536]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a85      	ldr	r2, [pc, #532]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f8:	e015      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fabb 	bl	800267c <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800210a:	e00c      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fba6 	bl	8002864 <RCCEx_PLLSAI2_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211c:	e003      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	74fb      	strb	r3, [r7, #19]
      break;
 8002122:	e000      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213a:	4973      	ldr	r1, [pc, #460]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002142:	e001      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d041      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800215c:	d02a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800215e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002162:	d824      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002168:	d008      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800216e:	d81e      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d010      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800217a:	e018      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800217c:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a61      	ldr	r2, [pc, #388]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002188:	e015      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fa73 	bl	800267c <RCCEx_PLLSAI1_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800219a:	e00c      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3320      	adds	r3, #32
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb5e 	bl	8002864 <RCCEx_PLLSAI2_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ac:	e003      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	74fb      	strb	r3, [r7, #19]
      break;
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ca:	494f      	ldr	r1, [pc, #316]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021d2:	e001      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a0 	beq.w	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a40      	ldr	r2, [pc, #256]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002218:	2301      	movs	r3, #1
 800221a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002228:	f7fe fdf8 	bl	8000e1c <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800222e:	e009      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fdf4 	bl	8000e1c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	74fb      	strb	r3, [r7, #19]
        break;
 8002242:	e005      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ef      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d15c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01f      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d019      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fdb3 	bl	8000e1c <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b8:	e00b      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fdaf 	bl	8000e1c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	74fb      	strb	r3, [r7, #19]
            break;
 80022d0:	e006      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ec      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022fe:	e009      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
 8002304:	e006      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002314:	7c7b      	ldrb	r3, [r7, #17]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	4a9d      	ldr	r2, [pc, #628]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002332:	4b98      	ldr	r3, [pc, #608]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 0203 	bic.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	4994      	ldr	r1, [pc, #592]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002354:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 020c 	bic.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	498c      	ldr	r1, [pc, #560]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	4983      	ldr	r1, [pc, #524]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002398:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	497b      	ldr	r1, [pc, #492]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	4972      	ldr	r1, [pc, #456]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023dc:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	496a      	ldr	r1, [pc, #424]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	4961      	ldr	r1, [pc, #388]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002420:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	4959      	ldr	r1, [pc, #356]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	4950      	ldr	r1, [pc, #320]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	4948      	ldr	r1, [pc, #288]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	493f      	ldr	r1, [pc, #252]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d028      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b6:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e011      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024de:	d10c      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f8c8 	bl	800267c <RCCEx_PLLSAI1_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d028      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	491f      	ldr	r1, [pc, #124]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002524:	d106      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	e011      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800253c:	d10c      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f899 	bl	800267c <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02b      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002582:	d109      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a02      	ldr	r2, [pc, #8]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258e:	60d3      	str	r3, [r2, #12]
 8002590:	e014      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f867 	bl	800267c <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02f      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d6:	4928      	ldr	r1, [pc, #160]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e6:	d10d      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f844 	bl	800267c <RCCEx_PLLSAI1_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d014      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3320      	adds	r3, #32
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f925 	bl	8002864 <RCCEx_PLLSAI2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002666:	4904      	ldr	r1, [pc, #16]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800266e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268a:	4b75      	ldr	r3, [pc, #468]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d10d      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
       ||
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
       ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d047      	beq.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e044      	b.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d018      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x86>
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d825      	bhi.n	8002720 <RCCEx_PLLSAI1_Config+0xa4>
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d002      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x62>
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d009      	beq.n	80026f0 <RCCEx_PLLSAI1_Config+0x74>
 80026dc:	e020      	b.n	8002720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ee:	e01a      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e013      	b.n	800272a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002702:	4b57      	ldr	r3, [pc, #348]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800271e:	e006      	b.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e004      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002726:	bf00      	nop
 8002728:	e002      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002736:	4b4a      	ldr	r3, [pc, #296]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	430b      	orrs	r3, r1
 800274c:	4944      	ldr	r1, [pc, #272]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d17d      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a40      	ldr	r2, [pc, #256]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe fb5a 	bl	8000e1c <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276a:	e009      	b.n	8002780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800276c:	f7fe fb56 	bl	8000e1c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d902      	bls.n	8002780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	73fb      	strb	r3, [r7, #15]
        break;
 800277e:	e005      	b.n	800278c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ef      	bne.n	800276c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d160      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6892      	ldr	r2, [r2, #8]
 80027a8:	0211      	lsls	r1, r2, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	0912      	lsrs	r2, r2, #4
 80027b0:	0452      	lsls	r2, r2, #17
 80027b2:	430a      	orrs	r2, r1
 80027b4:	492a      	ldr	r1, [pc, #168]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
 80027ba:	e027      	b.n	800280c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d112      	bne.n	80027e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	0211      	lsls	r1, r2, #8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6912      	ldr	r2, [r2, #16]
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0552      	lsls	r2, r2, #21
 80027de:	430a      	orrs	r2, r1
 80027e0:	491f      	ldr	r1, [pc, #124]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	610b      	str	r3, [r1, #16]
 80027e6:	e011      	b.n	800280c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6952      	ldr	r2, [r2, #20]
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	3a01      	subs	r2, #1
 8002802:	0652      	lsls	r2, r2, #25
 8002804:	430a      	orrs	r2, r1
 8002806:	4916      	ldr	r1, [pc, #88]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fb00 	bl	8000e1c <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002820:	f7fe fafc 	bl	8000e1c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ef      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10d      	bne.n	80028aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
       ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
       ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d047      	beq.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e044      	b.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d018      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x86>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d825      	bhi.n	8002908 <RCCEx_PLLSAI2_Config+0xa4>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d002      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0x62>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d009      	beq.n	80028d8 <RCCEx_PLLSAI2_Config+0x74>
 80028c4:	e020      	b.n	8002908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11d      	bne.n	800290e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d6:	e01a      	b.n	800290e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e013      	b.n	8002912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ea:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002906:	e006      	b.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e004      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002916:	bf00      	nop
    }

    if(status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	430b      	orrs	r3, r1
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d167      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe fa66 	bl	8000e1c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002954:	f7fe fa62 	bl	8000e1c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
        break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ef      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d14a      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d111      	bne.n	80029a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68d2      	ldr	r2, [r2, #12]
 8002996:	0912      	lsrs	r2, r2, #4
 8002998:	0452      	lsls	r2, r2, #17
 800299a:	430a      	orrs	r2, r1
 800299c:	491f      	ldr	r1, [pc, #124]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	614b      	str	r3, [r1, #20]
 80029a2:	e011      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6912      	ldr	r2, [r2, #16]
 80029ba:	0852      	lsrs	r2, r2, #1
 80029bc:	3a01      	subs	r2, #1
 80029be:	0652      	lsls	r2, r2, #25
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4916      	ldr	r1, [pc, #88]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fa22 	bl	8000e1c <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029da:	e009      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029dc:	f7fe fa1e 	bl	8000e1c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	73fb      	strb	r3, [r7, #15]
          break;
 80029ee:	e005      	b.n	80029fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4904      	ldr	r1, [pc, #16]	; (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e049      	b.n	8002ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f841 	bl	8002ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 f9f8 	bl	8002e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04f      	b.n	8002b9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_TIM_Base_Start_IT+0x76>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b26:	d018      	beq.n	8002b5a <HAL_TIM_Base_Start_IT+0x76>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_TIM_Base_Start_IT+0xc8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_TIM_Base_Start_IT+0x76>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_TIM_Base_Start_IT+0x76>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_TIM_Base_Start_IT+0x76>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_TIM_Base_Start_IT+0x76>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d115      	bne.n	8002b86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b06      	cmp	r3, #6
 8002b6a:	d015      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0xb4>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d011      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	e008      	b.n	8002b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e000      	b.n	8002b9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40000c00 	.word	0x40000c00
 8002bb8:	40013400 	.word	0x40013400
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	00010007 	.word	0x00010007

08002bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0202 	mvn.w	r2, #2
 8002bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f905 	bl	8002e16 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f8f7 	bl	8002e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f908 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0204 	mvn.w	r2, #4
 8002c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8db 	bl	8002e16 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8cd 	bl	8002e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8de 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0208 	mvn.w	r2, #8
 8002c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8b1 	bl	8002e16 <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8a3 	bl	8002e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f8b4 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0210 	mvn.w	r2, #16
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f887 	bl	8002e16 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f879 	bl	8002e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f88a 	bl	8002e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10e      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0201 	mvn.w	r2, #1
 8002d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd fe48 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f914 	bl	8002f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d82:	d10e      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b80      	cmp	r3, #128	; 0x80
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f907 	bl	8002fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d10e      	bne.n	8002dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d107      	bne.n	8002dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f838 	bl	8002e3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d10e      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d107      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0220 	mvn.w	r2, #32
 8002df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8c7 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a40      	ldr	r2, [pc, #256]	; (8002f68 <TIM_Base_SetConfig+0x114>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <TIM_Base_SetConfig+0x11c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <TIM_Base_SetConfig+0x120>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <TIM_Base_SetConfig+0x124>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <TIM_Base_SetConfig+0x114>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d01b      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d017      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <TIM_Base_SetConfig+0x11c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <TIM_Base_SetConfig+0x120>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00f      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <TIM_Base_SetConfig+0x124>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <TIM_Base_SetConfig+0x128>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <TIM_Base_SetConfig+0x12c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0x9a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <TIM_Base_SetConfig+0x130>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <TIM_Base_SetConfig+0x114>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00f      	beq.n	8002f4c <TIM_Base_SetConfig+0xf8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <TIM_Base_SetConfig+0x124>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <TIM_Base_SetConfig+0xf8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <TIM_Base_SetConfig+0x128>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <TIM_Base_SetConfig+0xf8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <TIM_Base_SetConfig+0x12c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0xf8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <TIM_Base_SetConfig+0x130>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d103      	bne.n	8002f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	615a      	str	r2, [r3, #20]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	40013400 	.word	0x40013400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e040      	b.n	8003058 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fd36 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f82c 	bl	8003060 <UART_SetConfig>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e022      	b.n	8003058 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fad8 	bl	80035d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800302e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800303e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fb5f 	bl	8003714 <UART_CheckIdleState>
 8003056:	4603      	mov	r3, r0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b08a      	sub	sp, #40	; 0x28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4ba4      	ldr	r3, [pc, #656]	; (8003320 <UART_SetConfig+0x2c0>)
 8003090:	4013      	ands	r3, r2
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003098:	430b      	orrs	r3, r1
 800309a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a99      	ldr	r2, [pc, #612]	; (8003324 <UART_SetConfig+0x2c4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	4313      	orrs	r3, r2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a90      	ldr	r2, [pc, #576]	; (8003328 <UART_SetConfig+0x2c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d126      	bne.n	8003138 <UART_SetConfig+0xd8>
 80030ea:	4b90      	ldr	r3, [pc, #576]	; (800332c <UART_SetConfig+0x2cc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d81b      	bhi.n	8003130 <UART_SetConfig+0xd0>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0xa0>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003111 	.word	0x08003111
 8003104:	08003121 	.word	0x08003121
 8003108:	08003119 	.word	0x08003119
 800310c:	08003129 	.word	0x08003129
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e116      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e112      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003120:	2304      	movs	r3, #4
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e10e      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003128:	2308      	movs	r3, #8
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e10a      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003130:	2310      	movs	r3, #16
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e106      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7c      	ldr	r2, [pc, #496]	; (8003330 <UART_SetConfig+0x2d0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d138      	bne.n	80031b4 <UART_SetConfig+0x154>
 8003142:	4b7a      	ldr	r3, [pc, #488]	; (800332c <UART_SetConfig+0x2cc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d82d      	bhi.n	80031ac <UART_SetConfig+0x14c>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0xf8>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	0800318d 	.word	0x0800318d
 800315c:	080031ad 	.word	0x080031ad
 8003160:	080031ad 	.word	0x080031ad
 8003164:	080031ad 	.word	0x080031ad
 8003168:	0800319d 	.word	0x0800319d
 800316c:	080031ad 	.word	0x080031ad
 8003170:	080031ad 	.word	0x080031ad
 8003174:	080031ad 	.word	0x080031ad
 8003178:	08003195 	.word	0x08003195
 800317c:	080031ad 	.word	0x080031ad
 8003180:	080031ad 	.word	0x080031ad
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031a5 	.word	0x080031a5
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e0d8      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003194:	2302      	movs	r3, #2
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e0d4      	b.n	8003346 <UART_SetConfig+0x2e6>
 800319c:	2304      	movs	r3, #4
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e0d0      	b.n	8003346 <UART_SetConfig+0x2e6>
 80031a4:	2308      	movs	r3, #8
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e0cc      	b.n	8003346 <UART_SetConfig+0x2e6>
 80031ac:	2310      	movs	r3, #16
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e0c8      	b.n	8003346 <UART_SetConfig+0x2e6>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <UART_SetConfig+0x2d4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d125      	bne.n	800320a <UART_SetConfig+0x1aa>
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <UART_SetConfig+0x2cc>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031c8:	2b30      	cmp	r3, #48	; 0x30
 80031ca:	d016      	beq.n	80031fa <UART_SetConfig+0x19a>
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d818      	bhi.n	8003202 <UART_SetConfig+0x1a2>
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d00a      	beq.n	80031ea <UART_SetConfig+0x18a>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d814      	bhi.n	8003202 <UART_SetConfig+0x1a2>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <UART_SetConfig+0x182>
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d008      	beq.n	80031f2 <UART_SetConfig+0x192>
 80031e0:	e00f      	b.n	8003202 <UART_SetConfig+0x1a2>
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e8:	e0ad      	b.n	8003346 <UART_SetConfig+0x2e6>
 80031ea:	2302      	movs	r3, #2
 80031ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f0:	e0a9      	b.n	8003346 <UART_SetConfig+0x2e6>
 80031f2:	2304      	movs	r3, #4
 80031f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f8:	e0a5      	b.n	8003346 <UART_SetConfig+0x2e6>
 80031fa:	2308      	movs	r3, #8
 80031fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003200:	e0a1      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003202:	2310      	movs	r3, #16
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003208:	e09d      	b.n	8003346 <UART_SetConfig+0x2e6>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a4a      	ldr	r2, [pc, #296]	; (8003338 <UART_SetConfig+0x2d8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d125      	bne.n	8003260 <UART_SetConfig+0x200>
 8003214:	4b45      	ldr	r3, [pc, #276]	; (800332c <UART_SetConfig+0x2cc>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800321e:	2bc0      	cmp	r3, #192	; 0xc0
 8003220:	d016      	beq.n	8003250 <UART_SetConfig+0x1f0>
 8003222:	2bc0      	cmp	r3, #192	; 0xc0
 8003224:	d818      	bhi.n	8003258 <UART_SetConfig+0x1f8>
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d00a      	beq.n	8003240 <UART_SetConfig+0x1e0>
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d814      	bhi.n	8003258 <UART_SetConfig+0x1f8>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <UART_SetConfig+0x1d8>
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d008      	beq.n	8003248 <UART_SetConfig+0x1e8>
 8003236:	e00f      	b.n	8003258 <UART_SetConfig+0x1f8>
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323e:	e082      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003240:	2302      	movs	r3, #2
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003246:	e07e      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003248:	2304      	movs	r3, #4
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324e:	e07a      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003250:	2308      	movs	r3, #8
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e076      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003258:	2310      	movs	r3, #16
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e072      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a35      	ldr	r2, [pc, #212]	; (800333c <UART_SetConfig+0x2dc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d12a      	bne.n	80032c0 <UART_SetConfig+0x260>
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <UART_SetConfig+0x2cc>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003278:	d01a      	beq.n	80032b0 <UART_SetConfig+0x250>
 800327a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800327e:	d81b      	bhi.n	80032b8 <UART_SetConfig+0x258>
 8003280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003284:	d00c      	beq.n	80032a0 <UART_SetConfig+0x240>
 8003286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328a:	d815      	bhi.n	80032b8 <UART_SetConfig+0x258>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <UART_SetConfig+0x238>
 8003290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003294:	d008      	beq.n	80032a8 <UART_SetConfig+0x248>
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x258>
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e052      	b.n	8003346 <UART_SetConfig+0x2e6>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e04e      	b.n	8003346 <UART_SetConfig+0x2e6>
 80032a8:	2304      	movs	r3, #4
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e04a      	b.n	8003346 <UART_SetConfig+0x2e6>
 80032b0:	2308      	movs	r3, #8
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e046      	b.n	8003346 <UART_SetConfig+0x2e6>
 80032b8:	2310      	movs	r3, #16
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e042      	b.n	8003346 <UART_SetConfig+0x2e6>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a17      	ldr	r2, [pc, #92]	; (8003324 <UART_SetConfig+0x2c4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d13a      	bne.n	8003340 <UART_SetConfig+0x2e0>
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <UART_SetConfig+0x2cc>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d8:	d01a      	beq.n	8003310 <UART_SetConfig+0x2b0>
 80032da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032de:	d81b      	bhi.n	8003318 <UART_SetConfig+0x2b8>
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d00c      	beq.n	8003300 <UART_SetConfig+0x2a0>
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d815      	bhi.n	8003318 <UART_SetConfig+0x2b8>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <UART_SetConfig+0x298>
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d008      	beq.n	8003308 <UART_SetConfig+0x2a8>
 80032f6:	e00f      	b.n	8003318 <UART_SetConfig+0x2b8>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e022      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e01e      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e01a      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e016      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e012      	b.n	8003346 <UART_SetConfig+0x2e6>
 8003320:	efff69f3 	.word	0xefff69f3
 8003324:	40008000 	.word	0x40008000
 8003328:	40013800 	.word	0x40013800
 800332c:	40021000 	.word	0x40021000
 8003330:	40004400 	.word	0x40004400
 8003334:	40004800 	.word	0x40004800
 8003338:	40004c00 	.word	0x40004c00
 800333c:	40005000 	.word	0x40005000
 8003340:	2310      	movs	r3, #16
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a9f      	ldr	r2, [pc, #636]	; (80035c8 <UART_SetConfig+0x568>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d17a      	bne.n	8003446 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003354:	2b08      	cmp	r3, #8
 8003356:	d824      	bhi.n	80033a2 <UART_SetConfig+0x342>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x300>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003385 	.word	0x08003385
 8003364:	080033a3 	.word	0x080033a3
 8003368:	0800338d 	.word	0x0800338d
 800336c:	080033a3 	.word	0x080033a3
 8003370:	08003393 	.word	0x08003393
 8003374:	080033a3 	.word	0x080033a3
 8003378:	080033a3 	.word	0x080033a3
 800337c:	080033a3 	.word	0x080033a3
 8003380:	0800339b 	.word	0x0800339b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7fe fdd2 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8003388:	61f8      	str	r0, [r7, #28]
        break;
 800338a:	e010      	b.n	80033ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800338c:	4b8f      	ldr	r3, [pc, #572]	; (80035cc <UART_SetConfig+0x56c>)
 800338e:	61fb      	str	r3, [r7, #28]
        break;
 8003390:	e00d      	b.n	80033ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003392:	f7fe fd33 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8003396:	61f8      	str	r0, [r7, #28]
        break;
 8003398:	e009      	b.n	80033ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339e:	61fb      	str	r3, [r7, #28]
        break;
 80033a0:	e005      	b.n	80033ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80fb 	beq.w	80035ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d305      	bcc.n	80033d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d903      	bls.n	80033da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033d8:	e0e8      	b.n	80035ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2200      	movs	r2, #0
 80033de:	461c      	mov	r4, r3
 80033e0:	4615      	mov	r5, r2
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	022b      	lsls	r3, r5, #8
 80033ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033f0:	0222      	lsls	r2, r4, #8
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	6849      	ldr	r1, [r1, #4]
 80033f6:	0849      	lsrs	r1, r1, #1
 80033f8:	2000      	movs	r0, #0
 80033fa:	4688      	mov	r8, r1
 80033fc:	4681      	mov	r9, r0
 80033fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003402:	eb43 0b09 	adc.w	fp, r3, r9
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003414:	4650      	mov	r0, sl
 8003416:	4659      	mov	r1, fp
 8003418:	f7fc ff2a 	bl	8000270 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800342a:	d308      	bcc.n	800343e <UART_SetConfig+0x3de>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003432:	d204      	bcs.n	800343e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	e0b6      	b.n	80035ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003444:	e0b2      	b.n	80035ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344e:	d15e      	bne.n	800350e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003454:	2b08      	cmp	r3, #8
 8003456:	d828      	bhi.n	80034aa <UART_SetConfig+0x44a>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <UART_SetConfig+0x400>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe fd52 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e014      	b.n	80034b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7fe fd64 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8003490:	61f8      	str	r0, [r7, #28]
        break;
 8003492:	e010      	b.n	80034b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <UART_SetConfig+0x56c>)
 8003496:	61fb      	str	r3, [r7, #28]
        break;
 8003498:	e00d      	b.n	80034b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7fe fcaf 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 800349e:	61f8      	str	r0, [r7, #28]
        break;
 80034a0:	e009      	b.n	80034b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	61fb      	str	r3, [r7, #28]
        break;
 80034a8:	e005      	b.n	80034b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d077      	beq.n	80035ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005a      	lsls	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	441a      	add	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d916      	bls.n	8003506 <UART_SetConfig+0x4a6>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d212      	bcs.n	8003506 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f023 030f 	bic.w	r3, r3, #15
 80034e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	8afb      	ldrh	r3, [r7, #22]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	8afa      	ldrh	r2, [r7, #22]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	e052      	b.n	80035ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800350c:	e04e      	b.n	80035ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800350e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003512:	2b08      	cmp	r3, #8
 8003514:	d827      	bhi.n	8003566 <UART_SetConfig+0x506>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x4bc>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003541 	.word	0x08003541
 8003520:	08003549 	.word	0x08003549
 8003524:	08003551 	.word	0x08003551
 8003528:	08003567 	.word	0x08003567
 800352c:	08003557 	.word	0x08003557
 8003530:	08003567 	.word	0x08003567
 8003534:	08003567 	.word	0x08003567
 8003538:	08003567 	.word	0x08003567
 800353c:	0800355f 	.word	0x0800355f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe fcf4 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8003544:	61f8      	str	r0, [r7, #28]
        break;
 8003546:	e014      	b.n	8003572 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7fe fd06 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 800354c:	61f8      	str	r0, [r7, #28]
        break;
 800354e:	e010      	b.n	8003572 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <UART_SetConfig+0x56c>)
 8003552:	61fb      	str	r3, [r7, #28]
        break;
 8003554:	e00d      	b.n	8003572 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003556:	f7fe fc51 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 800355a:	61f8      	str	r0, [r7, #28]
        break;
 800355c:	e009      	b.n	8003572 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003562:	61fb      	str	r3, [r7, #28]
        break;
 8003564:	e005      	b.n	8003572 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003570:	bf00      	nop
    }

    if (pclk != 0U)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d019      	beq.n	80035ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	085a      	lsrs	r2, r3, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	441a      	add	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	d909      	bls.n	80035a6 <UART_SetConfig+0x546>
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d205      	bcs.n	80035a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	e002      	b.n	80035ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	40008000 	.word	0x40008000
 80035cc:	00f42400 	.word	0x00f42400

080035d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01a      	beq.n	80036e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ce:	d10a      	bne.n	80036e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]
  }
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003724:	f7fd fb7a 	bl	8000e1c <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b08      	cmp	r3, #8
 8003736:	d10e      	bne.n	8003756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f82d 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e023      	b.n	800379e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d10e      	bne.n	8003782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f817 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e00d      	b.n	800379e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b09c      	sub	sp, #112	; 0x70
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	e0a5      	b.n	8003904 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	f000 80a1 	beq.w	8003904 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fd fb2b 	bl	8000e1c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80037d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d13e      	bne.n	8003856 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ec:	667b      	str	r3, [r7, #100]	; 0x64
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e6      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	663b      	str	r3, [r7, #96]	; 0x60
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800382a:	64ba      	str	r2, [r7, #72]	; 0x48
 800382c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e067      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d04f      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003872:	d147      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800387c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003892:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
 800389e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e6      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	613b      	str	r3, [r7, #16]
   return(result);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038d0:	623a      	str	r2, [r7, #32]
 80038d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	6a3a      	ldr	r2, [r7, #32]
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e5      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e010      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	429a      	cmp	r2, r3
 8003920:	f43f af4a 	beq.w	80037b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3770      	adds	r7, #112	; 0x70
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800393c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003940:	2b84      	cmp	r3, #132	; 0x84
 8003942:	d005      	beq.n	8003950 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003944:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	3303      	adds	r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003950:	68fb      	ldr	r3, [r7, #12]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003962:	f000 ffcf 	bl	8004904 <vTaskStartScheduler>
  
  return osOK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}

0800396c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af04      	add	r7, sp, #16
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <osThreadCreate+0x54>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01c      	beq.n	80039c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685c      	ldr	r4, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681d      	ldr	r5, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691e      	ldr	r6, [r3, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ffc8 	bl	800392e <makeFreeRtosPriority>
 800399e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039a8:	9202      	str	r2, [sp, #8]
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	9100      	str	r1, [sp, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	4632      	mov	r2, r6
 80039b2:	4629      	mov	r1, r5
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 fddd 	bl	8004574 <xTaskCreateStatic>
 80039ba:	4603      	mov	r3, r0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e01c      	b.n	80039fa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685c      	ldr	r4, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039cc:	b29e      	uxth	r6, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ffaa 	bl	800392e <makeFreeRtosPriority>
 80039da:	4602      	mov	r2, r0
 80039dc:	f107 030c 	add.w	r3, r7, #12
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	9200      	str	r2, [sp, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4632      	mov	r2, r6
 80039e8:	4629      	mov	r1, r5
 80039ea:	4620      	mov	r0, r4
 80039ec:	f000 fe1f 	bl	800462e <xTaskCreate>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <osDelay+0x16>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	e000      	b.n	8003a1c <osDelay+0x18>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 ff3d 	bl	800489c <vTaskDelay>
  
  return osOK;
 8003a22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <osSemaphoreCreate+0x40>
    if (count == 1) {
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10a      	bne.n	8003a5a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	9200      	str	r2, [sp, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2001      	movs	r0, #1
 8003a52:	f000 f947 	bl	8003ce4 <xQueueGenericCreateStatic>
 8003a56:	4603      	mov	r3, r0
 8003a58:	e023      	b.n	8003aa2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8003a5a:	6838      	ldr	r0, [r7, #0]
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fa0f 	bl	8003e86 <xQueueCreateCountingSemaphoreStatic>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	e01a      	b.n	8003aa2 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d110      	bne.n	8003a94 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8003a72:	2203      	movs	r2, #3
 8003a74:	2100      	movs	r1, #0
 8003a76:	2001      	movs	r0, #1
 8003a78:	f000 f9ac 	bl	8003dd4 <xQueueGenericCreate>
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <osSemaphoreCreate+0x64>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa66 	bl	8003f5c <xQueueGenericSend>
      return sema;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	e006      	b.n	8003aa2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fa2a 	bl	8003ef4 <xQueueCreateCountingSemaphore>
 8003aa0:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f103 0208 	add.w	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f103 0208 	add.w	r2, r3, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f103 0208 	add.w	r2, r3, #8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d103      	bne.n	8003b6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e00c      	b.n	8003b86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e002      	b.n	8003b7a <vListInsert+0x2e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d2f6      	bcs.n	8003b74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6892      	ldr	r2, [r2, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6852      	ldr	r2, [r2, #4]
 8003bde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d103      	bne.n	8003bf2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c3e:	f001 fdb1 	bl	80057a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	22ff      	movs	r2, #255	; 0xff
 8003c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	22ff      	movs	r2, #255	; 0xff
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d114      	bne.n	8003cbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01a      	beq.n	8003cd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3310      	adds	r3, #16
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 f871 	bl	8004d88 <xTaskRemoveFromEventList>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <xQueueGenericReset+0xcc>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	e009      	b.n	8003cd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fef1 	bl	8003aaa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff feec 	bl	8003aaa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cd2:	f001 fd97 	bl	8005804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cd6:	2301      	movs	r3, #1
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08e      	sub	sp, #56	; 0x38
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <xQueueGenericCreateStatic+0x52>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <xQueueGenericCreateStatic+0x56>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <xQueueGenericCreateStatic+0x58>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	623b      	str	r3, [r7, #32]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <xQueueGenericCreateStatic+0x7e>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <xQueueGenericCreateStatic+0x82>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueGenericCreateStatic+0x84>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	61fb      	str	r3, [r7, #28]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d82:	2348      	movs	r3, #72	; 0x48
 8003d84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b48      	cmp	r3, #72	; 0x48
 8003d8a:	d00a      	beq.n	8003da2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	61bb      	str	r3, [r7, #24]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003da2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003db6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f83f 	bl	8003e48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3730      	adds	r7, #48	; 0x30
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xQueueGenericCreate+0x2a>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	613b      	str	r3, [r7, #16]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3348      	adds	r3, #72	; 0x48
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fdab 	bl	8005968 <pvPortMalloc>
 8003e12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d011      	beq.n	8003e3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3348      	adds	r3, #72	; 0x48
 8003e22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e2c:	79fa      	ldrb	r2, [r7, #7]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f805 	bl	8003e48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e002      	b.n	8003e6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e76:	2101      	movs	r1, #1
 8003e78:	69b8      	ldr	r0, [r7, #24]
 8003e7a:	f7ff fecb 	bl	8003c14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b08a      	sub	sp, #40	; 0x28
 8003e8a:	af02      	add	r7, sp, #8
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	61bb      	str	r3, [r7, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d90a      	bls.n	8003ecc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	617b      	str	r3, [r7, #20]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003ecc:	2302      	movs	r3, #2
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff04 	bl	8003ce4 <xQueueGenericCreateStatic>
 8003edc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003eea:	69fb      	ldr	r3, [r7, #28]
	}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90a      	bls.n	8003f38 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	60fb      	str	r3, [r7, #12]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f38:	2202      	movs	r2, #2
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff49 	bl	8003dd4 <xQueueGenericCreate>
 8003f42:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003f50:	697b      	ldr	r3, [r7, #20]
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	; 0x38
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <xQueueGenericSend+0x32>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <xQueueGenericSend+0x40>
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <xQueueGenericSend+0x44>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <xQueueGenericSend+0x46>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <xQueueGenericSend+0x60>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d103      	bne.n	8003fca <xQueueGenericSend+0x6e>
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <xQueueGenericSend+0x72>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <xQueueGenericSend+0x74>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <xQueueGenericSend+0x8e>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	623b      	str	r3, [r7, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fea:	f001 f889 	bl	8005100 <xTaskGetSchedulerState>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <xQueueGenericSend+0x9e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <xQueueGenericSend+0xa2>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <xQueueGenericSend+0xa4>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xQueueGenericSend+0xbe>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	61fb      	str	r3, [r7, #28]
}
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800401a:	f001 fbc3 	bl	80057a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <xQueueGenericSend+0xd4>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d129      	bne.n	8004084 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004036:	f000 f9b3 	bl	80043a0 <prvCopyDataToQueue>
 800403a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d010      	beq.n	8004066 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	3324      	adds	r3, #36	; 0x24
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fe9d 	bl	8004d88 <xTaskRemoveFromEventList>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d013      	beq.n	800407c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <xQueueGenericSend+0x1f8>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	e00a      	b.n	800407c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800406c:	4b39      	ldr	r3, [pc, #228]	; (8004154 <xQueueGenericSend+0x1f8>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800407c:	f001 fbc2 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 8004080:	2301      	movs	r3, #1
 8004082:	e063      	b.n	800414c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800408a:	f001 fbbb 	bl	8005804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800408e:	2300      	movs	r3, #0
 8004090:	e05c      	b.n	800414c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fed5 	bl	8004e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040a6:	f001 fbad 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040aa:	f000 fc8b 	bl	80049c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ae:	f001 fb79 	bl	80057a4 <vPortEnterCritical>
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d103      	bne.n	80040c8 <xQueueGenericSend+0x16c>
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ce:	b25b      	sxtb	r3, r3
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d103      	bne.n	80040de <xQueueGenericSend+0x182>
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040de:	f001 fb91 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040e2:	1d3a      	adds	r2, r7, #4
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fec4 	bl	8004e78 <xTaskCheckForTimeOut>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d124      	bne.n	8004140 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f8:	f000 fa24 	bl	8004544 <prvIsQueueFull>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	3310      	adds	r3, #16
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fe18 	bl	8004d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004112:	f000 f9af 	bl	8004474 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004116:	f000 fc63 	bl	80049e0 <xTaskResumeAll>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	f47f af7c 	bne.w	800401a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <xQueueGenericSend+0x1f8>)
 8004124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	e772      	b.n	800401a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004136:	f000 f99d 	bl	8004474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800413a:	f000 fc51 	bl	80049e0 <xTaskResumeAll>
 800413e:	e76c      	b.n	800401a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004142:	f000 f997 	bl	8004474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004146:	f000 fc4b 	bl	80049e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800414a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800414c:	4618      	mov	r0, r3
 800414e:	3738      	adds	r7, #56	; 0x38
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004162:	2300      	movs	r3, #0
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	61fb      	str	r3, [r7, #28]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a8:	f000 ffaa 	bl	8005100 <xTaskGetSchedulerState>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <xQueueSemaphoreTake+0x60>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <xQueueSemaphoreTake+0x64>
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <xQueueSemaphoreTake+0x66>
 80041bc:	2300      	movs	r3, #0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61bb      	str	r3, [r7, #24]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d8:	f001 fae4 	bl	80057a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d024      	beq.n	8004232 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80041f8:	f001 f92a 	bl	8005450 <pvTaskIncrementMutexHeldCount>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00f      	beq.n	800422a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	3310      	adds	r3, #16
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fdba 	bl	8004d88 <xTaskRemoveFromEventList>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800421a:	4b54      	ldr	r3, [pc, #336]	; (800436c <xQueueSemaphoreTake+0x214>)
 800421c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800422a:	f001 faeb 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 800422e:	2301      	movs	r3, #1
 8004230:	e097      	b.n	8004362 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004254:	f001 fad6 	bl	8005804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004258:	2300      	movs	r3, #0
 800425a:	e082      	b.n	8004362 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fdf0 	bl	8004e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004270:	f001 fac8 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004274:	f000 fba6 	bl	80049c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004278:	f001 fa94 	bl	80057a4 <vPortEnterCritical>
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004282:	b25b      	sxtb	r3, r3
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d103      	bne.n	8004292 <xQueueSemaphoreTake+0x13a>
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004298:	b25b      	sxtb	r3, r3
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d103      	bne.n	80042a8 <xQueueSemaphoreTake+0x150>
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a8:	f001 faac 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ac:	463a      	mov	r2, r7
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fddf 	bl	8004e78 <xTaskCheckForTimeOut>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d132      	bne.n	8004326 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042c2:	f000 f929 	bl	8004518 <prvIsQueueEmpty>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d026      	beq.n	800431a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80042d4:	f001 fa66 	bl	80057a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 ff2d 	bl	800513c <xTaskPriorityInherit>
 80042e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80042e4:	f001 fa8e 	bl	8005804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	3324      	adds	r3, #36	; 0x24
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd25 	bl	8004d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042f8:	f000 f8bc 	bl	8004474 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042fc:	f000 fb70 	bl	80049e0 <xTaskResumeAll>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	f47f af68 	bne.w	80041d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <xQueueSemaphoreTake+0x214>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	e75e      	b.n	80041d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800431a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800431c:	f000 f8aa 	bl	8004474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004320:	f000 fb5e 	bl	80049e0 <xTaskResumeAll>
 8004324:	e758      	b.n	80041d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004328:	f000 f8a4 	bl	8004474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800432c:	f000 fb58 	bl	80049e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004332:	f000 f8f1 	bl	8004518 <prvIsQueueEmpty>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	f43f af4d 	beq.w	80041d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004344:	f001 fa2e 	bl	80057a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800434a:	f000 f811 	bl	8004370 <prvGetDisinheritPriorityAfterTimeout>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ffec 	bl	8005334 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800435c:	f001 fa52 	bl	8005804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004362:	4618      	mov	r0, r3
 8004364:	3738      	adds	r7, #56	; 0x38
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1c3 0307 	rsb	r3, r3, #7
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e001      	b.n	8004392 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004392:	68fb      	ldr	r3, [r7, #12]
	}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d14d      	bne.n	8004462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 ff2c 	bl	8005228 <xTaskPriorityDisinherit>
 80043d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	e043      	b.n	8004462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d119      	bne.n	8004414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6858      	ldr	r0, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	461a      	mov	r2, r3
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	f001 fcd0 	bl	8005d90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d32b      	bcc.n	8004462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e026      	b.n	8004462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68d8      	ldr	r0, [r3, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	461a      	mov	r2, r3
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	f001 fcb6 	bl	8005d90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	425b      	negs	r3, r3
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	425b      	negs	r3, r3
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d105      	bne.n	8004462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	3b01      	subs	r3, #1
 8004460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800446a:	697b      	ldr	r3, [r7, #20]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800447c:	f001 f992 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004486:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004488:	e011      	b.n	80044ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3324      	adds	r3, #36	; 0x24
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc76 	bl	8004d88 <xTaskRemoveFromEventList>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044a2:	f000 fd4b 	bl	8004f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dce9      	bgt.n	800448a <prvUnlockQueue+0x16>
 80044b6:	e000      	b.n	80044ba <prvUnlockQueue+0x46>
					break;
 80044b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044c2:	f001 f99f 	bl	8005804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044c6:	f001 f96d 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044d2:	e011      	b.n	80044f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d012      	beq.n	8004502 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3310      	adds	r3, #16
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc51 	bl	8004d88 <xTaskRemoveFromEventList>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044ec:	f000 fd26 	bl	8004f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044f0:	7bbb      	ldrb	r3, [r7, #14]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	dce9      	bgt.n	80044d4 <prvUnlockQueue+0x60>
 8004500:	e000      	b.n	8004504 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004502:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	22ff      	movs	r2, #255	; 0xff
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800450c:	f001 f97a 	bl	8005804 <vPortExitCritical>
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004520:	f001 f940 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e001      	b.n	8004536 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004536:	f001 f965 	bl	8005804 <vPortExitCritical>

	return xReturn;
 800453a:	68fb      	ldr	r3, [r7, #12]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800454c:	f001 f92a 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	429a      	cmp	r2, r3
 800455a:	d102      	bne.n	8004562 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e001      	b.n	8004566 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004566:	f001 f94d 	bl	8005804 <vPortExitCritical>

	return xReturn;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08e      	sub	sp, #56	; 0x38
 8004578:	af04      	add	r7, sp, #16
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	623b      	str	r3, [r7, #32]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xTaskCreateStatic+0x46>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61fb      	str	r3, [r7, #28]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045ba:	2354      	movs	r3, #84	; 0x54
 80045bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b54      	cmp	r3, #84	; 0x54
 80045c2:	d00a      	beq.n	80045da <xTaskCreateStatic+0x66>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61bb      	str	r3, [r7, #24]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01e      	beq.n	8004620 <xTaskCreateStatic+0xac>
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045fa:	2300      	movs	r3, #0
 80045fc:	9303      	str	r3, [sp, #12]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	9302      	str	r3, [sp, #8]
 8004602:	f107 0314 	add.w	r3, r7, #20
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f850 	bl	80046b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800461a:	f000 f8d5 	bl	80047c8 <prvAddNewTaskToReadyList>
 800461e:	e001      	b.n	8004624 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004624:	697b      	ldr	r3, [r7, #20]
	}
 8004626:	4618      	mov	r0, r3
 8004628:	3728      	adds	r7, #40	; 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800462e:	b580      	push	{r7, lr}
 8004630:	b08c      	sub	sp, #48	; 0x30
 8004632:	af04      	add	r7, sp, #16
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f990 	bl	8005968 <pvPortMalloc>
 8004648:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004650:	2054      	movs	r0, #84	; 0x54
 8004652:	f001 f989 	bl	8005968 <pvPortMalloc>
 8004656:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
 8004664:	e005      	b.n	8004672 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004666:	6978      	ldr	r0, [r7, #20]
 8004668:	f001 fa4a 	bl	8005b00 <vPortFree>
 800466c:	e001      	b.n	8004672 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d017      	beq.n	80046a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004680:	88fa      	ldrh	r2, [r7, #6]
 8004682:	2300      	movs	r3, #0
 8004684:	9303      	str	r3, [sp, #12]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	9302      	str	r3, [sp, #8]
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f80e 	bl	80046b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800469c:	69f8      	ldr	r0, [r7, #28]
 800469e:	f000 f893 	bl	80047c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e002      	b.n	80046ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046ae:	69bb      	ldr	r3, [r7, #24]
	}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046d0:	3b01      	subs	r3, #1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <prvInitialiseNewTask+0x48>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	617b      	str	r3, [r7, #20]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01f      	beq.n	8004746 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e012      	b.n	8004732 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	7819      	ldrb	r1, [r3, #0]
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	3334      	adds	r3, #52	; 0x34
 800471c:	460a      	mov	r2, r1
 800471e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	3301      	adds	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d9e9      	bls.n	800470c <prvInitialiseNewTask+0x54>
 8004738:	e000      	b.n	800473c <prvInitialiseNewTask+0x84>
			{
				break;
 800473a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004744:	e003      	b.n	800474e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2b06      	cmp	r3, #6
 8004752:	d901      	bls.n	8004758 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004754:	2306      	movs	r3, #6
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004762:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	2200      	movs	r2, #0
 8004768:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f9bb 	bl	8003aea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	3318      	adds	r3, #24
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff f9b6 	bl	8003aea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	f1c3 0207 	rsb	r2, r3, #7
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2200      	movs	r2, #0
 8004798:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	69b8      	ldr	r0, [r7, #24]
 80047a8:	f000 fecc 	bl	8005544 <pxPortInitialiseStack>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047be:	bf00      	nop
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047d0:	f000 ffe8 	bl	80057a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <prvAddNewTaskToReadyList+0xb8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	4a29      	ldr	r2, [pc, #164]	; (8004880 <prvAddNewTaskToReadyList+0xb8>)
 80047dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <prvAddNewTaskToReadyList+0xbc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047e6:	4a27      	ldr	r2, [pc, #156]	; (8004884 <prvAddNewTaskToReadyList+0xbc>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <prvAddNewTaskToReadyList+0xb8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d110      	bne.n	8004816 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047f4:	f000 fbc6 	bl	8004f84 <prvInitialiseTaskLists>
 80047f8:	e00d      	b.n	8004816 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <prvAddNewTaskToReadyList+0xc0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004802:	4b20      	ldr	r3, [pc, #128]	; (8004884 <prvAddNewTaskToReadyList+0xbc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	429a      	cmp	r2, r3
 800480e:	d802      	bhi.n	8004816 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <prvAddNewTaskToReadyList+0xbc>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004816:	4b1d      	ldr	r3, [pc, #116]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <prvAddNewTaskToReadyList+0xc4>)
 800481e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	2201      	movs	r2, #1
 8004826:	409a      	lsls	r2, r3
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <prvAddNewTaskToReadyList+0xc8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <prvAddNewTaskToReadyList+0xc8>)
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <prvAddNewTaskToReadyList+0xcc>)
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7ff f95b 	bl	8003b04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800484e:	f000 ffd9 	bl	8005804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <prvAddNewTaskToReadyList+0xc0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800485a:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <prvAddNewTaskToReadyList+0xbc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	429a      	cmp	r2, r3
 8004866:	d207      	bcs.n	8004878 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvAddNewTaskToReadyList+0xd0>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	200004d4 	.word	0x200004d4
 8004884:	200003d4 	.word	0x200003d4
 8004888:	200004e0 	.word	0x200004e0
 800488c:	200004f0 	.word	0x200004f0
 8004890:	200004dc 	.word	0x200004dc
 8004894:	200003d8 	.word	0x200003d8
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d017      	beq.n	80048de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <vTaskDelay+0x60>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <vTaskDelay+0x30>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60bb      	str	r3, [r7, #8]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048cc:	f000 f87a 	bl	80049c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048d0:	2100      	movs	r1, #0
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fdd0 	bl	8005478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048d8:	f000 f882 	bl	80049e0 <xTaskResumeAll>
 80048dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <vTaskDelay+0x64>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	200004fc 	.word	0x200004fc
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004912:	463a      	mov	r2, r7
 8004914:	1d39      	adds	r1, r7, #4
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fe2a 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	9202      	str	r2, [sp, #8]
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	2300      	movs	r3, #0
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	2300      	movs	r3, #0
 8004930:	460a      	mov	r2, r1
 8004932:	491e      	ldr	r1, [pc, #120]	; (80049ac <vTaskStartScheduler+0xa8>)
 8004934:	481e      	ldr	r0, [pc, #120]	; (80049b0 <vTaskStartScheduler+0xac>)
 8004936:	f7ff fe1d 	bl	8004574 <xTaskCreateStatic>
 800493a:	4603      	mov	r3, r0
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <vTaskStartScheduler+0xb0>)
 800493e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004940:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <vTaskStartScheduler+0xb0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e001      	b.n	8004952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d116      	bne.n	8004986 <vTaskStartScheduler+0x82>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	613b      	str	r3, [r7, #16]
}
 800496a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <vTaskStartScheduler+0xb4>)
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <vTaskStartScheduler+0xb8>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <vTaskStartScheduler+0xbc>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004980:	f000 fe6e 	bl	8005660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004984:	e00e      	b.n	80049a4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d10a      	bne.n	80049a4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60fb      	str	r3, [r7, #12]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <vTaskStartScheduler+0x9e>
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	08006dc0 	.word	0x08006dc0
 80049b0:	08004f55 	.word	0x08004f55
 80049b4:	200004f8 	.word	0x200004f8
 80049b8:	200004f4 	.word	0x200004f4
 80049bc:	200004e0 	.word	0x200004e0
 80049c0:	200004d8 	.word	0x200004d8

080049c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <vTaskSuspendAll+0x18>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	4a03      	ldr	r2, [pc, #12]	; (80049dc <vTaskSuspendAll+0x18>)
 80049d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049d2:	bf00      	nop
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	200004fc 	.word	0x200004fc

080049e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <xTaskResumeAll+0x114>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <xTaskResumeAll+0x2c>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	603b      	str	r3, [r7, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a0c:	f000 feca 	bl	80057a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a10:	4b38      	ldr	r3, [pc, #224]	; (8004af4 <xTaskResumeAll+0x114>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	4a37      	ldr	r2, [pc, #220]	; (8004af4 <xTaskResumeAll+0x114>)
 8004a18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <xTaskResumeAll+0x114>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d161      	bne.n	8004ae6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a22:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <xTaskResumeAll+0x118>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d05d      	beq.n	8004ae6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a2a:	e02e      	b.n	8004a8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <xTaskResumeAll+0x11c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3318      	adds	r3, #24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff f8c0 	bl	8003bbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff f8bb 	bl	8003bbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <xTaskResumeAll+0x120>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <xTaskResumeAll+0x120>)
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <xTaskResumeAll+0x124>)
 8004a68:	441a      	add	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7ff f847 	bl	8003b04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <xTaskResumeAll+0x128>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <xTaskResumeAll+0x12c>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a8a:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <xTaskResumeAll+0x11c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1cc      	bne.n	8004a2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a98:	f000 fb12 	bl	80050c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <xTaskResumeAll+0x130>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004aa8:	f000 f836 	bl	8004b18 <xTaskIncrementTick>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <xTaskResumeAll+0x12c>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f1      	bne.n	8004aa8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <xTaskResumeAll+0x130>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <xTaskResumeAll+0x12c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <xTaskResumeAll+0x134>)
 8004ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ae6:	f000 fe8d 	bl	8005804 <vPortExitCritical>

	return xAlreadyYielded;
 8004aea:	68bb      	ldr	r3, [r7, #8]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200004fc 	.word	0x200004fc
 8004af8:	200004d4 	.word	0x200004d4
 8004afc:	20000494 	.word	0x20000494
 8004b00:	200004dc 	.word	0x200004dc
 8004b04:	200003d8 	.word	0x200003d8
 8004b08:	200003d4 	.word	0x200003d4
 8004b0c:	200004e8 	.word	0x200004e8
 8004b10:	200004e4 	.word	0x200004e4
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b22:	4b4e      	ldr	r3, [pc, #312]	; (8004c5c <xTaskIncrementTick+0x144>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 808e 	bne.w	8004c48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b2c:	4b4c      	ldr	r3, [pc, #304]	; (8004c60 <xTaskIncrementTick+0x148>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b34:	4a4a      	ldr	r2, [pc, #296]	; (8004c60 <xTaskIncrementTick+0x148>)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d120      	bne.n	8004b82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b40:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <xTaskIncrementTick+0x14c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	603b      	str	r3, [r7, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <xTaskIncrementTick+0x46>
 8004b60:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <xTaskIncrementTick+0x14c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <xTaskIncrementTick+0x150>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <xTaskIncrementTick+0x14c>)
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <xTaskIncrementTick+0x150>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <xTaskIncrementTick+0x154>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <xTaskIncrementTick+0x154>)
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	f000 fa9f 	bl	80050c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <xTaskIncrementTick+0x158>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d348      	bcc.n	8004c1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8c:	4b35      	ldr	r3, [pc, #212]	; (8004c64 <xTaskIncrementTick+0x14c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b96:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <xTaskIncrementTick+0x158>)
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9c:	601a      	str	r2, [r3, #0]
					break;
 8004b9e:	e03e      	b.n	8004c1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba0:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <xTaskIncrementTick+0x14c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d203      	bcs.n	8004bc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bb8:	4a2d      	ldr	r2, [pc, #180]	; (8004c70 <xTaskIncrementTick+0x158>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bbe:	e02e      	b.n	8004c1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fffa 	bl	8003bbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3318      	adds	r3, #24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fff1 	bl	8003bbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	2201      	movs	r2, #1
 8004be2:	409a      	lsls	r2, r3
 8004be4:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <xTaskIncrementTick+0x15c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <xTaskIncrementTick+0x15c>)
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <xTaskIncrementTick+0x160>)
 8004bfc:	441a      	add	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f7fe ff7d 	bl	8003b04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <xTaskIncrementTick+0x164>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d3b9      	bcc.n	8004b8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1c:	e7b6      	b.n	8004b8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <xTaskIncrementTick+0x164>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	4914      	ldr	r1, [pc, #80]	; (8004c78 <xTaskIncrementTick+0x160>)
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d901      	bls.n	8004c3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <xTaskIncrementTick+0x168>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e004      	b.n	8004c52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <xTaskIncrementTick+0x16c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <xTaskIncrementTick+0x16c>)
 8004c50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c52:	697b      	ldr	r3, [r7, #20]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	200004fc 	.word	0x200004fc
 8004c60:	200004d8 	.word	0x200004d8
 8004c64:	2000048c 	.word	0x2000048c
 8004c68:	20000490 	.word	0x20000490
 8004c6c:	200004ec 	.word	0x200004ec
 8004c70:	200004f4 	.word	0x200004f4
 8004c74:	200004dc 	.word	0x200004dc
 8004c78:	200003d8 	.word	0x200003d8
 8004c7c:	200003d4 	.word	0x200003d4
 8004c80:	200004e8 	.word	0x200004e8
 8004c84:	200004e4 	.word	0x200004e4

08004c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c8e:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <vTaskSwitchContext+0xa4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c96:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <vTaskSwitchContext+0xa8>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c9c:	e03f      	b.n	8004d1e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <vTaskSwitchContext+0xa8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca4:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <vTaskSwitchContext+0xac>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
 8004cb4:	f1c3 031f 	rsb	r3, r3, #31
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	491f      	ldr	r1, [pc, #124]	; (8004d38 <vTaskSwitchContext+0xb0>)
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <vTaskSwitchContext+0x5a>
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <vTaskSwitchContext+0xb0>)
 8004cf0:	4413      	add	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3308      	adds	r3, #8
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d104      	bne.n	8004d14 <vTaskSwitchContext+0x8c>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <vTaskSwitchContext+0xb4>)
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	200004fc 	.word	0x200004fc
 8004d30:	200004e8 	.word	0x200004e8
 8004d34:	200004dc 	.word	0x200004dc
 8004d38:	200003d8 	.word	0x200003d8
 8004d3c:	200003d4 	.word	0x200003d4

08004d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <vTaskPlaceOnEventList+0x44>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3318      	adds	r3, #24
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fe feec 	bl	8003b4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d74:	2101      	movs	r1, #1
 8004d76:	6838      	ldr	r0, [r7, #0]
 8004d78:	f000 fb7e 	bl	8005478 <prvAddCurrentTaskToDelayedList>
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200003d4 	.word	0x200003d4

08004d88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	3318      	adds	r3, #24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe ff00 	bl	8003bbe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <xTaskRemoveFromEventList+0xac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11c      	bne.n	8004e00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fef7 	bl	8003bbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <xTaskRemoveFromEventList+0xb0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <xTaskRemoveFromEventList+0xb0>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <xTaskRemoveFromEventList+0xb4>)
 8004df0:	441a      	add	r2, r3
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7fe fe83 	bl	8003b04 <vListInsertEnd>
 8004dfe:	e005      	b.n	8004e0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	3318      	adds	r3, #24
 8004e04:	4619      	mov	r1, r3
 8004e06:	480e      	ldr	r0, [pc, #56]	; (8004e40 <xTaskRemoveFromEventList+0xb8>)
 8004e08:	f7fe fe7c 	bl	8003b04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <xTaskRemoveFromEventList+0xbc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d905      	bls.n	8004e26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <xTaskRemoveFromEventList+0xc0>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e001      	b.n	8004e2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e2a:	697b      	ldr	r3, [r7, #20]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200004fc 	.word	0x200004fc
 8004e38:	200004dc 	.word	0x200004dc
 8004e3c:	200003d8 	.word	0x200003d8
 8004e40:	20000494 	.word	0x20000494
 8004e44:	200003d4 	.word	0x200003d4
 8004e48:	200004e8 	.word	0x200004e8

08004e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <vTaskInternalSetTimeOutState+0x24>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <vTaskInternalSetTimeOutState+0x28>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	200004ec 	.word	0x200004ec
 8004e74:	200004d8 	.word	0x200004d8

08004e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	613b      	str	r3, [r7, #16]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004eba:	f000 fc73 	bl	80057a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <xTaskCheckForTimeOut+0xbc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d102      	bne.n	8004ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	e023      	b.n	8004f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xTaskCheckForTimeOut+0xc0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d007      	beq.n	8004efa <xTaskCheckForTimeOut+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e015      	b.n	8004f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d20b      	bcs.n	8004f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff9b 	bl	8004e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e004      	b.n	8004f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f26:	f000 fc6d 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200004d8 	.word	0x200004d8
 8004f38:	200004ec 	.word	0x200004ec

08004f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <vTaskMissedYield+0x14>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	200004e8 	.word	0x200004e8

08004f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f5c:	f000 f852 	bl	8005004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <prvIdleTask+0x28>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d9f9      	bls.n	8004f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <prvIdleTask+0x2c>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f78:	e7f0      	b.n	8004f5c <prvIdleTask+0x8>
 8004f7a:	bf00      	nop
 8004f7c:	200003d8 	.word	0x200003d8
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	e00c      	b.n	8004faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <prvInitialiseTaskLists+0x60>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fd83 	bl	8003aaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d9ef      	bls.n	8004f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fb0:	480d      	ldr	r0, [pc, #52]	; (8004fe8 <prvInitialiseTaskLists+0x64>)
 8004fb2:	f7fe fd7a 	bl	8003aaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fb6:	480d      	ldr	r0, [pc, #52]	; (8004fec <prvInitialiseTaskLists+0x68>)
 8004fb8:	f7fe fd77 	bl	8003aaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fbc:	480c      	ldr	r0, [pc, #48]	; (8004ff0 <prvInitialiseTaskLists+0x6c>)
 8004fbe:	f7fe fd74 	bl	8003aaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fc2:	480c      	ldr	r0, [pc, #48]	; (8004ff4 <prvInitialiseTaskLists+0x70>)
 8004fc4:	f7fe fd71 	bl	8003aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fc8:	480b      	ldr	r0, [pc, #44]	; (8004ff8 <prvInitialiseTaskLists+0x74>)
 8004fca:	f7fe fd6e 	bl	8003aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <prvInitialiseTaskLists+0x78>)
 8004fd0:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <prvInitialiseTaskLists+0x64>)
 8004fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <prvInitialiseTaskLists+0x7c>)
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <prvInitialiseTaskLists+0x68>)
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200003d8 	.word	0x200003d8
 8004fe8:	20000464 	.word	0x20000464
 8004fec:	20000478 	.word	0x20000478
 8004ff0:	20000494 	.word	0x20000494
 8004ff4:	200004a8 	.word	0x200004a8
 8004ff8:	200004c0 	.word	0x200004c0
 8004ffc:	2000048c 	.word	0x2000048c
 8005000:	20000490 	.word	0x20000490

08005004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800500a:	e019      	b.n	8005040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800500c:	f000 fbca 	bl	80057a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <prvCheckTasksWaitingTermination+0x50>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fdce 	bl	8003bbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005022:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <prvCheckTasksWaitingTermination+0x54>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3b01      	subs	r3, #1
 8005028:	4a0b      	ldr	r2, [pc, #44]	; (8005058 <prvCheckTasksWaitingTermination+0x54>)
 800502a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <prvCheckTasksWaitingTermination+0x58>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3b01      	subs	r3, #1
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <prvCheckTasksWaitingTermination+0x58>)
 8005034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005036:	f000 fbe5 	bl	8005804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f810 	bl	8005060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <prvCheckTasksWaitingTermination+0x58>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e1      	bne.n	800500c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200004a8 	.word	0x200004a8
 8005058:	200004d4 	.word	0x200004d4
 800505c:	200004bc 	.word	0x200004bc

08005060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fd42 	bl	8005b00 <vPortFree>
				vPortFree( pxTCB );
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fd3f 	bl	8005b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005082:	e018      	b.n	80050b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800508a:	2b01      	cmp	r3, #1
 800508c:	d103      	bne.n	8005096 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd36 	bl	8005b00 <vPortFree>
	}
 8005094:	e00f      	b.n	80050b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800509c:	2b02      	cmp	r3, #2
 800509e:	d00a      	beq.n	80050b6 <prvDeleteTCB+0x56>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <prvDeleteTCB+0x54>
	}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <prvResetNextTaskUnblockTime+0x38>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <prvResetNextTaskUnblockTime+0x3c>)
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050d8:	e008      	b.n	80050ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <prvResetNextTaskUnblockTime+0x38>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <prvResetNextTaskUnblockTime+0x3c>)
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	2000048c 	.word	0x2000048c
 80050fc:	200004f4 	.word	0x200004f4

08005100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <xTaskGetSchedulerState+0x34>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800510e:	2301      	movs	r3, #1
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	e008      	b.n	8005126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <xTaskGetSchedulerState+0x38>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800511c:	2302      	movs	r3, #2
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	e001      	b.n	8005126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005126:	687b      	ldr	r3, [r7, #4]
	}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	200004e0 	.word	0x200004e0
 8005138:	200004fc 	.word	0x200004fc

0800513c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d05e      	beq.n	8005210 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4b31      	ldr	r3, [pc, #196]	; (800521c <xTaskPriorityInherit+0xe0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d24e      	bcs.n	80051fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db06      	blt.n	8005176 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005168:	4b2c      	ldr	r3, [pc, #176]	; (800521c <xTaskPriorityInherit+0xe0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	f1c3 0207 	rsb	r2, r3, #7
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6959      	ldr	r1, [r3, #20]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <xTaskPriorityInherit+0xe4>)
 8005188:	4413      	add	r3, r2
 800518a:	4299      	cmp	r1, r3
 800518c:	d12f      	bne.n	80051ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3304      	adds	r3, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fd13 	bl	8003bbe <uxListRemove>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	2201      	movs	r2, #1
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43da      	mvns	r2, r3
 80051aa:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <xTaskPriorityInherit+0xe8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4013      	ands	r3, r2
 80051b0:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <xTaskPriorityInherit+0xe8>)
 80051b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051b4:	4b19      	ldr	r3, [pc, #100]	; (800521c <xTaskPriorityInherit+0xe0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	2201      	movs	r2, #1
 80051c4:	409a      	lsls	r2, r3
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <xTaskPriorityInherit+0xe8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <xTaskPriorityInherit+0xe8>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4a10      	ldr	r2, [pc, #64]	; (8005220 <xTaskPriorityInherit+0xe4>)
 80051de:	441a      	add	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7fe fc8c 	bl	8003b04 <vListInsertEnd>
 80051ec:	e004      	b.n	80051f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <xTaskPriorityInherit+0xe0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e008      	b.n	8005210 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <xTaskPriorityInherit+0xe0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	429a      	cmp	r2, r3
 800520a:	d201      	bcs.n	8005210 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005210:	68fb      	ldr	r3, [r7, #12]
	}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	200003d4 	.word	0x200003d4
 8005220:	200003d8 	.word	0x200003d8
 8005224:	200004dc 	.word	0x200004dc

08005228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d06e      	beq.n	800531c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800523e:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <xTaskPriorityDisinherit+0x100>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d00a      	beq.n	800525e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60fb      	str	r3, [r7, #12]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60bb      	str	r3, [r7, #8]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	1e5a      	subs	r2, r3, #1
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	429a      	cmp	r2, r3
 8005290:	d044      	beq.n	800531c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005296:	2b00      	cmp	r3, #0
 8005298:	d140      	bne.n	800531c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3304      	adds	r3, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fc8d 	bl	8003bbe <uxListRemove>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d115      	bne.n	80052d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	491f      	ldr	r1, [pc, #124]	; (800532c <xTaskPriorityDisinherit+0x104>)
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xTaskPriorityDisinherit+0xae>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	2201      	movs	r2, #1
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43da      	mvns	r2, r3
 80052cc:	4b18      	ldr	r3, [pc, #96]	; (8005330 <xTaskPriorityDisinherit+0x108>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4013      	ands	r3, r2
 80052d2:	4a17      	ldr	r2, [pc, #92]	; (8005330 <xTaskPriorityDisinherit+0x108>)
 80052d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	f1c3 0207 	rsb	r2, r3, #7
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	2201      	movs	r2, #1
 80052f0:	409a      	lsls	r2, r3
 80052f2:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <xTaskPriorityDisinherit+0x108>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <xTaskPriorityDisinherit+0x108>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <xTaskPriorityDisinherit+0x104>)
 800530a:	441a      	add	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fe fbf6 	bl	8003b04 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800531c:	697b      	ldr	r3, [r7, #20]
	}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200003d4 	.word	0x200003d4
 800532c:	200003d8 	.word	0x200003d8
 8005330:	200004dc 	.word	0x200004dc

08005334 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005342:	2301      	movs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d077      	beq.n	800543c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d902      	bls.n	800537a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e002      	b.n	8005380 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	429a      	cmp	r2, r3
 8005388:	d058      	beq.n	800543c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	429a      	cmp	r2, r3
 8005392:	d153      	bne.n	800543c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	429a      	cmp	r2, r3
 800539c:	d10a      	bne.n	80053b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60bb      	str	r3, [r7, #8]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db04      	blt.n	80053d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f1c3 0207 	rsb	r2, r3, #7
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	6959      	ldr	r1, [r3, #20]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4a19      	ldr	r2, [pc, #100]	; (8005448 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80053e2:	4413      	add	r3, r2
 80053e4:	4299      	cmp	r1, r3
 80053e6:	d129      	bne.n	800543c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fbe6 	bl	8003bbe <uxListRemove>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	2201      	movs	r2, #1
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43da      	mvns	r2, r3
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4013      	ands	r3, r2
 800540a:	4a10      	ldr	r2, [pc, #64]	; (800544c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800540c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	2201      	movs	r2, #1
 8005414:	409a      	lsls	r2, r3
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4313      	orrs	r3, r2
 800541c:	4a0b      	ldr	r2, [pc, #44]	; (800544c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a06      	ldr	r2, [pc, #24]	; (8005448 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800542e:	441a      	add	r2, r3
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fb64 	bl	8003b04 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800543c:	bf00      	nop
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200003d4 	.word	0x200003d4
 8005448:	200003d8 	.word	0x200003d8
 800544c:	200004dc 	.word	0x200004dc

08005450 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <pvTaskIncrementMutexHeldCount+0x24>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <pvTaskIncrementMutexHeldCount+0x24>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005462:	3201      	adds	r2, #1
 8005464:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <pvTaskIncrementMutexHeldCount+0x24>)
 8005468:	681b      	ldr	r3, [r3, #0]
	}
 800546a:	4618      	mov	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	200003d4 	.word	0x200003d4

08005478 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005482:	4b29      	ldr	r3, [pc, #164]	; (8005528 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005488:	4b28      	ldr	r3, [pc, #160]	; (800552c <prvAddCurrentTaskToDelayedList+0xb4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fb95 	bl	8003bbe <uxListRemove>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800549a:	4b24      	ldr	r3, [pc, #144]	; (800552c <prvAddCurrentTaskToDelayedList+0xb4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	2201      	movs	r2, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43da      	mvns	r2, r3
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4013      	ands	r3, r2
 80054ae:	4a20      	ldr	r2, [pc, #128]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d10a      	bne.n	80054d0 <prvAddCurrentTaskToDelayedList+0x58>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4619      	mov	r1, r3
 80054c8:	481a      	ldr	r0, [pc, #104]	; (8005534 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054ca:	f7fe fb1b 	bl	8003b04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054ce:	e026      	b.n	800551e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054d8:	4b14      	ldr	r3, [pc, #80]	; (800552c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d209      	bcs.n	80054fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f7fe fb29 	bl	8003b4c <vListInsert>
}
 80054fa:	e010      	b.n	800551e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <prvAddCurrentTaskToDelayedList+0xc4>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fe fb1f 	bl	8003b4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800550e:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d202      	bcs.n	800551e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005518:	4a09      	ldr	r2, [pc, #36]	; (8005540 <prvAddCurrentTaskToDelayedList+0xc8>)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6013      	str	r3, [r2, #0]
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200004d8 	.word	0x200004d8
 800552c:	200003d4 	.word	0x200003d4
 8005530:	200004dc 	.word	0x200004dc
 8005534:	200004c0 	.word	0x200004c0
 8005538:	20000490 	.word	0x20000490
 800553c:	2000048c 	.word	0x2000048c
 8005540:	200004f4 	.word	0x200004f4

08005544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b04      	subs	r3, #4
 8005554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800555c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3b04      	subs	r3, #4
 8005562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f023 0201 	bic.w	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b04      	subs	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <pxPortInitialiseStack+0x64>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b14      	subs	r3, #20
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b04      	subs	r3, #4
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f06f 0202 	mvn.w	r2, #2
 8005592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3b20      	subs	r3, #32
 8005598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	080055ad 	.word	0x080055ad

080055ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <prvTaskExitError+0x54>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d00a      	beq.n	80055d6 <prvTaskExitError+0x2a>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <prvTaskExitError+0x28>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60bb      	str	r3, [r7, #8]
}
 80055e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055ea:	bf00      	nop
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0fc      	beq.n	80055ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	2000000c 	.word	0x2000000c
	...

08005610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <pxCurrentTCBConst2>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	f380 8809 	msr	PSP, r0
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	4770      	bx	lr
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst2>:
 8005630:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <prvPortStartFirstTask+0x24>)
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f380 8808 	msr	MSP, r0
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8814 	msr	CONTROL, r0
 800564a:	b662      	cpsie	i
 800564c:	b661      	cpsie	f
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	df00      	svc	0
 8005658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800565a:	bf00      	nop
 800565c:	e000ed08 	.word	0xe000ed08

08005660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <xPortStartScheduler+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x26>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <xPortStartScheduler+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3f      	ldr	r2, [pc, #252]	; (8005788 <xPortStartScheduler+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10a      	bne.n	80056a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <xPortStartScheduler+0x12c>)
 80056a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <xPortStartScheduler+0x130>)
 80056cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <xPortStartScheduler+0x134>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056d4:	e009      	b.n	80056ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <xPortStartScheduler+0x134>)
 80056de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d0ef      	beq.n	80056d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <xPortStartScheduler+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1c3 0307 	rsb	r3, r3, #7
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00a      	beq.n	8005718 <xPortStartScheduler+0xb8>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <xPortStartScheduler+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <xPortStartScheduler+0x134>)
 8005720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <xPortStartScheduler+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <xPortStartScheduler+0x134>)
 800572c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <xPortStartScheduler+0x138>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <xPortStartScheduler+0x138>)
 800573c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <xPortStartScheduler+0x138>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <xPortStartScheduler+0x138>)
 8005748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800574c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800574e:	f000 f8dd 	bl	800590c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <xPortStartScheduler+0x13c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005758:	f000 f8fc 	bl	8005954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xPortStartScheduler+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <xPortStartScheduler+0x140>)
 8005762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005768:	f7ff ff66 	bl	8005638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800576c:	f7ff fa8c 	bl	8004c88 <vTaskSwitchContext>
	prvTaskExitError();
 8005770:	f7ff ff1c 	bl	80055ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00
 8005784:	410fc271 	.word	0x410fc271
 8005788:	410fc270 	.word	0x410fc270
 800578c:	e000e400 	.word	0xe000e400
 8005790:	20000500 	.word	0x20000500
 8005794:	20000504 	.word	0x20000504
 8005798:	e000ed20 	.word	0xe000ed20
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	e000ef34 	.word	0xe000ef34

080057a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <vPortEnterCritical+0x58>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <vPortEnterCritical+0x58>)
 80057c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <vPortEnterCritical+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10f      	bne.n	80057f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <vPortEnterCritical+0x5c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vPortEnterCritical+0x4a>
	}
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <vPortExitCritical+0x50>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <vPortExitCritical+0x24>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	607b      	str	r3, [r7, #4]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <vPortExitCritical+0x50>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <vPortExitCritical+0x50>)
 8005830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <vPortExitCritical+0x50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <vPortExitCritical+0x42>
 800583a:	2300      	movs	r3, #0
 800583c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005860:	f3ef 8009 	mrs	r0, PSP
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <pxCurrentTCBConst>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f01e 0f10 	tst.w	lr, #16
 8005870:	bf08      	it	eq
 8005872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	6010      	str	r0, [r2, #0]
 800587c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005884:	f380 8811 	msr	BASEPRI, r0
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f7ff f9fa 	bl	8004c88 <vTaskSwitchContext>
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f380 8811 	msr	BASEPRI, r0
 800589c:	bc09      	pop	{r0, r3}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f01e 0f10 	tst.w	lr, #16
 80058aa:	bf08      	it	eq
 80058ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058b0:	f380 8809 	msr	PSP, r0
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst>:
 80058c0:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e2:	f7ff f919 	bl	8004b18 <xTaskIncrementTick>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <SysTick_Handler+0x40>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <vPortSetupTimerInterrupt+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vPortSetupTimerInterrupt+0x3c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <vPortSetupTimerInterrupt+0x40>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <vPortSetupTimerInterrupt+0x44>)
 800592a:	3b01      	subs	r3, #1
 800592c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e010 	.word	0xe000e010
 8005944:	e000e018 	.word	0xe000e018
 8005948:	20000000 	.word	0x20000000
 800594c:	10624dd3 	.word	0x10624dd3
 8005950:	e000e014 	.word	0xe000e014

08005954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005964 <vPortEnableVFP+0x10>
 8005958:	6801      	ldr	r1, [r0, #0]
 800595a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595e:	6001      	str	r1, [r0, #0]
 8005960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005962:	bf00      	nop
 8005964:	e000ed88 	.word	0xe000ed88

08005968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005974:	f7ff f826 	bl	80049c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005978:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <pvPortMalloc+0x180>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005980:	f000 f920 	bl	8005bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005984:	4b59      	ldr	r3, [pc, #356]	; (8005aec <pvPortMalloc+0x184>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8093 	bne.w	8005ab8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01d      	beq.n	80059d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005998:	2208      	movs	r2, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4413      	add	r3, r2
 800599e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f023 0307 	bic.w	r3, r3, #7
 80059b0:	3308      	adds	r3, #8
 80059b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <pvPortMalloc+0x6c>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	617b      	str	r3, [r7, #20]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d06e      	beq.n	8005ab8 <pvPortMalloc+0x150>
 80059da:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <pvPortMalloc+0x188>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d869      	bhi.n	8005ab8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059e4:	4b43      	ldr	r3, [pc, #268]	; (8005af4 <pvPortMalloc+0x18c>)
 80059e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059e8:	4b42      	ldr	r3, [pc, #264]	; (8005af4 <pvPortMalloc+0x18c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ee:	e004      	b.n	80059fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d903      	bls.n	8005a0c <pvPortMalloc+0xa4>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f1      	bne.n	80059f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <pvPortMalloc+0x180>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d050      	beq.n	8005ab8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	2308      	movs	r3, #8
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d91f      	bls.n	8005a78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <pvPortMalloc+0xf8>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	613b      	str	r3, [r7, #16]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a72:	69b8      	ldr	r0, [r7, #24]
 8005a74:	f000 f908 	bl	8005c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <pvPortMalloc+0x188>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <pvPortMalloc+0x188>)
 8005a84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <pvPortMalloc+0x188>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <pvPortMalloc+0x190>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d203      	bcs.n	8005a9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <pvPortMalloc+0x188>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <pvPortMalloc+0x190>)
 8005a98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <pvPortMalloc+0x184>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <pvPortMalloc+0x194>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	4a11      	ldr	r2, [pc, #68]	; (8005afc <pvPortMalloc+0x194>)
 8005ab6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ab8:	f7fe ff92 	bl	80049e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <pvPortMalloc+0x174>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	60fb      	str	r3, [r7, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	e7fe      	b.n	8005ada <pvPortMalloc+0x172>
	return pvReturn;
 8005adc:	69fb      	ldr	r3, [r7, #28]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200010c8 	.word	0x200010c8
 8005aec:	200010dc 	.word	0x200010dc
 8005af0:	200010cc 	.word	0x200010cc
 8005af4:	200010c0 	.word	0x200010c0
 8005af8:	200010d0 	.word	0x200010d0
 8005afc:	200010d4 	.word	0x200010d4

08005b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04d      	beq.n	8005bae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b12:	2308      	movs	r3, #8
 8005b14:	425b      	negs	r3, r3
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <vPortFree+0xb8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <vPortFree+0x44>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60fb      	str	r3, [r7, #12]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <vPortFree+0x62>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60bb      	str	r3, [r7, #8]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <vPortFree+0xb8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01e      	beq.n	8005bae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11a      	bne.n	8005bae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <vPortFree+0xb8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	43db      	mvns	r3, r3
 8005b82:	401a      	ands	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b88:	f7fe ff1c 	bl	80049c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <vPortFree+0xbc>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4413      	add	r3, r2
 8005b96:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <vPortFree+0xbc>)
 8005b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b9a:	6938      	ldr	r0, [r7, #16]
 8005b9c:	f000 f874 	bl	8005c88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <vPortFree+0xc0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a06      	ldr	r2, [pc, #24]	; (8005bc0 <vPortFree+0xc0>)
 8005ba8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005baa:	f7fe ff19 	bl	80049e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200010dc 	.word	0x200010dc
 8005bbc:	200010cc 	.word	0x200010cc
 8005bc0:	200010d8 	.word	0x200010d8

08005bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bd0:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <prvHeapInit+0xac>)
 8005bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3307      	adds	r3, #7
 8005be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <prvHeapInit+0xac>)
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <prvHeapInit+0xb0>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <prvHeapInit+0xb0>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c10:	2208      	movs	r2, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0307 	bic.w	r3, r3, #7
 8005c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <prvHeapInit+0xb4>)
 8005c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <prvHeapInit+0xb4>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <prvHeapInit+0xb4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <prvHeapInit+0xb4>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <prvHeapInit+0xb8>)
 8005c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <prvHeapInit+0xbc>)
 8005c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <prvHeapInit+0xc0>)
 8005c5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000508 	.word	0x20000508
 8005c74:	200010c0 	.word	0x200010c0
 8005c78:	200010c8 	.word	0x200010c8
 8005c7c:	200010d0 	.word	0x200010d0
 8005c80:	200010cc 	.word	0x200010cc
 8005c84:	200010dc 	.word	0x200010dc

08005c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c90:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <prvInsertBlockIntoFreeList+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e002      	b.n	8005c9c <prvInsertBlockIntoFreeList+0x14>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d8f7      	bhi.n	8005c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d108      	bne.n	8005cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d118      	bne.n	8005d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d00d      	beq.n	8005d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e008      	b.n	8005d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <prvInsertBlockIntoFreeList+0xb0>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e003      	b.n	8005d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d002      	beq.n	8005d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	200010c0 	.word	0x200010c0
 8005d38:	200010c8 	.word	0x200010c8

08005d3c <__errno>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <__errno+0x8>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000010 	.word	0x20000010

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4d0d      	ldr	r5, [pc, #52]	; (8005d80 <__libc_init_array+0x38>)
 8005d4c:	4c0d      	ldr	r4, [pc, #52]	; (8005d84 <__libc_init_array+0x3c>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	2600      	movs	r6, #0
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	4d0b      	ldr	r5, [pc, #44]	; (8005d88 <__libc_init_array+0x40>)
 8005d5a:	4c0c      	ldr	r4, [pc, #48]	; (8005d8c <__libc_init_array+0x44>)
 8005d5c:	f000 ffbc 	bl	8006cd8 <_init>
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	2600      	movs	r6, #0
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08006eb0 	.word	0x08006eb0
 8005d84:	08006eb0 	.word	0x08006eb0
 8005d88:	08006eb0 	.word	0x08006eb0
 8005d8c:	08006eb4 	.word	0x08006eb4

08005d90 <memcpy>:
 8005d90:	440a      	add	r2, r1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d98:	d100      	bne.n	8005d9c <memcpy+0xc>
 8005d9a:	4770      	bx	lr
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da6:	4291      	cmp	r1, r2
 8005da8:	d1f9      	bne.n	8005d9e <memcpy+0xe>
 8005daa:	bd10      	pop	{r4, pc}

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <iprintf>:
 8005dbc:	b40f      	push	{r0, r1, r2, r3}
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <iprintf+0x2c>)
 8005dc0:	b513      	push	{r0, r1, r4, lr}
 8005dc2:	681c      	ldr	r4, [r3, #0]
 8005dc4:	b124      	cbz	r4, 8005dd0 <iprintf+0x14>
 8005dc6:	69a3      	ldr	r3, [r4, #24]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <iprintf+0x14>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f866 	bl	8005e9c <__sinit>
 8005dd0:	ab05      	add	r3, sp, #20
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	68a1      	ldr	r1, [r4, #8]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 f9bd 	bl	8006158 <_vfiprintf_r>
 8005dde:	b002      	add	sp, #8
 8005de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de4:	b004      	add	sp, #16
 8005de6:	4770      	bx	lr
 8005de8:	20000010 	.word	0x20000010

08005dec <std>:
 8005dec:	2300      	movs	r3, #0
 8005dee:	b510      	push	{r4, lr}
 8005df0:	4604      	mov	r4, r0
 8005df2:	e9c0 3300 	strd	r3, r3, [r0]
 8005df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dfa:	6083      	str	r3, [r0, #8]
 8005dfc:	8181      	strh	r1, [r0, #12]
 8005dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8005e00:	81c2      	strh	r2, [r0, #14]
 8005e02:	6183      	str	r3, [r0, #24]
 8005e04:	4619      	mov	r1, r3
 8005e06:	2208      	movs	r2, #8
 8005e08:	305c      	adds	r0, #92	; 0x5c
 8005e0a:	f7ff ffcf 	bl	8005dac <memset>
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <std+0x38>)
 8005e10:	6263      	str	r3, [r4, #36]	; 0x24
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <std+0x3c>)
 8005e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <std+0x40>)
 8005e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <std+0x44>)
 8005e1c:	6224      	str	r4, [r4, #32]
 8005e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	08006701 	.word	0x08006701
 8005e28:	08006723 	.word	0x08006723
 8005e2c:	0800675b 	.word	0x0800675b
 8005e30:	0800677f 	.word	0x0800677f

08005e34 <_cleanup_r>:
 8005e34:	4901      	ldr	r1, [pc, #4]	; (8005e3c <_cleanup_r+0x8>)
 8005e36:	f000 b8af 	b.w	8005f98 <_fwalk_reent>
 8005e3a:	bf00      	nop
 8005e3c:	08006a59 	.word	0x08006a59

08005e40 <__sfmoreglue>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	2268      	movs	r2, #104	; 0x68
 8005e44:	1e4d      	subs	r5, r1, #1
 8005e46:	4355      	muls	r5, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e4e:	f000 f8e5 	bl	800601c <_malloc_r>
 8005e52:	4604      	mov	r4, r0
 8005e54:	b140      	cbz	r0, 8005e68 <__sfmoreglue+0x28>
 8005e56:	2100      	movs	r1, #0
 8005e58:	e9c0 1600 	strd	r1, r6, [r0]
 8005e5c:	300c      	adds	r0, #12
 8005e5e:	60a0      	str	r0, [r4, #8]
 8005e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e64:	f7ff ffa2 	bl	8005dac <memset>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}

08005e6c <__sfp_lock_acquire>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	; (8005e74 <__sfp_lock_acquire+0x8>)
 8005e6e:	f000 b8b3 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	200010e1 	.word	0x200010e1

08005e78 <__sfp_lock_release>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__sfp_lock_release+0x8>)
 8005e7a:	f000 b8ae 	b.w	8005fda <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	200010e1 	.word	0x200010e1

08005e84 <__sinit_lock_acquire>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__sinit_lock_acquire+0x8>)
 8005e86:	f000 b8a7 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	200010e2 	.word	0x200010e2

08005e90 <__sinit_lock_release>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__sinit_lock_release+0x8>)
 8005e92:	f000 b8a2 	b.w	8005fda <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	200010e2 	.word	0x200010e2

08005e9c <__sinit>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	f7ff fff0 	bl	8005e84 <__sinit_lock_acquire>
 8005ea4:	69a3      	ldr	r3, [r4, #24]
 8005ea6:	b11b      	cbz	r3, 8005eb0 <__sinit+0x14>
 8005ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eac:	f7ff bff0 	b.w	8005e90 <__sinit_lock_release>
 8005eb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <__sinit+0x68>)
 8005eb8:	4a13      	ldr	r2, [pc, #76]	; (8005f08 <__sinit+0x6c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	bf04      	itt	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	61a3      	streq	r3, [r4, #24]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f820 	bl	8005f0c <__sfp>
 8005ecc:	6060      	str	r0, [r4, #4]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f81c 	bl	8005f0c <__sfp>
 8005ed4:	60a0      	str	r0, [r4, #8]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 f818 	bl	8005f0c <__sfp>
 8005edc:	2200      	movs	r2, #0
 8005ede:	60e0      	str	r0, [r4, #12]
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	6860      	ldr	r0, [r4, #4]
 8005ee4:	f7ff ff82 	bl	8005dec <std>
 8005ee8:	68a0      	ldr	r0, [r4, #8]
 8005eea:	2201      	movs	r2, #1
 8005eec:	2109      	movs	r1, #9
 8005eee:	f7ff ff7d 	bl	8005dec <std>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	2112      	movs	r1, #18
 8005ef8:	f7ff ff78 	bl	8005dec <std>
 8005efc:	2301      	movs	r3, #1
 8005efe:	61a3      	str	r3, [r4, #24]
 8005f00:	e7d2      	b.n	8005ea8 <__sinit+0xc>
 8005f02:	bf00      	nop
 8005f04:	08006e10 	.word	0x08006e10
 8005f08:	08005e35 	.word	0x08005e35

08005f0c <__sfp>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	4607      	mov	r7, r0
 8005f10:	f7ff ffac 	bl	8005e6c <__sfp_lock_acquire>
 8005f14:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <__sfp+0x84>)
 8005f16:	681e      	ldr	r6, [r3, #0]
 8005f18:	69b3      	ldr	r3, [r6, #24]
 8005f1a:	b913      	cbnz	r3, 8005f22 <__sfp+0x16>
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff ffbd 	bl	8005e9c <__sinit>
 8005f22:	3648      	adds	r6, #72	; 0x48
 8005f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	d503      	bpl.n	8005f34 <__sfp+0x28>
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	b30b      	cbz	r3, 8005f74 <__sfp+0x68>
 8005f30:	6836      	ldr	r6, [r6, #0]
 8005f32:	e7f7      	b.n	8005f24 <__sfp+0x18>
 8005f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f38:	b9d5      	cbnz	r5, 8005f70 <__sfp+0x64>
 8005f3a:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <__sfp+0x88>)
 8005f3c:	60e3      	str	r3, [r4, #12]
 8005f3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f42:	6665      	str	r5, [r4, #100]	; 0x64
 8005f44:	f000 f847 	bl	8005fd6 <__retarget_lock_init_recursive>
 8005f48:	f7ff ff96 	bl	8005e78 <__sfp_lock_release>
 8005f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f54:	6025      	str	r5, [r4, #0]
 8005f56:	61a5      	str	r5, [r4, #24]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f60:	f7ff ff24 	bl	8005dac <memset>
 8005f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f70:	3468      	adds	r4, #104	; 0x68
 8005f72:	e7d9      	b.n	8005f28 <__sfp+0x1c>
 8005f74:	2104      	movs	r1, #4
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff ff62 	bl	8005e40 <__sfmoreglue>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	6030      	str	r0, [r6, #0]
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1d5      	bne.n	8005f30 <__sfp+0x24>
 8005f84:	f7ff ff78 	bl	8005e78 <__sfp_lock_release>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	e7ee      	b.n	8005f6c <__sfp+0x60>
 8005f8e:	bf00      	nop
 8005f90:	08006e10 	.word	0x08006e10
 8005f94:	ffff0001 	.word	0xffff0001

08005f98 <_fwalk_reent>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	4688      	mov	r8, r1
 8005fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fa4:	2700      	movs	r7, #0
 8005fa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005faa:	f1b9 0901 	subs.w	r9, r9, #1
 8005fae:	d505      	bpl.n	8005fbc <_fwalk_reent+0x24>
 8005fb0:	6824      	ldr	r4, [r4, #0]
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d1f7      	bne.n	8005fa6 <_fwalk_reent+0xe>
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbc:	89ab      	ldrh	r3, [r5, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d907      	bls.n	8005fd2 <_fwalk_reent+0x3a>
 8005fc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	d003      	beq.n	8005fd2 <_fwalk_reent+0x3a>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4630      	mov	r0, r6
 8005fce:	47c0      	blx	r8
 8005fd0:	4307      	orrs	r7, r0
 8005fd2:	3568      	adds	r5, #104	; 0x68
 8005fd4:	e7e9      	b.n	8005faa <_fwalk_reent+0x12>

08005fd6 <__retarget_lock_init_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <__retarget_lock_acquire_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <__retarget_lock_release_recursive>:
 8005fda:	4770      	bx	lr

08005fdc <sbrk_aligned>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4e0e      	ldr	r6, [pc, #56]	; (8006018 <sbrk_aligned+0x3c>)
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	6831      	ldr	r1, [r6, #0]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	b911      	cbnz	r1, 8005fee <sbrk_aligned+0x12>
 8005fe8:	f000 fb7a 	bl	80066e0 <_sbrk_r>
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 fb75 	bl	80066e0 <_sbrk_r>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d00a      	beq.n	8006010 <sbrk_aligned+0x34>
 8005ffa:	1cc4      	adds	r4, r0, #3
 8005ffc:	f024 0403 	bic.w	r4, r4, #3
 8006000:	42a0      	cmp	r0, r4
 8006002:	d007      	beq.n	8006014 <sbrk_aligned+0x38>
 8006004:	1a21      	subs	r1, r4, r0
 8006006:	4628      	mov	r0, r5
 8006008:	f000 fb6a 	bl	80066e0 <_sbrk_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d101      	bne.n	8006014 <sbrk_aligned+0x38>
 8006010:	f04f 34ff 	mov.w	r4, #4294967295
 8006014:	4620      	mov	r0, r4
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	200010e8 	.word	0x200010e8

0800601c <_malloc_r>:
 800601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006020:	1ccd      	adds	r5, r1, #3
 8006022:	f025 0503 	bic.w	r5, r5, #3
 8006026:	3508      	adds	r5, #8
 8006028:	2d0c      	cmp	r5, #12
 800602a:	bf38      	it	cc
 800602c:	250c      	movcc	r5, #12
 800602e:	2d00      	cmp	r5, #0
 8006030:	4607      	mov	r7, r0
 8006032:	db01      	blt.n	8006038 <_malloc_r+0x1c>
 8006034:	42a9      	cmp	r1, r5
 8006036:	d905      	bls.n	8006044 <_malloc_r+0x28>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	2600      	movs	r6, #0
 800603e:	4630      	mov	r0, r6
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006044:	4e2e      	ldr	r6, [pc, #184]	; (8006100 <_malloc_r+0xe4>)
 8006046:	f000 fdbb 	bl	8006bc0 <__malloc_lock>
 800604a:	6833      	ldr	r3, [r6, #0]
 800604c:	461c      	mov	r4, r3
 800604e:	bb34      	cbnz	r4, 800609e <_malloc_r+0x82>
 8006050:	4629      	mov	r1, r5
 8006052:	4638      	mov	r0, r7
 8006054:	f7ff ffc2 	bl	8005fdc <sbrk_aligned>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	4604      	mov	r4, r0
 800605c:	d14d      	bne.n	80060fa <_malloc_r+0xde>
 800605e:	6834      	ldr	r4, [r6, #0]
 8006060:	4626      	mov	r6, r4
 8006062:	2e00      	cmp	r6, #0
 8006064:	d140      	bne.n	80060e8 <_malloc_r+0xcc>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	4631      	mov	r1, r6
 800606a:	4638      	mov	r0, r7
 800606c:	eb04 0803 	add.w	r8, r4, r3
 8006070:	f000 fb36 	bl	80066e0 <_sbrk_r>
 8006074:	4580      	cmp	r8, r0
 8006076:	d13a      	bne.n	80060ee <_malloc_r+0xd2>
 8006078:	6821      	ldr	r1, [r4, #0]
 800607a:	3503      	adds	r5, #3
 800607c:	1a6d      	subs	r5, r5, r1
 800607e:	f025 0503 	bic.w	r5, r5, #3
 8006082:	3508      	adds	r5, #8
 8006084:	2d0c      	cmp	r5, #12
 8006086:	bf38      	it	cc
 8006088:	250c      	movcc	r5, #12
 800608a:	4629      	mov	r1, r5
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ffa5 	bl	8005fdc <sbrk_aligned>
 8006092:	3001      	adds	r0, #1
 8006094:	d02b      	beq.n	80060ee <_malloc_r+0xd2>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	442b      	add	r3, r5
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	e00e      	b.n	80060bc <_malloc_r+0xa0>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	1b52      	subs	r2, r2, r5
 80060a2:	d41e      	bmi.n	80060e2 <_malloc_r+0xc6>
 80060a4:	2a0b      	cmp	r2, #11
 80060a6:	d916      	bls.n	80060d6 <_malloc_r+0xba>
 80060a8:	1961      	adds	r1, r4, r5
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	6025      	str	r5, [r4, #0]
 80060ae:	bf18      	it	ne
 80060b0:	6059      	strne	r1, [r3, #4]
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	bf08      	it	eq
 80060b6:	6031      	streq	r1, [r6, #0]
 80060b8:	5162      	str	r2, [r4, r5]
 80060ba:	604b      	str	r3, [r1, #4]
 80060bc:	4638      	mov	r0, r7
 80060be:	f104 060b 	add.w	r6, r4, #11
 80060c2:	f000 fd83 	bl	8006bcc <__malloc_unlock>
 80060c6:	f026 0607 	bic.w	r6, r6, #7
 80060ca:	1d23      	adds	r3, r4, #4
 80060cc:	1af2      	subs	r2, r6, r3
 80060ce:	d0b6      	beq.n	800603e <_malloc_r+0x22>
 80060d0:	1b9b      	subs	r3, r3, r6
 80060d2:	50a3      	str	r3, [r4, r2]
 80060d4:	e7b3      	b.n	800603e <_malloc_r+0x22>
 80060d6:	6862      	ldr	r2, [r4, #4]
 80060d8:	42a3      	cmp	r3, r4
 80060da:	bf0c      	ite	eq
 80060dc:	6032      	streq	r2, [r6, #0]
 80060de:	605a      	strne	r2, [r3, #4]
 80060e0:	e7ec      	b.n	80060bc <_malloc_r+0xa0>
 80060e2:	4623      	mov	r3, r4
 80060e4:	6864      	ldr	r4, [r4, #4]
 80060e6:	e7b2      	b.n	800604e <_malloc_r+0x32>
 80060e8:	4634      	mov	r4, r6
 80060ea:	6876      	ldr	r6, [r6, #4]
 80060ec:	e7b9      	b.n	8006062 <_malloc_r+0x46>
 80060ee:	230c      	movs	r3, #12
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4638      	mov	r0, r7
 80060f4:	f000 fd6a 	bl	8006bcc <__malloc_unlock>
 80060f8:	e7a1      	b.n	800603e <_malloc_r+0x22>
 80060fa:	6025      	str	r5, [r4, #0]
 80060fc:	e7de      	b.n	80060bc <_malloc_r+0xa0>
 80060fe:	bf00      	nop
 8006100:	200010e4 	.word	0x200010e4

08006104 <__sfputc_r>:
 8006104:	6893      	ldr	r3, [r2, #8]
 8006106:	3b01      	subs	r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	b410      	push	{r4}
 800610c:	6093      	str	r3, [r2, #8]
 800610e:	da08      	bge.n	8006122 <__sfputc_r+0x1e>
 8006110:	6994      	ldr	r4, [r2, #24]
 8006112:	42a3      	cmp	r3, r4
 8006114:	db01      	blt.n	800611a <__sfputc_r+0x16>
 8006116:	290a      	cmp	r1, #10
 8006118:	d103      	bne.n	8006122 <__sfputc_r+0x1e>
 800611a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800611e:	f000 bb33 	b.w	8006788 <__swbuf_r>
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	1c58      	adds	r0, r3, #1
 8006126:	6010      	str	r0, [r2, #0]
 8006128:	7019      	strb	r1, [r3, #0]
 800612a:	4608      	mov	r0, r1
 800612c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006130:	4770      	bx	lr

08006132 <__sfputs_r>:
 8006132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	4614      	mov	r4, r2
 800613a:	18d5      	adds	r5, r2, r3
 800613c:	42ac      	cmp	r4, r5
 800613e:	d101      	bne.n	8006144 <__sfputs_r+0x12>
 8006140:	2000      	movs	r0, #0
 8006142:	e007      	b.n	8006154 <__sfputs_r+0x22>
 8006144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006148:	463a      	mov	r2, r7
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffda 	bl	8006104 <__sfputc_r>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d1f3      	bne.n	800613c <__sfputs_r+0xa>
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006158 <_vfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	460d      	mov	r5, r1
 800615e:	b09d      	sub	sp, #116	; 0x74
 8006160:	4614      	mov	r4, r2
 8006162:	4698      	mov	r8, r3
 8006164:	4606      	mov	r6, r0
 8006166:	b118      	cbz	r0, 8006170 <_vfiprintf_r+0x18>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_vfiprintf_r+0x18>
 800616c:	f7ff fe96 	bl	8005e9c <__sinit>
 8006170:	4b89      	ldr	r3, [pc, #548]	; (8006398 <_vfiprintf_r+0x240>)
 8006172:	429d      	cmp	r5, r3
 8006174:	d11b      	bne.n	80061ae <_vfiprintf_r+0x56>
 8006176:	6875      	ldr	r5, [r6, #4]
 8006178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	d405      	bmi.n	800618a <_vfiprintf_r+0x32>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	059a      	lsls	r2, r3, #22
 8006182:	d402      	bmi.n	800618a <_vfiprintf_r+0x32>
 8006184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006186:	f7ff ff27 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	071b      	lsls	r3, r3, #28
 800618e:	d501      	bpl.n	8006194 <_vfiprintf_r+0x3c>
 8006190:	692b      	ldr	r3, [r5, #16]
 8006192:	b9eb      	cbnz	r3, 80061d0 <_vfiprintf_r+0x78>
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fb5a 	bl	8006850 <__swsetup_r>
 800619c:	b1c0      	cbz	r0, 80061d0 <_vfiprintf_r+0x78>
 800619e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a0:	07dc      	lsls	r4, r3, #31
 80061a2:	d50e      	bpl.n	80061c2 <_vfiprintf_r+0x6a>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	b01d      	add	sp, #116	; 0x74
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	4b7b      	ldr	r3, [pc, #492]	; (800639c <_vfiprintf_r+0x244>)
 80061b0:	429d      	cmp	r5, r3
 80061b2:	d101      	bne.n	80061b8 <_vfiprintf_r+0x60>
 80061b4:	68b5      	ldr	r5, [r6, #8]
 80061b6:	e7df      	b.n	8006178 <_vfiprintf_r+0x20>
 80061b8:	4b79      	ldr	r3, [pc, #484]	; (80063a0 <_vfiprintf_r+0x248>)
 80061ba:	429d      	cmp	r5, r3
 80061bc:	bf08      	it	eq
 80061be:	68f5      	ldreq	r5, [r6, #12]
 80061c0:	e7da      	b.n	8006178 <_vfiprintf_r+0x20>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	0598      	lsls	r0, r3, #22
 80061c6:	d4ed      	bmi.n	80061a4 <_vfiprintf_r+0x4c>
 80061c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ca:	f7ff ff06 	bl	8005fda <__retarget_lock_release_recursive>
 80061ce:	e7e9      	b.n	80061a4 <_vfiprintf_r+0x4c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	2320      	movs	r3, #32
 80061d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061da:	f8cd 800c 	str.w	r8, [sp, #12]
 80061de:	2330      	movs	r3, #48	; 0x30
 80061e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063a4 <_vfiprintf_r+0x24c>
 80061e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061e8:	f04f 0901 	mov.w	r9, #1
 80061ec:	4623      	mov	r3, r4
 80061ee:	469a      	mov	sl, r3
 80061f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f4:	b10a      	cbz	r2, 80061fa <_vfiprintf_r+0xa2>
 80061f6:	2a25      	cmp	r2, #37	; 0x25
 80061f8:	d1f9      	bne.n	80061ee <_vfiprintf_r+0x96>
 80061fa:	ebba 0b04 	subs.w	fp, sl, r4
 80061fe:	d00b      	beq.n	8006218 <_vfiprintf_r+0xc0>
 8006200:	465b      	mov	r3, fp
 8006202:	4622      	mov	r2, r4
 8006204:	4629      	mov	r1, r5
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff ff93 	bl	8006132 <__sfputs_r>
 800620c:	3001      	adds	r0, #1
 800620e:	f000 80aa 	beq.w	8006366 <_vfiprintf_r+0x20e>
 8006212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006214:	445a      	add	r2, fp
 8006216:	9209      	str	r2, [sp, #36]	; 0x24
 8006218:	f89a 3000 	ldrb.w	r3, [sl]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a2 	beq.w	8006366 <_vfiprintf_r+0x20e>
 8006222:	2300      	movs	r3, #0
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800622c:	f10a 0a01 	add.w	sl, sl, #1
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	9307      	str	r3, [sp, #28]
 8006234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006238:	931a      	str	r3, [sp, #104]	; 0x68
 800623a:	4654      	mov	r4, sl
 800623c:	2205      	movs	r2, #5
 800623e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006242:	4858      	ldr	r0, [pc, #352]	; (80063a4 <_vfiprintf_r+0x24c>)
 8006244:	f7f9 ffc4 	bl	80001d0 <memchr>
 8006248:	9a04      	ldr	r2, [sp, #16]
 800624a:	b9d8      	cbnz	r0, 8006284 <_vfiprintf_r+0x12c>
 800624c:	06d1      	lsls	r1, r2, #27
 800624e:	bf44      	itt	mi
 8006250:	2320      	movmi	r3, #32
 8006252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006256:	0713      	lsls	r3, r2, #28
 8006258:	bf44      	itt	mi
 800625a:	232b      	movmi	r3, #43	; 0x2b
 800625c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006260:	f89a 3000 	ldrb.w	r3, [sl]
 8006264:	2b2a      	cmp	r3, #42	; 0x2a
 8006266:	d015      	beq.n	8006294 <_vfiprintf_r+0x13c>
 8006268:	9a07      	ldr	r2, [sp, #28]
 800626a:	4654      	mov	r4, sl
 800626c:	2000      	movs	r0, #0
 800626e:	f04f 0c0a 	mov.w	ip, #10
 8006272:	4621      	mov	r1, r4
 8006274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006278:	3b30      	subs	r3, #48	; 0x30
 800627a:	2b09      	cmp	r3, #9
 800627c:	d94e      	bls.n	800631c <_vfiprintf_r+0x1c4>
 800627e:	b1b0      	cbz	r0, 80062ae <_vfiprintf_r+0x156>
 8006280:	9207      	str	r2, [sp, #28]
 8006282:	e014      	b.n	80062ae <_vfiprintf_r+0x156>
 8006284:	eba0 0308 	sub.w	r3, r0, r8
 8006288:	fa09 f303 	lsl.w	r3, r9, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	9304      	str	r3, [sp, #16]
 8006290:	46a2      	mov	sl, r4
 8006292:	e7d2      	b.n	800623a <_vfiprintf_r+0xe2>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	1d19      	adds	r1, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	9103      	str	r1, [sp, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfbb      	ittet	lt
 80062a0:	425b      	neglt	r3, r3
 80062a2:	f042 0202 	orrlt.w	r2, r2, #2
 80062a6:	9307      	strge	r3, [sp, #28]
 80062a8:	9307      	strlt	r3, [sp, #28]
 80062aa:	bfb8      	it	lt
 80062ac:	9204      	strlt	r2, [sp, #16]
 80062ae:	7823      	ldrb	r3, [r4, #0]
 80062b0:	2b2e      	cmp	r3, #46	; 0x2e
 80062b2:	d10c      	bne.n	80062ce <_vfiprintf_r+0x176>
 80062b4:	7863      	ldrb	r3, [r4, #1]
 80062b6:	2b2a      	cmp	r3, #42	; 0x2a
 80062b8:	d135      	bne.n	8006326 <_vfiprintf_r+0x1ce>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	1d1a      	adds	r2, r3, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	9203      	str	r2, [sp, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfb8      	it	lt
 80062c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80062ca:	3402      	adds	r4, #2
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063b4 <_vfiprintf_r+0x25c>
 80062d2:	7821      	ldrb	r1, [r4, #0]
 80062d4:	2203      	movs	r2, #3
 80062d6:	4650      	mov	r0, sl
 80062d8:	f7f9 ff7a 	bl	80001d0 <memchr>
 80062dc:	b140      	cbz	r0, 80062f0 <_vfiprintf_r+0x198>
 80062de:	2340      	movs	r3, #64	; 0x40
 80062e0:	eba0 000a 	sub.w	r0, r0, sl
 80062e4:	fa03 f000 	lsl.w	r0, r3, r0
 80062e8:	9b04      	ldr	r3, [sp, #16]
 80062ea:	4303      	orrs	r3, r0
 80062ec:	3401      	adds	r4, #1
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	482c      	ldr	r0, [pc, #176]	; (80063a8 <_vfiprintf_r+0x250>)
 80062f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062fa:	2206      	movs	r2, #6
 80062fc:	f7f9 ff68 	bl	80001d0 <memchr>
 8006300:	2800      	cmp	r0, #0
 8006302:	d03f      	beq.n	8006384 <_vfiprintf_r+0x22c>
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <_vfiprintf_r+0x254>)
 8006306:	bb1b      	cbnz	r3, 8006350 <_vfiprintf_r+0x1f8>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	3307      	adds	r3, #7
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	3308      	adds	r3, #8
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006316:	443b      	add	r3, r7
 8006318:	9309      	str	r3, [sp, #36]	; 0x24
 800631a:	e767      	b.n	80061ec <_vfiprintf_r+0x94>
 800631c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006320:	460c      	mov	r4, r1
 8006322:	2001      	movs	r0, #1
 8006324:	e7a5      	b.n	8006272 <_vfiprintf_r+0x11a>
 8006326:	2300      	movs	r3, #0
 8006328:	3401      	adds	r4, #1
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	4619      	mov	r1, r3
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	4620      	mov	r0, r4
 8006334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006338:	3a30      	subs	r2, #48	; 0x30
 800633a:	2a09      	cmp	r2, #9
 800633c:	d903      	bls.n	8006346 <_vfiprintf_r+0x1ee>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0c5      	beq.n	80062ce <_vfiprintf_r+0x176>
 8006342:	9105      	str	r1, [sp, #20]
 8006344:	e7c3      	b.n	80062ce <_vfiprintf_r+0x176>
 8006346:	fb0c 2101 	mla	r1, ip, r1, r2
 800634a:	4604      	mov	r4, r0
 800634c:	2301      	movs	r3, #1
 800634e:	e7f0      	b.n	8006332 <_vfiprintf_r+0x1da>
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	462a      	mov	r2, r5
 8006356:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <_vfiprintf_r+0x258>)
 8006358:	a904      	add	r1, sp, #16
 800635a:	4630      	mov	r0, r6
 800635c:	f3af 8000 	nop.w
 8006360:	4607      	mov	r7, r0
 8006362:	1c78      	adds	r0, r7, #1
 8006364:	d1d6      	bne.n	8006314 <_vfiprintf_r+0x1bc>
 8006366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006368:	07d9      	lsls	r1, r3, #31
 800636a:	d405      	bmi.n	8006378 <_vfiprintf_r+0x220>
 800636c:	89ab      	ldrh	r3, [r5, #12]
 800636e:	059a      	lsls	r2, r3, #22
 8006370:	d402      	bmi.n	8006378 <_vfiprintf_r+0x220>
 8006372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006374:	f7ff fe31 	bl	8005fda <__retarget_lock_release_recursive>
 8006378:	89ab      	ldrh	r3, [r5, #12]
 800637a:	065b      	lsls	r3, r3, #25
 800637c:	f53f af12 	bmi.w	80061a4 <_vfiprintf_r+0x4c>
 8006380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006382:	e711      	b.n	80061a8 <_vfiprintf_r+0x50>
 8006384:	ab03      	add	r3, sp, #12
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	462a      	mov	r2, r5
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <_vfiprintf_r+0x258>)
 800638c:	a904      	add	r1, sp, #16
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f880 	bl	8006494 <_printf_i>
 8006394:	e7e4      	b.n	8006360 <_vfiprintf_r+0x208>
 8006396:	bf00      	nop
 8006398:	08006e34 	.word	0x08006e34
 800639c:	08006e54 	.word	0x08006e54
 80063a0:	08006e14 	.word	0x08006e14
 80063a4:	08006e74 	.word	0x08006e74
 80063a8:	08006e7e 	.word	0x08006e7e
 80063ac:	00000000 	.word	0x00000000
 80063b0:	08006133 	.word	0x08006133
 80063b4:	08006e7a 	.word	0x08006e7a

080063b8 <_printf_common>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	4616      	mov	r6, r2
 80063be:	4699      	mov	r9, r3
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bfb8      	it	lt
 80063cc:	4613      	movlt	r3, r2
 80063ce:	6033      	str	r3, [r6, #0]
 80063d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d4:	4607      	mov	r7, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b10a      	cbz	r2, 80063de <_printf_common+0x26>
 80063da:	3301      	adds	r3, #1
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	6833      	ldrmi	r3, [r6, #0]
 80063e6:	3302      	addmi	r3, #2
 80063e8:	6033      	strmi	r3, [r6, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	f015 0506 	ands.w	r5, r5, #6
 80063f0:	d106      	bne.n	8006400 <_printf_common+0x48>
 80063f2:	f104 0a19 	add.w	sl, r4, #25
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	6832      	ldr	r2, [r6, #0]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc26      	bgt.n	800644e <_printf_common+0x96>
 8006400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006404:	1e13      	subs	r3, r2, #0
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	bf18      	it	ne
 800640a:	2301      	movne	r3, #1
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d42b      	bmi.n	8006468 <_printf_common+0xb0>
 8006410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006414:	4649      	mov	r1, r9
 8006416:	4638      	mov	r0, r7
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d01e      	beq.n	800645c <_printf_common+0xa4>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	68e5      	ldr	r5, [r4, #12]
 8006422:	6832      	ldr	r2, [r6, #0]
 8006424:	f003 0306 	and.w	r3, r3, #6
 8006428:	2b04      	cmp	r3, #4
 800642a:	bf08      	it	eq
 800642c:	1aad      	subeq	r5, r5, r2
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	6922      	ldr	r2, [r4, #16]
 8006432:	bf0c      	ite	eq
 8006434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006438:	2500      	movne	r5, #0
 800643a:	4293      	cmp	r3, r2
 800643c:	bfc4      	itt	gt
 800643e:	1a9b      	subgt	r3, r3, r2
 8006440:	18ed      	addgt	r5, r5, r3
 8006442:	2600      	movs	r6, #0
 8006444:	341a      	adds	r4, #26
 8006446:	42b5      	cmp	r5, r6
 8006448:	d11a      	bne.n	8006480 <_printf_common+0xc8>
 800644a:	2000      	movs	r0, #0
 800644c:	e008      	b.n	8006460 <_printf_common+0xa8>
 800644e:	2301      	movs	r3, #1
 8006450:	4652      	mov	r2, sl
 8006452:	4649      	mov	r1, r9
 8006454:	4638      	mov	r0, r7
 8006456:	47c0      	blx	r8
 8006458:	3001      	adds	r0, #1
 800645a:	d103      	bne.n	8006464 <_printf_common+0xac>
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	3501      	adds	r5, #1
 8006466:	e7c6      	b.n	80063f6 <_printf_common+0x3e>
 8006468:	18e1      	adds	r1, r4, r3
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	2030      	movs	r0, #48	; 0x30
 800646e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006472:	4422      	add	r2, r4
 8006474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800647c:	3302      	adds	r3, #2
 800647e:	e7c7      	b.n	8006410 <_printf_common+0x58>
 8006480:	2301      	movs	r3, #1
 8006482:	4622      	mov	r2, r4
 8006484:	4649      	mov	r1, r9
 8006486:	4638      	mov	r0, r7
 8006488:	47c0      	blx	r8
 800648a:	3001      	adds	r0, #1
 800648c:	d0e6      	beq.n	800645c <_printf_common+0xa4>
 800648e:	3601      	adds	r6, #1
 8006490:	e7d9      	b.n	8006446 <_printf_common+0x8e>
	...

08006494 <_printf_i>:
 8006494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	7e0f      	ldrb	r7, [r1, #24]
 800649a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800649c:	2f78      	cmp	r7, #120	; 0x78
 800649e:	4691      	mov	r9, r2
 80064a0:	4680      	mov	r8, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	469a      	mov	sl, r3
 80064a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064aa:	d807      	bhi.n	80064bc <_printf_i+0x28>
 80064ac:	2f62      	cmp	r7, #98	; 0x62
 80064ae:	d80a      	bhi.n	80064c6 <_printf_i+0x32>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f000 80d8 	beq.w	8006666 <_printf_i+0x1d2>
 80064b6:	2f58      	cmp	r7, #88	; 0x58
 80064b8:	f000 80a3 	beq.w	8006602 <_printf_i+0x16e>
 80064bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c4:	e03a      	b.n	800653c <_printf_i+0xa8>
 80064c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ca:	2b15      	cmp	r3, #21
 80064cc:	d8f6      	bhi.n	80064bc <_printf_i+0x28>
 80064ce:	a101      	add	r1, pc, #4	; (adr r1, 80064d4 <_printf_i+0x40>)
 80064d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d4:	0800652d 	.word	0x0800652d
 80064d8:	08006541 	.word	0x08006541
 80064dc:	080064bd 	.word	0x080064bd
 80064e0:	080064bd 	.word	0x080064bd
 80064e4:	080064bd 	.word	0x080064bd
 80064e8:	080064bd 	.word	0x080064bd
 80064ec:	08006541 	.word	0x08006541
 80064f0:	080064bd 	.word	0x080064bd
 80064f4:	080064bd 	.word	0x080064bd
 80064f8:	080064bd 	.word	0x080064bd
 80064fc:	080064bd 	.word	0x080064bd
 8006500:	0800664d 	.word	0x0800664d
 8006504:	08006571 	.word	0x08006571
 8006508:	0800662f 	.word	0x0800662f
 800650c:	080064bd 	.word	0x080064bd
 8006510:	080064bd 	.word	0x080064bd
 8006514:	0800666f 	.word	0x0800666f
 8006518:	080064bd 	.word	0x080064bd
 800651c:	08006571 	.word	0x08006571
 8006520:	080064bd 	.word	0x080064bd
 8006524:	080064bd 	.word	0x080064bd
 8006528:	08006637 	.word	0x08006637
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	602a      	str	r2, [r5, #0]
 8006534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800653c:	2301      	movs	r3, #1
 800653e:	e0a3      	b.n	8006688 <_printf_i+0x1f4>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	6829      	ldr	r1, [r5, #0]
 8006544:	0606      	lsls	r6, r0, #24
 8006546:	f101 0304 	add.w	r3, r1, #4
 800654a:	d50a      	bpl.n	8006562 <_printf_i+0xce>
 800654c:	680e      	ldr	r6, [r1, #0]
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	2e00      	cmp	r6, #0
 8006552:	da03      	bge.n	800655c <_printf_i+0xc8>
 8006554:	232d      	movs	r3, #45	; 0x2d
 8006556:	4276      	negs	r6, r6
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	485e      	ldr	r0, [pc, #376]	; (80066d8 <_printf_i+0x244>)
 800655e:	230a      	movs	r3, #10
 8006560:	e019      	b.n	8006596 <_printf_i+0x102>
 8006562:	680e      	ldr	r6, [r1, #0]
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800656a:	bf18      	it	ne
 800656c:	b236      	sxthne	r6, r6
 800656e:	e7ef      	b.n	8006550 <_printf_i+0xbc>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1d19      	adds	r1, r3, #4
 8006576:	6029      	str	r1, [r5, #0]
 8006578:	0601      	lsls	r1, r0, #24
 800657a:	d501      	bpl.n	8006580 <_printf_i+0xec>
 800657c:	681e      	ldr	r6, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0xf2>
 8006580:	0646      	lsls	r6, r0, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0xe8>
 8006584:	881e      	ldrh	r6, [r3, #0]
 8006586:	4854      	ldr	r0, [pc, #336]	; (80066d8 <_printf_i+0x244>)
 8006588:	2f6f      	cmp	r7, #111	; 0x6f
 800658a:	bf0c      	ite	eq
 800658c:	2308      	moveq	r3, #8
 800658e:	230a      	movne	r3, #10
 8006590:	2100      	movs	r1, #0
 8006592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006596:	6865      	ldr	r5, [r4, #4]
 8006598:	60a5      	str	r5, [r4, #8]
 800659a:	2d00      	cmp	r5, #0
 800659c:	bfa2      	ittt	ge
 800659e:	6821      	ldrge	r1, [r4, #0]
 80065a0:	f021 0104 	bicge.w	r1, r1, #4
 80065a4:	6021      	strge	r1, [r4, #0]
 80065a6:	b90e      	cbnz	r6, 80065ac <_printf_i+0x118>
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	d04d      	beq.n	8006648 <_printf_i+0x1b4>
 80065ac:	4615      	mov	r5, r2
 80065ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80065b2:	fb03 6711 	mls	r7, r3, r1, r6
 80065b6:	5dc7      	ldrb	r7, [r0, r7]
 80065b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065bc:	4637      	mov	r7, r6
 80065be:	42bb      	cmp	r3, r7
 80065c0:	460e      	mov	r6, r1
 80065c2:	d9f4      	bls.n	80065ae <_printf_i+0x11a>
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d10b      	bne.n	80065e0 <_printf_i+0x14c>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07de      	lsls	r6, r3, #31
 80065cc:	d508      	bpl.n	80065e0 <_printf_i+0x14c>
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6861      	ldr	r1, [r4, #4]
 80065d2:	4299      	cmp	r1, r3
 80065d4:	bfde      	ittt	le
 80065d6:	2330      	movle	r3, #48	; 0x30
 80065d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065e0:	1b52      	subs	r2, r2, r5
 80065e2:	6122      	str	r2, [r4, #16]
 80065e4:	f8cd a000 	str.w	sl, [sp]
 80065e8:	464b      	mov	r3, r9
 80065ea:	aa03      	add	r2, sp, #12
 80065ec:	4621      	mov	r1, r4
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7ff fee2 	bl	80063b8 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d14c      	bne.n	8006692 <_printf_i+0x1fe>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b004      	add	sp, #16
 80065fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006602:	4835      	ldr	r0, [pc, #212]	; (80066d8 <_printf_i+0x244>)
 8006604:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006608:	6829      	ldr	r1, [r5, #0]
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006610:	6029      	str	r1, [r5, #0]
 8006612:	061d      	lsls	r5, r3, #24
 8006614:	d514      	bpl.n	8006640 <_printf_i+0x1ac>
 8006616:	07df      	lsls	r7, r3, #31
 8006618:	bf44      	itt	mi
 800661a:	f043 0320 	orrmi.w	r3, r3, #32
 800661e:	6023      	strmi	r3, [r4, #0]
 8006620:	b91e      	cbnz	r6, 800662a <_printf_i+0x196>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	f023 0320 	bic.w	r3, r3, #32
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	2310      	movs	r3, #16
 800662c:	e7b0      	b.n	8006590 <_printf_i+0xfc>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f043 0320 	orr.w	r3, r3, #32
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	2378      	movs	r3, #120	; 0x78
 8006638:	4828      	ldr	r0, [pc, #160]	; (80066dc <_printf_i+0x248>)
 800663a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800663e:	e7e3      	b.n	8006608 <_printf_i+0x174>
 8006640:	0659      	lsls	r1, r3, #25
 8006642:	bf48      	it	mi
 8006644:	b2b6      	uxthmi	r6, r6
 8006646:	e7e6      	b.n	8006616 <_printf_i+0x182>
 8006648:	4615      	mov	r5, r2
 800664a:	e7bb      	b.n	80065c4 <_printf_i+0x130>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	6826      	ldr	r6, [r4, #0]
 8006650:	6961      	ldr	r1, [r4, #20]
 8006652:	1d18      	adds	r0, r3, #4
 8006654:	6028      	str	r0, [r5, #0]
 8006656:	0635      	lsls	r5, r6, #24
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	d501      	bpl.n	8006660 <_printf_i+0x1cc>
 800665c:	6019      	str	r1, [r3, #0]
 800665e:	e002      	b.n	8006666 <_printf_i+0x1d2>
 8006660:	0670      	lsls	r0, r6, #25
 8006662:	d5fb      	bpl.n	800665c <_printf_i+0x1c8>
 8006664:	8019      	strh	r1, [r3, #0]
 8006666:	2300      	movs	r3, #0
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	4615      	mov	r5, r2
 800666c:	e7ba      	b.n	80065e4 <_printf_i+0x150>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	1d1a      	adds	r2, r3, #4
 8006672:	602a      	str	r2, [r5, #0]
 8006674:	681d      	ldr	r5, [r3, #0]
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	2100      	movs	r1, #0
 800667a:	4628      	mov	r0, r5
 800667c:	f7f9 fda8 	bl	80001d0 <memchr>
 8006680:	b108      	cbz	r0, 8006686 <_printf_i+0x1f2>
 8006682:	1b40      	subs	r0, r0, r5
 8006684:	6060      	str	r0, [r4, #4]
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	6123      	str	r3, [r4, #16]
 800668a:	2300      	movs	r3, #0
 800668c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006690:	e7a8      	b.n	80065e4 <_printf_i+0x150>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	462a      	mov	r2, r5
 8006696:	4649      	mov	r1, r9
 8006698:	4640      	mov	r0, r8
 800669a:	47d0      	blx	sl
 800669c:	3001      	adds	r0, #1
 800669e:	d0ab      	beq.n	80065f8 <_printf_i+0x164>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	079b      	lsls	r3, r3, #30
 80066a4:	d413      	bmi.n	80066ce <_printf_i+0x23a>
 80066a6:	68e0      	ldr	r0, [r4, #12]
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	4298      	cmp	r0, r3
 80066ac:	bfb8      	it	lt
 80066ae:	4618      	movlt	r0, r3
 80066b0:	e7a4      	b.n	80065fc <_printf_i+0x168>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4632      	mov	r2, r6
 80066b6:	4649      	mov	r1, r9
 80066b8:	4640      	mov	r0, r8
 80066ba:	47d0      	blx	sl
 80066bc:	3001      	adds	r0, #1
 80066be:	d09b      	beq.n	80065f8 <_printf_i+0x164>
 80066c0:	3501      	adds	r5, #1
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	9903      	ldr	r1, [sp, #12]
 80066c6:	1a5b      	subs	r3, r3, r1
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dcf2      	bgt.n	80066b2 <_printf_i+0x21e>
 80066cc:	e7eb      	b.n	80066a6 <_printf_i+0x212>
 80066ce:	2500      	movs	r5, #0
 80066d0:	f104 0619 	add.w	r6, r4, #25
 80066d4:	e7f5      	b.n	80066c2 <_printf_i+0x22e>
 80066d6:	bf00      	nop
 80066d8:	08006e85 	.word	0x08006e85
 80066dc:	08006e96 	.word	0x08006e96

080066e0 <_sbrk_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4d06      	ldr	r5, [pc, #24]	; (80066fc <_sbrk_r+0x1c>)
 80066e4:	2300      	movs	r3, #0
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fa faf0 	bl	8000cd0 <_sbrk>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_sbrk_r+0x1a>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_sbrk_r+0x1a>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	200010ec 	.word	0x200010ec

08006700 <__sread>:
 8006700:	b510      	push	{r4, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 fab2 	bl	8006c70 <_read_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfab      	itete	ge
 8006710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006712:	89a3      	ldrhlt	r3, [r4, #12]
 8006714:	181b      	addge	r3, r3, r0
 8006716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800671a:	bfac      	ite	ge
 800671c:	6563      	strge	r3, [r4, #84]	; 0x54
 800671e:	81a3      	strhlt	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__swrite>:
 8006722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	461f      	mov	r7, r3
 8006728:	898b      	ldrh	r3, [r1, #12]
 800672a:	05db      	lsls	r3, r3, #23
 800672c:	4605      	mov	r5, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4616      	mov	r6, r2
 8006732:	d505      	bpl.n	8006740 <__swrite+0x1e>
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	2302      	movs	r3, #2
 800673a:	2200      	movs	r2, #0
 800673c:	f000 f9c8 	bl	8006ad0 <_lseek_r>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f000 b869 	b.w	800682c <_write_r>

0800675a <__sseek>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 f9b5 	bl	8006ad0 <_lseek_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	bf15      	itete	ne
 800676c:	6560      	strne	r0, [r4, #84]	; 0x54
 800676e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006776:	81a3      	strheq	r3, [r4, #12]
 8006778:	bf18      	it	ne
 800677a:	81a3      	strhne	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}

0800677e <__sclose>:
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 b8d3 	b.w	800692c <_close_r>
	...

08006788 <__swbuf_r>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	460e      	mov	r6, r1
 800678c:	4614      	mov	r4, r2
 800678e:	4605      	mov	r5, r0
 8006790:	b118      	cbz	r0, 800679a <__swbuf_r+0x12>
 8006792:	6983      	ldr	r3, [r0, #24]
 8006794:	b90b      	cbnz	r3, 800679a <__swbuf_r+0x12>
 8006796:	f7ff fb81 	bl	8005e9c <__sinit>
 800679a:	4b21      	ldr	r3, [pc, #132]	; (8006820 <__swbuf_r+0x98>)
 800679c:	429c      	cmp	r4, r3
 800679e:	d12b      	bne.n	80067f8 <__swbuf_r+0x70>
 80067a0:	686c      	ldr	r4, [r5, #4]
 80067a2:	69a3      	ldr	r3, [r4, #24]
 80067a4:	60a3      	str	r3, [r4, #8]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	071a      	lsls	r2, r3, #28
 80067aa:	d52f      	bpl.n	800680c <__swbuf_r+0x84>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	b36b      	cbz	r3, 800680c <__swbuf_r+0x84>
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	1ac0      	subs	r0, r0, r3
 80067b6:	6963      	ldr	r3, [r4, #20]
 80067b8:	b2f6      	uxtb	r6, r6
 80067ba:	4283      	cmp	r3, r0
 80067bc:	4637      	mov	r7, r6
 80067be:	dc04      	bgt.n	80067ca <__swbuf_r+0x42>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f948 	bl	8006a58 <_fflush_r>
 80067c8:	bb30      	cbnz	r0, 8006818 <__swbuf_r+0x90>
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	60a3      	str	r3, [r4, #8]
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	701e      	strb	r6, [r3, #0]
 80067d8:	6963      	ldr	r3, [r4, #20]
 80067da:	3001      	adds	r0, #1
 80067dc:	4283      	cmp	r3, r0
 80067de:	d004      	beq.n	80067ea <__swbuf_r+0x62>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	07db      	lsls	r3, r3, #31
 80067e4:	d506      	bpl.n	80067f4 <__swbuf_r+0x6c>
 80067e6:	2e0a      	cmp	r6, #10
 80067e8:	d104      	bne.n	80067f4 <__swbuf_r+0x6c>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f933 	bl	8006a58 <_fflush_r>
 80067f2:	b988      	cbnz	r0, 8006818 <__swbuf_r+0x90>
 80067f4:	4638      	mov	r0, r7
 80067f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <__swbuf_r+0x9c>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d101      	bne.n	8006802 <__swbuf_r+0x7a>
 80067fe:	68ac      	ldr	r4, [r5, #8]
 8006800:	e7cf      	b.n	80067a2 <__swbuf_r+0x1a>
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <__swbuf_r+0xa0>)
 8006804:	429c      	cmp	r4, r3
 8006806:	bf08      	it	eq
 8006808:	68ec      	ldreq	r4, [r5, #12]
 800680a:	e7ca      	b.n	80067a2 <__swbuf_r+0x1a>
 800680c:	4621      	mov	r1, r4
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f81e 	bl	8006850 <__swsetup_r>
 8006814:	2800      	cmp	r0, #0
 8006816:	d0cb      	beq.n	80067b0 <__swbuf_r+0x28>
 8006818:	f04f 37ff 	mov.w	r7, #4294967295
 800681c:	e7ea      	b.n	80067f4 <__swbuf_r+0x6c>
 800681e:	bf00      	nop
 8006820:	08006e34 	.word	0x08006e34
 8006824:	08006e54 	.word	0x08006e54
 8006828:	08006e14 	.word	0x08006e14

0800682c <_write_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d07      	ldr	r5, [pc, #28]	; (800684c <_write_r+0x20>)
 8006830:	4604      	mov	r4, r0
 8006832:	4608      	mov	r0, r1
 8006834:	4611      	mov	r1, r2
 8006836:	2200      	movs	r2, #0
 8006838:	602a      	str	r2, [r5, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	f7f9 fedb 	bl	80005f6 <_write>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_write_r+0x1e>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_write_r+0x1e>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	200010ec 	.word	0x200010ec

08006850 <__swsetup_r>:
 8006850:	4b32      	ldr	r3, [pc, #200]	; (800691c <__swsetup_r+0xcc>)
 8006852:	b570      	push	{r4, r5, r6, lr}
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	4606      	mov	r6, r0
 8006858:	460c      	mov	r4, r1
 800685a:	b125      	cbz	r5, 8006866 <__swsetup_r+0x16>
 800685c:	69ab      	ldr	r3, [r5, #24]
 800685e:	b913      	cbnz	r3, 8006866 <__swsetup_r+0x16>
 8006860:	4628      	mov	r0, r5
 8006862:	f7ff fb1b 	bl	8005e9c <__sinit>
 8006866:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <__swsetup_r+0xd0>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d10f      	bne.n	800688c <__swsetup_r+0x3c>
 800686c:	686c      	ldr	r4, [r5, #4]
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006874:	0719      	lsls	r1, r3, #28
 8006876:	d42c      	bmi.n	80068d2 <__swsetup_r+0x82>
 8006878:	06dd      	lsls	r5, r3, #27
 800687a:	d411      	bmi.n	80068a0 <__swsetup_r+0x50>
 800687c:	2309      	movs	r3, #9
 800687e:	6033      	str	r3, [r6, #0]
 8006880:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	f04f 30ff 	mov.w	r0, #4294967295
 800688a:	e03e      	b.n	800690a <__swsetup_r+0xba>
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <__swsetup_r+0xd4>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d101      	bne.n	8006896 <__swsetup_r+0x46>
 8006892:	68ac      	ldr	r4, [r5, #8]
 8006894:	e7eb      	b.n	800686e <__swsetup_r+0x1e>
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <__swsetup_r+0xd8>)
 8006898:	429c      	cmp	r4, r3
 800689a:	bf08      	it	eq
 800689c:	68ec      	ldreq	r4, [r5, #12]
 800689e:	e7e6      	b.n	800686e <__swsetup_r+0x1e>
 80068a0:	0758      	lsls	r0, r3, #29
 80068a2:	d512      	bpl.n	80068ca <__swsetup_r+0x7a>
 80068a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a6:	b141      	cbz	r1, 80068ba <__swsetup_r+0x6a>
 80068a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d002      	beq.n	80068b6 <__swsetup_r+0x66>
 80068b0:	4630      	mov	r0, r6
 80068b2:	f000 f991 	bl	8006bd8 <_free_r>
 80068b6:	2300      	movs	r3, #0
 80068b8:	6363      	str	r3, [r4, #52]	; 0x34
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068c0:	81a3      	strh	r3, [r4, #12]
 80068c2:	2300      	movs	r3, #0
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f043 0308 	orr.w	r3, r3, #8
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	b94b      	cbnz	r3, 80068ea <__swsetup_r+0x9a>
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e0:	d003      	beq.n	80068ea <__swsetup_r+0x9a>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 f92b 	bl	8006b40 <__smakebuf_r>
 80068ea:	89a0      	ldrh	r0, [r4, #12]
 80068ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f0:	f010 0301 	ands.w	r3, r0, #1
 80068f4:	d00a      	beq.n	800690c <__swsetup_r+0xbc>
 80068f6:	2300      	movs	r3, #0
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	6963      	ldr	r3, [r4, #20]
 80068fc:	425b      	negs	r3, r3
 80068fe:	61a3      	str	r3, [r4, #24]
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b943      	cbnz	r3, 8006916 <__swsetup_r+0xc6>
 8006904:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006908:	d1ba      	bne.n	8006880 <__swsetup_r+0x30>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	0781      	lsls	r1, r0, #30
 800690e:	bf58      	it	pl
 8006910:	6963      	ldrpl	r3, [r4, #20]
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	e7f4      	b.n	8006900 <__swsetup_r+0xb0>
 8006916:	2000      	movs	r0, #0
 8006918:	e7f7      	b.n	800690a <__swsetup_r+0xba>
 800691a:	bf00      	nop
 800691c:	20000010 	.word	0x20000010
 8006920:	08006e34 	.word	0x08006e34
 8006924:	08006e54 	.word	0x08006e54
 8006928:	08006e14 	.word	0x08006e14

0800692c <_close_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	; (8006948 <_close_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa f995 	bl	8000c66 <_close>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_close_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_close_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	200010ec 	.word	0x200010ec

0800694c <__sflush_r>:
 800694c:	898a      	ldrh	r2, [r1, #12]
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	0710      	lsls	r0, r2, #28
 8006956:	460c      	mov	r4, r1
 8006958:	d458      	bmi.n	8006a0c <__sflush_r+0xc0>
 800695a:	684b      	ldr	r3, [r1, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc05      	bgt.n	800696c <__sflush_r+0x20>
 8006960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	dc02      	bgt.n	800696c <__sflush_r+0x20>
 8006966:	2000      	movs	r0, #0
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696e:	2e00      	cmp	r6, #0
 8006970:	d0f9      	beq.n	8006966 <__sflush_r+0x1a>
 8006972:	2300      	movs	r3, #0
 8006974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006978:	682f      	ldr	r7, [r5, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	d032      	beq.n	80069e4 <__sflush_r+0x98>
 800697e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	075a      	lsls	r2, r3, #29
 8006984:	d505      	bpl.n	8006992 <__sflush_r+0x46>
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	1ac0      	subs	r0, r0, r3
 800698a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698c:	b10b      	cbz	r3, 8006992 <__sflush_r+0x46>
 800698e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	2300      	movs	r3, #0
 8006994:	4602      	mov	r2, r0
 8006996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x66>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	291d      	cmp	r1, #29
 80069a8:	d82c      	bhi.n	8006a04 <__sflush_r+0xb8>
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <__sflush_r+0x108>)
 80069ac:	40ca      	lsrs	r2, r1
 80069ae:	07d6      	lsls	r6, r2, #31
 80069b0:	d528      	bpl.n	8006a04 <__sflush_r+0xb8>
 80069b2:	2200      	movs	r2, #0
 80069b4:	6062      	str	r2, [r4, #4]
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	d504      	bpl.n	80069c8 <__sflush_r+0x7c>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0x7a>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b903      	cbnz	r3, 80069c8 <__sflush_r+0x7c>
 80069c6:	6560      	str	r0, [r4, #84]	; 0x54
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d0ca      	beq.n	8006966 <__sflush_r+0x1a>
 80069d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <__sflush_r+0x92>
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f8fd 	bl	8006bd8 <_free_r>
 80069de:	2000      	movs	r0, #0
 80069e0:	6360      	str	r0, [r4, #52]	; 0x34
 80069e2:	e7c1      	b.n	8006968 <__sflush_r+0x1c>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	2301      	movs	r3, #1
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	1c41      	adds	r1, r0, #1
 80069ee:	d1c7      	bne.n	8006980 <__sflush_r+0x34>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0c4      	beq.n	8006980 <__sflush_r+0x34>
 80069f6:	2b1d      	cmp	r3, #29
 80069f8:	d001      	beq.n	80069fe <__sflush_r+0xb2>
 80069fa:	2b16      	cmp	r3, #22
 80069fc:	d101      	bne.n	8006a02 <__sflush_r+0xb6>
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	e7b1      	b.n	8006966 <__sflush_r+0x1a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	e7ad      	b.n	8006968 <__sflush_r+0x1c>
 8006a0c:	690f      	ldr	r7, [r1, #16]
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d0a9      	beq.n	8006966 <__sflush_r+0x1a>
 8006a12:	0793      	lsls	r3, r2, #30
 8006a14:	680e      	ldr	r6, [r1, #0]
 8006a16:	bf08      	it	eq
 8006a18:	694b      	ldreq	r3, [r1, #20]
 8006a1a:	600f      	str	r7, [r1, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	2300      	movne	r3, #0
 8006a20:	eba6 0807 	sub.w	r8, r6, r7
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	f1b8 0f00 	cmp.w	r8, #0
 8006a2a:	dd9c      	ble.n	8006966 <__sflush_r+0x1a>
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a30:	4643      	mov	r3, r8
 8006a32:	463a      	mov	r2, r7
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dc06      	bgt.n	8006a4a <__sflush_r+0xfe>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e78e      	b.n	8006968 <__sflush_r+0x1c>
 8006a4a:	4407      	add	r7, r0
 8006a4c:	eba8 0800 	sub.w	r8, r8, r0
 8006a50:	e7e9      	b.n	8006a26 <__sflush_r+0xda>
 8006a52:	bf00      	nop
 8006a54:	20400001 	.word	0x20400001

08006a58 <_fflush_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b913      	cbnz	r3, 8006a68 <_fflush_r+0x10>
 8006a62:	2500      	movs	r5, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	b118      	cbz	r0, 8006a72 <_fflush_r+0x1a>
 8006a6a:	6983      	ldr	r3, [r0, #24]
 8006a6c:	b90b      	cbnz	r3, 8006a72 <_fflush_r+0x1a>
 8006a6e:	f7ff fa15 	bl	8005e9c <__sinit>
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <_fflush_r+0x6c>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d11b      	bne.n	8006ab0 <_fflush_r+0x58>
 8006a78:	686c      	ldr	r4, [r5, #4]
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ef      	beq.n	8006a62 <_fflush_r+0xa>
 8006a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d404      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a88:	0599      	lsls	r1, r3, #22
 8006a8a:	d402      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8e:	f7ff faa3 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8006a92:	4628      	mov	r0, r5
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff ff59 	bl	800694c <__sflush_r>
 8006a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a9c:	07da      	lsls	r2, r3, #31
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d4e0      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	d4dd      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aaa:	f7ff fa96 	bl	8005fda <__retarget_lock_release_recursive>
 8006aae:	e7d9      	b.n	8006a64 <_fflush_r+0xc>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <_fflush_r+0x70>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <_fflush_r+0x62>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7df      	b.n	8006a7a <_fflush_r+0x22>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <_fflush_r+0x74>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7da      	b.n	8006a7a <_fflush_r+0x22>
 8006ac4:	08006e34 	.word	0x08006e34
 8006ac8:	08006e54 	.word	0x08006e54
 8006acc:	08006e14 	.word	0x08006e14

08006ad0 <_lseek_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d07      	ldr	r5, [pc, #28]	; (8006af0 <_lseek_r+0x20>)
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	4608      	mov	r0, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	2200      	movs	r2, #0
 8006adc:	602a      	str	r2, [r5, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7fa f8e8 	bl	8000cb4 <_lseek>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_lseek_r+0x1e>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_lseek_r+0x1e>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	200010ec 	.word	0x200010ec

08006af4 <__swhatbuf_r>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	460e      	mov	r6, r1
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2900      	cmp	r1, #0
 8006afe:	b096      	sub	sp, #88	; 0x58
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	da08      	bge.n	8006b18 <__swhatbuf_r+0x24>
 8006b06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	602a      	str	r2, [r5, #0]
 8006b0e:	061a      	lsls	r2, r3, #24
 8006b10:	d410      	bmi.n	8006b34 <__swhatbuf_r+0x40>
 8006b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b16:	e00e      	b.n	8006b36 <__swhatbuf_r+0x42>
 8006b18:	466a      	mov	r2, sp
 8006b1a:	f000 f8bb 	bl	8006c94 <_fstat_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	dbf1      	blt.n	8006b06 <__swhatbuf_r+0x12>
 8006b22:	9a01      	ldr	r2, [sp, #4]
 8006b24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b2c:	425a      	negs	r2, r3
 8006b2e:	415a      	adcs	r2, r3
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	e7ee      	b.n	8006b12 <__swhatbuf_r+0x1e>
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	2000      	movs	r0, #0
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	b016      	add	sp, #88	; 0x58
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b40 <__smakebuf_r>:
 8006b40:	898b      	ldrh	r3, [r1, #12]
 8006b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b44:	079d      	lsls	r5, r3, #30
 8006b46:	4606      	mov	r6, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	d507      	bpl.n	8006b5c <__smakebuf_r+0x1c>
 8006b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	2301      	movs	r3, #1
 8006b56:	6163      	str	r3, [r4, #20]
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	ab01      	add	r3, sp, #4
 8006b5e:	466a      	mov	r2, sp
 8006b60:	f7ff ffc8 	bl	8006af4 <__swhatbuf_r>
 8006b64:	9900      	ldr	r1, [sp, #0]
 8006b66:	4605      	mov	r5, r0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff fa57 	bl	800601c <_malloc_r>
 8006b6e:	b948      	cbnz	r0, 8006b84 <__smakebuf_r+0x44>
 8006b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b74:	059a      	lsls	r2, r3, #22
 8006b76:	d4ef      	bmi.n	8006b58 <__smakebuf_r+0x18>
 8006b78:	f023 0303 	bic.w	r3, r3, #3
 8006b7c:	f043 0302 	orr.w	r3, r3, #2
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	e7e3      	b.n	8006b4c <__smakebuf_r+0xc>
 8006b84:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <__smakebuf_r+0x7c>)
 8006b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	6020      	str	r0, [r4, #0]
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	81a3      	strh	r3, [r4, #12]
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	6163      	str	r3, [r4, #20]
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	6120      	str	r0, [r4, #16]
 8006b9a:	b15b      	cbz	r3, 8006bb4 <__smakebuf_r+0x74>
 8006b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f889 	bl	8006cb8 <_isatty_r>
 8006ba6:	b128      	cbz	r0, 8006bb4 <__smakebuf_r+0x74>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	89a0      	ldrh	r0, [r4, #12]
 8006bb6:	4305      	orrs	r5, r0
 8006bb8:	81a5      	strh	r5, [r4, #12]
 8006bba:	e7cd      	b.n	8006b58 <__smakebuf_r+0x18>
 8006bbc:	08005e35 	.word	0x08005e35

08006bc0 <__malloc_lock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_lock+0x8>)
 8006bc2:	f7ff ba09 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	200010e0 	.word	0x200010e0

08006bcc <__malloc_unlock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_unlock+0x8>)
 8006bce:	f7ff ba04 	b.w	8005fda <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	200010e0 	.word	0x200010e0

08006bd8 <_free_r>:
 8006bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	d044      	beq.n	8006c68 <_free_r+0x90>
 8006bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be2:	9001      	str	r0, [sp, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bea:	bfb8      	it	lt
 8006bec:	18e4      	addlt	r4, r4, r3
 8006bee:	f7ff ffe7 	bl	8006bc0 <__malloc_lock>
 8006bf2:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <_free_r+0x94>)
 8006bf4:	9801      	ldr	r0, [sp, #4]
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	b933      	cbnz	r3, 8006c08 <_free_r+0x30>
 8006bfa:	6063      	str	r3, [r4, #4]
 8006bfc:	6014      	str	r4, [r2, #0]
 8006bfe:	b003      	add	sp, #12
 8006c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c04:	f7ff bfe2 	b.w	8006bcc <__malloc_unlock>
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d908      	bls.n	8006c1e <_free_r+0x46>
 8006c0c:	6825      	ldr	r5, [r4, #0]
 8006c0e:	1961      	adds	r1, r4, r5
 8006c10:	428b      	cmp	r3, r1
 8006c12:	bf01      	itttt	eq
 8006c14:	6819      	ldreq	r1, [r3, #0]
 8006c16:	685b      	ldreq	r3, [r3, #4]
 8006c18:	1949      	addeq	r1, r1, r5
 8006c1a:	6021      	streq	r1, [r4, #0]
 8006c1c:	e7ed      	b.n	8006bfa <_free_r+0x22>
 8006c1e:	461a      	mov	r2, r3
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	b10b      	cbz	r3, 8006c28 <_free_r+0x50>
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d9fa      	bls.n	8006c1e <_free_r+0x46>
 8006c28:	6811      	ldr	r1, [r2, #0]
 8006c2a:	1855      	adds	r5, r2, r1
 8006c2c:	42a5      	cmp	r5, r4
 8006c2e:	d10b      	bne.n	8006c48 <_free_r+0x70>
 8006c30:	6824      	ldr	r4, [r4, #0]
 8006c32:	4421      	add	r1, r4
 8006c34:	1854      	adds	r4, r2, r1
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	d1e0      	bne.n	8006bfe <_free_r+0x26>
 8006c3c:	681c      	ldr	r4, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	6053      	str	r3, [r2, #4]
 8006c42:	4421      	add	r1, r4
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	e7da      	b.n	8006bfe <_free_r+0x26>
 8006c48:	d902      	bls.n	8006c50 <_free_r+0x78>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	e7d6      	b.n	8006bfe <_free_r+0x26>
 8006c50:	6825      	ldr	r5, [r4, #0]
 8006c52:	1961      	adds	r1, r4, r5
 8006c54:	428b      	cmp	r3, r1
 8006c56:	bf04      	itt	eq
 8006c58:	6819      	ldreq	r1, [r3, #0]
 8006c5a:	685b      	ldreq	r3, [r3, #4]
 8006c5c:	6063      	str	r3, [r4, #4]
 8006c5e:	bf04      	itt	eq
 8006c60:	1949      	addeq	r1, r1, r5
 8006c62:	6021      	streq	r1, [r4, #0]
 8006c64:	6054      	str	r4, [r2, #4]
 8006c66:	e7ca      	b.n	8006bfe <_free_r+0x26>
 8006c68:	b003      	add	sp, #12
 8006c6a:	bd30      	pop	{r4, r5, pc}
 8006c6c:	200010e4 	.word	0x200010e4

08006c70 <_read_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d07      	ldr	r5, [pc, #28]	; (8006c90 <_read_r+0x20>)
 8006c74:	4604      	mov	r4, r0
 8006c76:	4608      	mov	r0, r1
 8006c78:	4611      	mov	r1, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	602a      	str	r2, [r5, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f7f9 ffd4 	bl	8000c2c <_read>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_read_r+0x1e>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_read_r+0x1e>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	200010ec 	.word	0x200010ec

08006c94 <_fstat_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	; (8006cb4 <_fstat_r+0x20>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f7f9 ffec 	bl	8000c7e <_fstat>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d102      	bne.n	8006cb0 <_fstat_r+0x1c>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	b103      	cbz	r3, 8006cb0 <_fstat_r+0x1c>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200010ec 	.word	0x200010ec

08006cb8 <_isatty_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	; (8006cd4 <_isatty_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7f9 ffeb 	bl	8000c9e <_isatty>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_isatty_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_isatty_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	200010ec 	.word	0x200010ec

08006cd8 <_init>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr

08006ce4 <_fini>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr
