
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000463c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f0  080048f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080048f0  080048f0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048f0  080048f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  20000074  0800496c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  0800496c  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111f3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5f  00000000  00000000  00031297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00033cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028167  00000000  00000000  00035a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011058  00000000  00000000  0005db97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efa69  00000000  00000000  0006ebef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004394  00000000  00000000  0015e6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047b4 	.word	0x080047b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080047b4 	.word	0x080047b4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000144 	.word	0x20000144

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fb35 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f879 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f909 	bl	8000428 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f8c7 	bl	80003a8 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800021a:	4b32      	ldr	r3, [pc, #200]	; (80002e4 <main+0xe0>)
 800021c:	f107 040c 	add.w	r4, r7, #12
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800022e:	f107 030c 	add.w	r3, r7, #12
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fa8a 	bl	800274e <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a2a      	ldr	r2, [pc, #168]	; (80002e8 <main+0xe4>)
 800023e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  TaskHandle_t led_green, led_red, led_orange; //led_blue, button;
	BaseType_t status;
  status = xTaskCreate(led_green_function, "Green LED", 200, NULL, 2, &led_green);
 8000240:	f107 0308 	add.w	r3, r7, #8
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2302      	movs	r3, #2
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	22c8      	movs	r2, #200	; 0xc8
 800024e:	4927      	ldr	r1, [pc, #156]	; (80002ec <main+0xe8>)
 8000250:	4827      	ldr	r0, [pc, #156]	; (80002f0 <main+0xec>)
 8000252:	f002 fbed 	bl	8002a30 <xTaskCreate>
 8000256:	6378      	str	r0, [r7, #52]	; 0x34
  configASSERT(status == pdPASS);
 8000258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800025a:	2b01      	cmp	r3, #1
 800025c:	d00a      	beq.n	8000274 <main+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800025e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000262:	f383 8811 	msr	BASEPRI, r3
 8000266:	f3bf 8f6f 	isb	sy
 800026a:	f3bf 8f4f 	dsb	sy
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000270:	bf00      	nop
 8000272:	e7fe      	b.n	8000272 <main+0x6e>

	status = xTaskCreate(led_orange_function, "Orange LED", 200, NULL, 2, &led_orange);
 8000274:	463b      	mov	r3, r7
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2302      	movs	r3, #2
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2300      	movs	r3, #0
 800027e:	22c8      	movs	r2, #200	; 0xc8
 8000280:	491c      	ldr	r1, [pc, #112]	; (80002f4 <main+0xf0>)
 8000282:	481d      	ldr	r0, [pc, #116]	; (80002f8 <main+0xf4>)
 8000284:	f002 fbd4 	bl	8002a30 <xTaskCreate>
 8000288:	6378      	str	r0, [r7, #52]	; 0x34
	  configASSERT(status == pdPASS);
 800028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800028c:	2b01      	cmp	r3, #1
 800028e:	d00a      	beq.n	80002a6 <main+0xa2>
	__asm volatile
 8000290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000294:	f383 8811 	msr	BASEPRI, r3
 8000298:	f3bf 8f6f 	isb	sy
 800029c:	f3bf 8f4f 	dsb	sy
 80002a0:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 80002a2:	bf00      	nop
 80002a4:	e7fe      	b.n	80002a4 <main+0xa0>

	  //Task 3
	  status = xTaskCreate(led_red_function, "Red LED", 200, NULL, 2, &led_red);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2302      	movs	r3, #2
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2300      	movs	r3, #0
 80002b0:	22c8      	movs	r2, #200	; 0xc8
 80002b2:	4912      	ldr	r1, [pc, #72]	; (80002fc <main+0xf8>)
 80002b4:	4812      	ldr	r0, [pc, #72]	; (8000300 <main+0xfc>)
 80002b6:	f002 fbbb 	bl	8002a30 <xTaskCreate>
 80002ba:	6378      	str	r0, [r7, #52]	; 0x34
	  configASSERT(status == pdPASS);
 80002bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d00a      	beq.n	80002d8 <main+0xd4>
	__asm volatile
 80002c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002c6:	f383 8811 	msr	BASEPRI, r3
 80002ca:	f3bf 8f6f 	isb	sy
 80002ce:	f3bf 8f4f 	dsb	sy
 80002d2:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80002d4:	bf00      	nop
 80002d6:	e7fe      	b.n	80002d6 <main+0xd2>

	  //Task 4
	 // status = xTaskCreate(led_blue_function, "Blue LED", 200, NULL, 2, &led_blue);

	  vTaskStartScheduler();
 80002d8:	f002 fd38 	bl	8002d4c <vTaskStartScheduler>
  /* Start scheduler */
  osKernelStart();
 80002dc:	f002 fa30 	bl	8002740 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <main+0xdc>
 80002e2:	bf00      	nop
 80002e4:	080047f8 	.word	0x080047f8
 80002e8:	20000398 	.word	0x20000398
 80002ec:	080047d8 	.word	0x080047d8
 80002f0:	080004d1 	.word	0x080004d1
 80002f4:	080047e4 	.word	0x080047e4
 80002f8:	08000501 	.word	0x08000501
 80002fc:	080047f0 	.word	0x080047f0
 8000300:	08000531 	.word	0x08000531

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b096      	sub	sp, #88	; 0x58
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	2244      	movs	r2, #68	; 0x44
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fdd5 	bl	8003ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000326:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032a:	f000 ff17 	bl	800115c <HAL_PWREx_ControlVoltageScaling>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000334:	f000 f912 	bl	800055c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	2302      	movs	r3, #2
 800033a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000340:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000342:	2310      	movs	r3, #16
 8000344:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800034e:	2301      	movs	r3, #1
 8000350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000352:	230a      	movs	r3, #10
 8000354:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000356:	2307      	movs	r3, #7
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800035a:	2302      	movs	r3, #2
 800035c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800035e:	2302      	movs	r3, #2
 8000360:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	4618      	mov	r0, r3
 8000368:	f000 ff4e 	bl	8001208 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000372:	f000 f8f3 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2303      	movs	r3, #3
 800037c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800038a:	463b      	mov	r3, r7
 800038c:	2104      	movs	r1, #4
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fb16 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800039a:	f000 f8df 	bl	800055c <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3758      	adds	r7, #88	; 0x58
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_I2C1_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	; (8000420 <MX_I2C1_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_I2C1_Init+0x74>)
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <MX_I2C1_Init+0x7c>)
 80003b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_I2C1_Init+0x74>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_I2C1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e2:	480e      	ldr	r0, [pc, #56]	; (800041c <MX_I2C1_Init+0x74>)
 80003e4:	f000 fd86 	bl	8000ef4 <HAL_I2C_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ee:	f000 f8b5 	bl	800055c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <MX_I2C1_Init+0x74>)
 80003f6:	f000 fe0c 	bl	8001012 <HAL_I2CEx_ConfigAnalogFilter>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000400:	f000 f8ac 	bl	800055c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000404:	2100      	movs	r1, #0
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_I2C1_Init+0x74>)
 8000408:	f000 fe4e 	bl	80010a8 <HAL_I2CEx_ConfigDigitalFilter>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000412:	f000 f8a3 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000344 	.word	0x20000344
 8000420:	40005400 	.word	0x40005400
 8000424:	10909cec 	.word	0x10909cec

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_GPIO_Init+0x90>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <MX_GPIO_Init+0x90>)
 8000444:	f043 0304 	orr.w	r3, r3, #4
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_GPIO_Init+0x90>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0304 	and.w	r3, r3, #4
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_GPIO_Init+0x90>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <MX_GPIO_Init+0x90>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_GPIO_Init+0x90>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_GPIO_Init+0x90>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <MX_GPIO_Init+0x90>)
 8000474:	f043 0302 	orr.w	r3, r3, #2
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_GPIO_Init+0x90>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <MX_GPIO_Init+0x94>)
 800048e:	f000 fcff 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000492:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <MX_GPIO_Init+0x94>)
 80004ac:	f000 fb46 	bl	8000b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000800 	.word	0x48000800

080004c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f002 f98c 	bl	80027e6 <osDelay>
 80004ce:	e7fb      	b.n	80004c8 <StartDefaultTask+0x8>

080004d0 <led_green_function>:
  }
  /* USER CODE END 5 */
}
static void led_green_function(void* params)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup = xTaskGetTickCount();
 80004d8:	f002 fd4c 	bl	8002f74 <xTaskGetTickCount>
 80004dc:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		printf("Green LED Task\n");
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <led_green_function+0x28>)
 80004e0:	f003 fdfa 	bl	80040d8 <puts>
		HAL_GPIO_TogglePin(GPIOC, 13);
 80004e4:	210d      	movs	r1, #13
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <led_green_function+0x2c>)
 80004e8:	f000 fcea 	bl	8000ec0 <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelay( pdMS_TO_TICKS( 1000 ) );
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f002 fbf8 	bl	8002ce4 <vTaskDelay>
	{
 80004f4:	e7f3      	b.n	80004de <led_green_function+0xe>
 80004f6:	bf00      	nop
 80004f8:	08004814 	.word	0x08004814
 80004fc:	48000800 	.word	0x48000800

08000500 <led_orange_function>:
//		vTaskDelayUntil(&last_wakeup, pdMS_TO_TICKS( 250 ) );
	}
}

static void led_orange_function(void* params)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup = xTaskGetTickCount();
 8000508:	f002 fd34 	bl	8002f74 <xTaskGetTickCount>
 800050c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		printf("Orange LED Task\n");
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <led_orange_function+0x28>)
 8000510:	f003 fde2 	bl	80040d8 <puts>
		HAL_GPIO_TogglePin(GPIOC, 14);
 8000514:	210e      	movs	r1, #14
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <led_orange_function+0x2c>)
 8000518:	f000 fcd2 	bl	8000ec0 <HAL_GPIO_TogglePin>
//		HAL_Delay(750);
		vTaskDelay( pdMS_TO_TICKS( 750 ) );
 800051c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000520:	f002 fbe0 	bl	8002ce4 <vTaskDelay>
	{
 8000524:	e7f3      	b.n	800050e <led_orange_function+0xe>
 8000526:	bf00      	nop
 8000528:	08004824 	.word	0x08004824
 800052c:	48000800 	.word	0x48000800

08000530 <led_red_function>:
//		vTaskDelayUntil(&last_wakeup, pdMS_TO_TICKS( 500 ) );
	}
}

static void led_red_function(void* params)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup = xTaskGetTickCount();
 8000538:	f002 fd1c 	bl	8002f74 <xTaskGetTickCount>
 800053c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		printf("Red LED Task\n");
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <led_red_function+0x28>)
 8000540:	f003 fdca 	bl	80040d8 <puts>
		HAL_GPIO_TogglePin(GPIOA, 5);
 8000544:	2105      	movs	r1, #5
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 fcb9 	bl	8000ec0 <HAL_GPIO_TogglePin>

//		HAL_Delay(500);
		vTaskDelay( pdMS_TO_TICKS( 500 ) );
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f002 fbc7 	bl	8002ce4 <vTaskDelay>
	{
 8000556:	e7f2      	b.n	800053e <led_red_function+0xe>
 8000558:	08004834 	.word	0x08004834

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	e7fe      	b.n	8000564 <Error_Handler+0x8>
	...

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_MspInit+0x4c>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <HAL_MspInit+0x4c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6613      	str	r3, [r2, #96]	; 0x60
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_MspInit+0x4c>)
 800057c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_MspInit+0x4c>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_MspInit+0x4c>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	6593      	str	r3, [r2, #88]	; 0x58
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_MspInit+0x4c>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	210f      	movs	r1, #15
 80005a2:	f06f 0001 	mvn.w	r0, #1
 80005a6:	f000 faa0 	bl	8000aea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0ac      	sub	sp, #176	; 0xb0
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2288      	movs	r2, #136	; 0x88
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fc72 	bl	8003ec2 <memset>
  if(hi2c->Instance==I2C1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a21      	ldr	r2, [pc, #132]	; (8000668 <HAL_I2C_MspInit+0xb0>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d13b      	bne.n	8000660 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fbcf 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000600:	f7ff ffac 	bl	800055c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_I2C_MspInit+0xb4>)
 8000606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <HAL_I2C_MspInit+0xb4>)
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <HAL_I2C_MspInit+0xb4>)
 8000612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800061c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000624:	2312      	movs	r3, #18
 8000626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000636:	2304      	movs	r3, #4
 8000638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000640:	4619      	mov	r1, r3
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_I2C_MspInit+0xb8>)
 8000644:	f000 fa7a 	bl	8000b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_I2C_MspInit+0xb4>)
 800064a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_I2C_MspInit+0xb4>)
 800064e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000652:	6593      	str	r3, [r2, #88]	; 0x58
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_I2C_MspInit+0xb4>)
 8000656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	37b0      	adds	r7, #176	; 0xb0
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40005400 	.word	0x40005400
 800066c:	40021000 	.word	0x40021000
 8000670:	48000400 	.word	0x48000400

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f944 	bl	8000930 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006a8:	f002 fe68 	bl	800337c <xTaskGetSchedulerState>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d001      	beq.n	80006b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006b2:	f003 f8a9 	bl	8003808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	e00a      	b.n	80006e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006cc:	f3af 8000 	nop.w
 80006d0:	4601      	mov	r1, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	60ba      	str	r2, [r7, #8]
 80006d8:	b2ca      	uxtb	r2, r1
 80006da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbf0      	blt.n	80006cc <_read+0x12>
  }

  return len;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e009      	b.n	800071a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbf1      	blt.n	8000706 <_write+0x12>
  }
  return len;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_close>:

int _close(int file)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	605a      	str	r2, [r3, #4]
  return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <_isatty>:

int _isatty(int file)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f003 fa5a 	bl	8003c7c <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20018000 	.word	0x20018000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	2000039c 	.word	0x2000039c
 80007fc:	200010c0 	.word	0x200010c0

08000800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800085c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff ffea 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f003 fb0f 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000856:	f7ff fcd5 	bl	8000204 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800085c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000868:	080048f8 	.word	0x080048f8
  ldr r2, =_sbss
 800086c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000870:	200010c0 	.word	0x200010c0

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_Init+0x3c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <HAL_Init+0x3c>)
 8000888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088e:	2003      	movs	r0, #3
 8000890:	f000 f920 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000894:	200f      	movs	r0, #15
 8000896:	f000 f80f 	bl	80008b8 <HAL_InitTick>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	e001      	b.n	80008aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a6:	f7ff fe5f 	bl	8000568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_InitTick+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d023      	beq.n	8000914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_InitTick+0x70>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f91d 	bl	8000b22 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10f      	bne.n	800090e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d809      	bhi.n	8000908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f8f5 	bl	8000aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e007      	b.n	8000918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e004      	b.n	8000918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e001      	b.n	8000918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000000 	.word	0x20000000
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	200003a0 	.word	0x200003a0

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200003a0 	.word	0x200003a0

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff8e 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff47 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff5c 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff8e 	bl	8000a28 <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5d 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffb0 	bl	8000a90 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	e17f      	b.n	8000e4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	2101      	movs	r1, #1
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8171 	beq.w	8000e46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d005      	beq.n	8000b7c <HAL_GPIO_Init+0x40>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d130      	bne.n	8000bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	f003 0201 	and.w	r2, r3, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d118      	bne.n	8000c1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	f003 0201 	and.w	r2, r3, #1
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d017      	beq.n	8000c58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d123      	bne.n	8000cac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	6939      	ldr	r1, [r7, #16]
 8000ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0203 	and.w	r2, r3, #3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80ac 	beq.w	8000e46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <HAL_GPIO_Init+0x330>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	4a5e      	ldr	r2, [pc, #376]	; (8000e6c <HAL_GPIO_Init+0x330>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfa:	4b5c      	ldr	r3, [pc, #368]	; (8000e6c <HAL_GPIO_Init+0x330>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d06:	4a5a      	ldr	r2, [pc, #360]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d30:	d025      	beq.n	8000d7e <HAL_GPIO_Init+0x242>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <HAL_GPIO_Init+0x338>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d01f      	beq.n	8000d7a <HAL_GPIO_Init+0x23e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_GPIO_Init+0x33c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d019      	beq.n	8000d76 <HAL_GPIO_Init+0x23a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4d      	ldr	r2, [pc, #308]	; (8000e7c <HAL_GPIO_Init+0x340>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0x236>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <HAL_GPIO_Init+0x344>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00d      	beq.n	8000d6e <HAL_GPIO_Init+0x232>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_GPIO_Init+0x348>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x22e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x34c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_GPIO_Init+0x22a>
 8000d62:	2306      	movs	r3, #6
 8000d64:	e00c      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e00a      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	e008      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d72:	2303      	movs	r3, #3
 8000d74:	e004      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_Init+0x244>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	f002 0203 	and.w	r2, r2, #3
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	4093      	lsls	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d90:	4937      	ldr	r1, [pc, #220]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dc2:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e16:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f47f ae78 	bne.w	8000b4c <HAL_GPIO_Init+0x10>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	48000400 	.word	0x48000400
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000c00 	.word	0x48000c00
 8000e80:	48001000 	.word	0x48001000
 8000e84:	48001400 	.word	0x48001400
 8000e88:	48001800 	.word	0x48001800
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43d9      	mvns	r1, r3
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e081      	b.n	800100a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d106      	bne.n	8000f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fb4c 	bl	80005b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2224      	movs	r2, #36	; 0x24
 8000f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d107      	bne.n	8000f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	e006      	b.n	8000f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d104      	bne.n	8000f8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69d9      	ldr	r1, [r3, #28]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b20      	cmp	r3, #32
 8001026:	d138      	bne.n	800109a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001032:	2302      	movs	r3, #2
 8001034:	e032      	b.n	800109c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2224      	movs	r2, #36	; 0x24
 8001042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001064:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0201 	orr.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800109a:	2302      	movs	r3, #2
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d139      	bne.n	8001132 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e033      	b.n	8001134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2224      	movs	r2, #36	; 0x24
 80010d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2220      	movs	r2, #32
 8001122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001132:	2302      	movs	r3, #2
  }
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_PWREx_GetVoltageRange+0x18>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000

0800115c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116a:	d130      	bne.n	80011ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001178:	d038      	beq.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2232      	movs	r2, #50	; 0x32
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9b      	lsrs	r3, r3, #18
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a0:	e002      	b.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b4:	d102      	bne.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f2      	bne.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c8:	d110      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e00f      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011da:	d007      	beq.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e3ca      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121a:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001224:	4b94      	ldr	r3, [pc, #592]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80e4 	beq.w	8001404 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <HAL_RCC_OscConfig+0x4a>
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	f040 808b 	bne.w	8001360 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b01      	cmp	r3, #1
 800124e:	f040 8087 	bne.w	8001360 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x62>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e3a2      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_RCC_OscConfig+0x7c>
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001282:	e005      	b.n	8001290 <HAL_RCC_OscConfig+0x88>
 8001284:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001290:	4293      	cmp	r3, r2
 8001292:	d223      	bcs.n	80012dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fd1d 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e383      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a8:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a72      	ldr	r2, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	496d      	ldr	r1, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	4968      	ldr	r1, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
 80012da:	e025      	b.n	8001328 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b63      	ldr	r3, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4960      	ldr	r1, [pc, #384]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	495b      	ldr	r1, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fcdd 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e343      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001328:	f000 fc4a 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b52      	ldr	r3, [pc, #328]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	4950      	ldr	r1, [pc, #320]	; (800147c <HAL_RCC_OscConfig+0x274>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_RCC_OscConfig+0x278>)
 8001346:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001348:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fab3 	bl	80008b8 <HAL_InitTick>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d052      	beq.n	8001402 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	e327      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d032      	beq.n	80013ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001368:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001374:	f7ff faf0 	bl	8000958 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137c:	f7ff faec 	bl	8000958 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e310      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a36      	ldr	r2, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4931      	ldr	r1, [pc, #196]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	492c      	ldr	r1, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e01a      	b.n	8001404 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013da:	f7ff fabd 	bl	8000958 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e2:	f7ff fab9 	bl	8000958 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e2dd      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x1da>
 8001400:	e000      	b.n	8001404 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001402:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d074      	beq.n	80014fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x21a>
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d10e      	bne.n	800143a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d10b      	bne.n	800143a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d064      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d160      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e2ba      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x24a>
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e026      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145a:	d115      	bne.n	8001488 <HAL_RCC_OscConfig+0x280>
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a05      	ldr	r2, [pc, #20]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a02      	ldr	r2, [pc, #8]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e014      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	0800484c 	.word	0x0800484c
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004
 8001488:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a9f      	ldr	r2, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b9d      	ldr	r3, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a9c      	ldr	r2, [pc, #624]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa56 	bl	8000958 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fa52 	bl	8000958 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e276      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c2:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2a8>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa42 	bl	8000958 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fa3e 	bl	8000958 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e262      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d0>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d060      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x310>
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d119      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x328>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e23f      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4973      	ldr	r1, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	e040      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d023      	beq.n	8001596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154e:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff f9fd 	bl	8000958 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff f9f9 	bl	8000958 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e21d      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	495f      	ldr	r1, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff f9d9 	bl	8000958 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff f9d5 	bl	8000958 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1f9      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03c      	beq.n	800164e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01c      	beq.n	8001616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e2:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff f9b4 	bl	8000958 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff f9b0 	bl	8000958 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1d4      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ef      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3ec>
 8001614:	e01b      	b.n	800164e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	4a3b      	ldr	r2, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff f997 	bl	8000958 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff f993 	bl	8000958 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1b7      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ef      	bne.n	800162e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80a6 	beq.w	80017a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001684:	2301      	movs	r3, #1
 8001686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d118      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a0:	f7ff f95a 	bl	8000958 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff f956 	bl	8000958 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e17a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4d8>
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016de:	e029      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d115      	bne.n	8001714 <HAL_RCC_OscConfig+0x50c>
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40007000 	.word	0x40007000
 8001714:	4b9c      	ldr	r3, [pc, #624]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a9b      	ldr	r2, [pc, #620]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001724:	4b98      	ldr	r3, [pc, #608]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a97      	ldr	r2, [pc, #604]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d016      	beq.n	800176a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff f90c 	bl	8000958 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff f908 	bl	8000958 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e12a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ed      	beq.n	8001744 <HAL_RCC_OscConfig+0x53c>
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff f8f5 	bl	8000958 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f8f1 	bl	8000958 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e113      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001788:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ed      	bne.n	8001772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a79      	ldr	r2, [pc, #484]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80fe 	beq.w	80019ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	f040 80d0 	bne.w	800195c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017bc:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d130      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	3b01      	subs	r3, #1
 80017dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d127      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d11f      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017fc:	2a07      	cmp	r2, #7
 80017fe:	bf14      	ite	ne
 8001800:	2201      	movne	r2, #1
 8001802:	2200      	moveq	r2, #0
 8001804:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001806:	4293      	cmp	r3, r2
 8001808:	d113      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d109      	bne.n	8001832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d06e      	beq.n	8001910 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d069      	beq.n	800190c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001844:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0ad      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4b      	ldr	r2, [pc, #300]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800185a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001860:	f7ff f87a 	bl	8000958 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f876 	bl	8000958 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e09a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001896:	3a01      	subs	r2, #1
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018a0:	0212      	lsls	r2, r2, #8
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018a8:	0852      	lsrs	r2, r2, #1
 80018aa:	3a01      	subs	r2, #1
 80018ac:	0552      	lsls	r2, r2, #21
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b4:	0852      	lsrs	r2, r2, #1
 80018b6:	3a01      	subs	r2, #1
 80018b8:	0652      	lsls	r2, r2, #25
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c0:	0912      	lsrs	r2, r2, #4
 80018c2:	0452      	lsls	r2, r2, #17
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4930      	ldr	r1, [pc, #192]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e4:	f7ff f838 	bl	8000958 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f834 	bl	8000958 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e058      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190a:	e050      	b.n	80019ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e04f      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d148      	bne.n	80019ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001934:	f7ff f810 	bl	8000958 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f80c 	bl	8000958 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e030      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x734>
 800195a:	e028      	b.n	80019ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d023      	beq.n	80019aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_RCC_OscConfig+0x780>)
 8001968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7fe fff3 	bl	8000958 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e00c      	b.n	8001990 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7fe ffef 	bl	8000958 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d905      	bls.n	8001990 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e013      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
 8001988:	40021000 	.word	0x40021000
 800198c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x7b0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ec      	bne.n	8001976 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x7b0>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4905      	ldr	r1, [pc, #20]	; (80019b8 <HAL_RCC_OscConfig+0x7b0>)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x7b4>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e001      	b.n	80019ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	feeefffc 	.word	0xfeeefffc

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0e7      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4970      	ldr	r1, [pc, #448]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cf      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d908      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4960      	ldr	r1, [pc, #384]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d04c      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d121      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0a6      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d115      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e09a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e08e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e086      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4943      	ldr	r1, [pc, #268]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa8:	f7fe ff56 	bl	8000958 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7fe ff52 	bl	8000958 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e06e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d208      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	492b      	ldr	r1, [pc, #172]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d210      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 0207 	bic.w	r2, r3, #7
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e036      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b74:	f000 f824 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	490b      	ldr	r1, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1fc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fe8d 	bl	80008b8 <HAL_InitTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	0800484c 	.word	0x0800484c
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d134      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0xac>
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	0800485c 	.word	0x0800485c
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff fa26 	bl	8001140 <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
 8001cf6:	e014      	b.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d10:	f7ff fa16 	bl	8001140 <HAL_PWREx_GetVoltageRange>
 8001d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	d10b      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d919      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2ba0      	cmp	r3, #160	; 0xa0
 8001d34:	d902      	bls.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e013      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e010      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d902      	bls.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e00a      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d102      	bne.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e004      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b70      	cmp	r3, #112	; 0x70
 8001d5e:	d101      	bne.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0207 	bic.w	r2, r3, #7
 8001d6c:	4909      	ldr	r1, [pc, #36]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da4:	2300      	movs	r3, #0
 8001da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d041      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dbc:	d02a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc2:	d824      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dce:	d81e      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dda:	e018      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a85      	ldr	r2, [pc, #532]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de8:	e015      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fabb 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dfa:	e00c      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3320      	adds	r3, #32
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fba6 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0c:	e003      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	74fb      	strb	r3, [r7, #19]
      break;
 8001e12:	e000      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e2a:	4973      	ldr	r1, [pc, #460]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e32:	e001      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d041      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e52:	d824      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e5e:	d81e      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e78:	e015      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa73 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb5e 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eba:	494f      	ldr	r1, [pc, #316]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a0 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fd1e 	bl	8000958 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fd1a 	bl	8000958 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d902      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	74fb      	strb	r3, [r7, #19]
        break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15c      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01f      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d019      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fcd9 	bl	8000958 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fcd5 	bl	8000958 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d902      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc0:	e006      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ec      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe6:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
 8001ff4:	e006      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002004:	7c7b      	ldrb	r3, [r7, #17]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4a9d      	ldr	r2, [pc, #628]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002022:	4b98      	ldr	r3, [pc, #608]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	4994      	ldr	r1, [pc, #592]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002044:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f023 020c 	bic.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	498c      	ldr	r1, [pc, #560]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002066:	4b87      	ldr	r3, [pc, #540]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4983      	ldr	r1, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002088:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	497b      	ldr	r1, [pc, #492]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020aa:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	4972      	ldr	r1, [pc, #456]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020cc:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	496a      	ldr	r1, [pc, #424]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	4961      	ldr	r1, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	4959      	ldr	r1, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	4950      	ldr	r1, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	4948      	ldr	r1, [pc, #288]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	493f      	ldr	r1, [pc, #252]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d028      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	4937      	ldr	r1, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b32      	ldr	r3, [pc, #200]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a31      	ldr	r2, [pc, #196]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
 80021c4:	e011      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ce:	d10c      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8c8 	bl	800236c <RCCEx_PLLSAI1_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	491f      	ldr	r1, [pc, #124]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002214:	d106      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002220:	60d3      	str	r3, [r2, #12]
 8002222:	e011      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800222c:	d10c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f899 	bl	800236c <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002272:	d109      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a02      	ldr	r2, [pc, #8]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	e014      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002290:	d10c      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f867 	bl	800236c <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f844 	bl	800236c <RCCEx_PLLSAI1_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	74bb      	strb	r3, [r7, #18]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3320      	adds	r3, #32
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f925 	bl	8002554 <RCCEx_PLLSAI2_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002332:	490d      	ldr	r1, [pc, #52]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	4904      	ldr	r1, [pc, #16]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800235e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800237a:	4b75      	ldr	r3, [pc, #468]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0203 	and.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d10d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
       ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
       ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d047      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d018      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x86>
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d825      	bhi.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x62>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d009      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x74>
 80023cc:	e020      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ce:	4b60      	ldr	r3, [pc, #384]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e01a      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e013      	b.n	800241a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240e:	e006      	b.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e004      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	430b      	orrs	r3, r1
 800243c:	4944      	ldr	r1, [pc, #272]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d17d      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002448:	4b41      	ldr	r3, [pc, #260]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fa80 	bl	8000958 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800245a:	e009      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245c:	f7fe fa7c 	bl	8000958 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e005      	b.n	800247c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ef      	bne.n	800245c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d160      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d111      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	0211      	lsls	r1, r2, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	0912      	lsrs	r2, r2, #4
 80024a0:	0452      	lsls	r2, r2, #17
 80024a2:	430a      	orrs	r2, r1
 80024a4:	492a      	ldr	r1, [pc, #168]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	610b      	str	r3, [r1, #16]
 80024aa:	e027      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d112      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6892      	ldr	r2, [r2, #8]
 80024c2:	0211      	lsls	r1, r2, #8
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6912      	ldr	r2, [r2, #16]
 80024c8:	0852      	lsrs	r2, r2, #1
 80024ca:	3a01      	subs	r2, #1
 80024cc:	0552      	lsls	r2, r2, #21
 80024ce:	430a      	orrs	r2, r1
 80024d0:	491f      	ldr	r1, [pc, #124]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
 80024d6:	e011      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	0211      	lsls	r1, r2, #8
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6952      	ldr	r2, [r2, #20]
 80024ee:	0852      	lsrs	r2, r2, #1
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0652      	lsls	r2, r2, #25
 80024f4:	430a      	orrs	r2, r1
 80024f6:	4916      	ldr	r1, [pc, #88]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002506:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fa26 	bl	8000958 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250e:	e009      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002510:	f7fe fa22 	bl	8000958 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d902      	bls.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	73fb      	strb	r3, [r7, #15]
          break;
 8002522:	e005      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ef      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	4904      	ldr	r1, [pc, #16]	; (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002562:	4b6a      	ldr	r3, [pc, #424]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800256e:	4b67      	ldr	r3, [pc, #412]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d10d      	bne.n	800259a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
       ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
       ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d047      	beq.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d018      	beq.n	80025da <RCCEx_PLLSAI2_Config+0x86>
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d825      	bhi.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0x62>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d009      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x74>
 80025b4:	e020      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11d      	bne.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c6:	e01a      	b.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d116      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e013      	b.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025da:	4b4c      	ldr	r3, [pc, #304]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f6:	e006      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e004      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
    }

    if(status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	430b      	orrs	r3, r1
 8002624:	4939      	ldr	r1, [pc, #228]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d167      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a35      	ldr	r2, [pc, #212]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe f98c 	bl	8000958 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002644:	f7fe f988 	bl	8000958 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
        break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ef      	bne.n	8002644 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14a      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	0211      	lsls	r1, r2, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	0912      	lsrs	r2, r2, #4
 8002688:	0452      	lsls	r2, r2, #17
 800268a:	430a      	orrs	r2, r1
 800268c:	491f      	ldr	r1, [pc, #124]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	614b      	str	r3, [r1, #20]
 8002692:	e011      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6912      	ldr	r2, [r2, #16]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4916      	ldr	r1, [pc, #88]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe f948 	bl	8000958 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ca:	e009      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026cc:	f7fe f944 	bl	8000958 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	73fb      	strb	r3, [r7, #15]
          break;
 80026de:	e005      	b.n	80026ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4904      	ldr	r1, [pc, #16]	; (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800271e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002722:	2b84      	cmp	r3, #132	; 0x84
 8002724:	d005      	beq.n	8002732 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002726:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4413      	add	r3, r2
 800272e:	3303      	adds	r3, #3
 8002730:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002744:	f000 fb02 	bl	8002d4c <vTaskStartScheduler>
  
  return osOK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}

0800274e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800274e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002750:	b089      	sub	sp, #36	; 0x24
 8002752:	af04      	add	r7, sp, #16
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <osThreadCreate+0x54>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01c      	beq.n	80027a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685c      	ldr	r4, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681d      	ldr	r5, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691e      	ldr	r6, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ffc8 	bl	8002710 <makeFreeRtosPriority>
 8002780:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800278a:	9202      	str	r2, [sp, #8]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	9100      	str	r1, [sp, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4632      	mov	r2, r6
 8002794:	4629      	mov	r1, r5
 8002796:	4620      	mov	r0, r4
 8002798:	f000 f8ed 	bl	8002976 <xTaskCreateStatic>
 800279c:	4603      	mov	r3, r0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e01c      	b.n	80027dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685c      	ldr	r4, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027ae:	b29e      	uxth	r6, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffaa 	bl	8002710 <makeFreeRtosPriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	9200      	str	r2, [sp, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	4632      	mov	r2, r6
 80027ca:	4629      	mov	r1, r5
 80027cc:	4620      	mov	r0, r4
 80027ce:	f000 f92f 	bl	8002a30 <xTaskCreate>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d001      	beq.n	80027dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027dc:	68fb      	ldr	r3, [r7, #12]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <osDelay+0x16>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	e000      	b.n	80027fe <osDelay+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fa70 	bl	8002ce4 <vTaskDelay>
  
  return osOK;
 8002804:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0208 	add.w	r2, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f04f 32ff 	mov.w	r2, #4294967295
 8002826:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 0208 	add.w	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f103 0208 	add.w	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	601a      	str	r2, [r3, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d103      	bne.n	80028d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e00c      	b.n	80028ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3308      	adds	r3, #8
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e002      	b.n	80028de <vListInsert+0x2e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d2f6      	bcs.n	80028d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6852      	ldr	r2, [r2, #4]
 8002942:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d103      	bne.n	8002956 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002976:	b580      	push	{r7, lr}
 8002978:	b08e      	sub	sp, #56	; 0x38
 800297a:	af04      	add	r7, sp, #16
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <xTaskCreateStatic+0x2a>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	623b      	str	r3, [r7, #32]
}
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <xTaskCreateStatic+0x46>
	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	61fb      	str	r3, [r7, #28]
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029bc:	23b4      	movs	r3, #180	; 0xb4
 80029be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2bb4      	cmp	r3, #180	; 0xb4
 80029c4:	d00a      	beq.n	80029dc <xTaskCreateStatic+0x66>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	61bb      	str	r3, [r7, #24]
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01e      	beq.n	8002a22 <xTaskCreateStatic+0xac>
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01b      	beq.n	8002a22 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029fc:	2300      	movs	r3, #0
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f851 	bl	8002abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a1c:	f000 f8f8 	bl	8002c10 <prvAddNewTaskToReadyList>
 8002a20:	e001      	b.n	8002a26 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a26:	697b      	ldr	r3, [r7, #20]
	}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 ff2f 	bl	80038a8 <pvPortMalloc>
 8002a4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00e      	beq.n	8002a70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a52:	20b4      	movs	r0, #180	; 0xb4
 8002a54:	f000 ff28 	bl	80038a8 <pvPortMalloc>
 8002a58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	e005      	b.n	8002a74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f000 ffe9 	bl	8003a40 <vPortFree>
 8002a6e:	e001      	b.n	8002a74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a82:	88fa      	ldrh	r2, [r7, #6]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9303      	str	r3, [sp, #12]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f80f 	bl	8002abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a9e:	69f8      	ldr	r0, [r7, #28]
 8002aa0:	f000 f8b6 	bl	8002c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e002      	b.n	8002ab0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	21a5      	movs	r1, #165	; 0xa5
 8002ad6:	f001 f9f4 	bl	8003ec2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f023 0307 	bic.w	r3, r3, #7
 8002af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	617b      	str	r3, [r7, #20]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01f      	beq.n	8002b5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e012      	b.n	8002b46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	7819      	ldrb	r1, [r3, #0]
 8002b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3334      	adds	r3, #52	; 0x34
 8002b30:	460a      	mov	r2, r1
 8002b32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b0f      	cmp	r3, #15
 8002b4a:	d9e9      	bls.n	8002b20 <prvInitialiseNewTask+0x64>
 8002b4c:	e000      	b.n	8002b50 <prvInitialiseNewTask+0x94>
			{
				break;
 8002b4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b58:	e003      	b.n	8002b62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d901      	bls.n	8002b6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b68:	2306      	movs	r3, #6
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	3304      	adds	r3, #4
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fe63 	bl	800284e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	3318      	adds	r3, #24
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fe5e 	bl	800284e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	f1c3 0207 	rsb	r2, r3, #7
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	334c      	adds	r3, #76	; 0x4c
 8002bbc:	2260      	movs	r2, #96	; 0x60
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f97e 	bl	8003ec2 <memset>
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <prvInitialiseNewTask+0x148>)
 8002bca:	651a      	str	r2, [r3, #80]	; 0x50
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <prvInitialiseNewTask+0x14c>)
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <prvInitialiseNewTask+0x150>)
 8002bd6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	69b8      	ldr	r0, [r7, #24]
 8002be6:	f000 fc51 	bl	800348c <pxPortInitialiseStack>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	080048ac 	.word	0x080048ac
 8002c08:	080048cc 	.word	0x080048cc
 8002c0c:	0800488c 	.word	0x0800488c

08002c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c18:	f000 fd64 	bl	80036e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <prvAddNewTaskToReadyList+0xb8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <prvAddNewTaskToReadyList+0xb8>)
 8002c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c2e:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <prvAddNewTaskToReadyList+0xb8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d110      	bne.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c3c:	f000 fadc 	bl	80031f8 <prvInitialiseTaskLists>
 8002c40:	e00d      	b.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <prvAddNewTaskToReadyList+0xc0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d802      	bhi.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <prvAddNewTaskToReadyList+0xc4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <prvAddNewTaskToReadyList+0xc4>)
 8002c66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <prvAddNewTaskToReadyList+0xc8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <prvAddNewTaskToReadyList+0xc8>)
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <prvAddNewTaskToReadyList+0xcc>)
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7ff fde9 	bl	8002868 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c96:	f000 fd55 	bl	8003744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <prvAddNewTaskToReadyList+0xc0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00e      	beq.n	8002cc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d207      	bcs.n	8002cc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <prvAddNewTaskToReadyList+0xd0>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200004a4 	.word	0x200004a4
 8002ccc:	200003a4 	.word	0x200003a4
 8002cd0:	200004b0 	.word	0x200004b0
 8002cd4:	200004c0 	.word	0x200004c0
 8002cd8:	200004ac 	.word	0x200004ac
 8002cdc:	200003a8 	.word	0x200003a8
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <vTaskDelay+0x60>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <vTaskDelay+0x30>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	60bb      	str	r3, [r7, #8]
}
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d14:	f000 f884 	bl	8002e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d18:	2100      	movs	r1, #0
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fb4c 	bl	80033b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d20:	f000 f88c 	bl	8002e3c <xTaskResumeAll>
 8002d24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <vTaskDelay+0x64>)
 8002d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200004cc 	.word	0x200004cc
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d5a:	463a      	mov	r2, r7
 8002d5c:	1d39      	adds	r1, r7, #4
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fa34 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	9202      	str	r2, [sp, #8]
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	460a      	mov	r2, r1
 8002d7a:	4921      	ldr	r1, [pc, #132]	; (8002e00 <vTaskStartScheduler+0xb4>)
 8002d7c:	4821      	ldr	r0, [pc, #132]	; (8002e04 <vTaskStartScheduler+0xb8>)
 8002d7e:	f7ff fdfa 	bl	8002976 <xTaskCreateStatic>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <vTaskStartScheduler+0xbc>)
 8002d86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <vTaskStartScheduler+0xbc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e001      	b.n	8002d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d11b      	bne.n	8002dd8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	613b      	str	r3, [r7, #16]
}
 8002db2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <vTaskStartScheduler+0xc0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	334c      	adds	r3, #76	; 0x4c
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <vTaskStartScheduler+0xc4>)
 8002dbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <vTaskStartScheduler+0xc8>)
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <vTaskStartScheduler+0xcc>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <vTaskStartScheduler+0xd0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dd2:	f000 fbe5 	bl	80035a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dd6:	e00e      	b.n	8002df6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d10a      	bne.n	8002df6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60fb      	str	r3, [r7, #12]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <vTaskStartScheduler+0xa8>
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08004844 	.word	0x08004844
 8002e04:	080031c9 	.word	0x080031c9
 8002e08:	200004c8 	.word	0x200004c8
 8002e0c:	200003a4 	.word	0x200003a4
 8002e10:	20000010 	.word	0x20000010
 8002e14:	200004c4 	.word	0x200004c4
 8002e18:	200004b0 	.word	0x200004b0
 8002e1c:	200004a8 	.word	0x200004a8

08002e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <vTaskSuspendAll+0x18>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <vTaskSuspendAll+0x18>)
 8002e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	200004cc 	.word	0x200004cc

08002e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	603b      	str	r3, [r7, #0]
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e68:	f000 fc3c 	bl	80036e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e6c:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	4a37      	ldr	r2, [pc, #220]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d161      	bne.n	8002f42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e7e:	4b35      	ldr	r3, [pc, #212]	; (8002f54 <xTaskResumeAll+0x118>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d05d      	beq.n	8002f42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e86:	e02e      	b.n	8002ee6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e88:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <xTaskResumeAll+0x11c>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3318      	adds	r3, #24
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fd44 	bl	8002922 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fd3f 	bl	8002922 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <xTaskResumeAll+0x120>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <xTaskResumeAll+0x120>)
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <xTaskResumeAll+0x124>)
 8002ec4:	441a      	add	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f7ff fccb 	bl	8002868 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <xTaskResumeAll+0x128>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <xTaskResumeAll+0x12c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <xTaskResumeAll+0x11c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1cc      	bne.n	8002e88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ef4:	f000 fa22 	bl	800333c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <xTaskResumeAll+0x130>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f04:	f000 f846 	bl	8002f94 <xTaskIncrementTick>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <xTaskResumeAll+0x12c>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f1      	bne.n	8002f04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <xTaskResumeAll+0x130>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <xTaskResumeAll+0x12c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <xTaskResumeAll+0x134>)
 8002f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f42:	f000 fbff 	bl	8003744 <vPortExitCritical>

	return xAlreadyYielded;
 8002f46:	68bb      	ldr	r3, [r7, #8]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200004cc 	.word	0x200004cc
 8002f54:	200004a4 	.word	0x200004a4
 8002f58:	20000464 	.word	0x20000464
 8002f5c:	200004ac 	.word	0x200004ac
 8002f60:	200003a8 	.word	0x200003a8
 8002f64:	200003a4 	.word	0x200003a4
 8002f68:	200004b8 	.word	0x200004b8
 8002f6c:	200004b4 	.word	0x200004b4
 8002f70:	e000ed04 	.word	0xe000ed04

08002f74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <xTaskGetTickCount+0x1c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f80:	687b      	ldr	r3, [r7, #4]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	200004a8 	.word	0x200004a8

08002f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <xTaskIncrementTick+0x144>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 808e 	bne.w	80030c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <xTaskIncrementTick+0x148>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fb0:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <xTaskIncrementTick+0x148>)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d120      	bne.n	8002ffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <xTaskIncrementTick+0x14c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <xTaskIncrementTick+0x48>
	__asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	603b      	str	r3, [r7, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <xTaskIncrementTick+0x46>
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <xTaskIncrementTick+0x14c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <xTaskIncrementTick+0x150>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a3e      	ldr	r2, [pc, #248]	; (80030e0 <xTaskIncrementTick+0x14c>)
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4a3e      	ldr	r2, [pc, #248]	; (80030e4 <xTaskIncrementTick+0x150>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <xTaskIncrementTick+0x154>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a3c      	ldr	r2, [pc, #240]	; (80030e8 <xTaskIncrementTick+0x154>)
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	f000 f99f 	bl	800333c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <xTaskIncrementTick+0x158>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	429a      	cmp	r2, r3
 8003006:	d348      	bcc.n	800309a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <xTaskIncrementTick+0x14c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d104      	bne.n	800301c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003012:	4b36      	ldr	r3, [pc, #216]	; (80030ec <xTaskIncrementTick+0x158>)
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	601a      	str	r2, [r3, #0]
					break;
 800301a:	e03e      	b.n	800309a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <xTaskIncrementTick+0x14c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	d203      	bcs.n	800303c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003034:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <xTaskIncrementTick+0x158>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800303a:	e02e      	b.n	800309a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3304      	adds	r3, #4
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fc6e 	bl	8002922 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3318      	adds	r3, #24
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fc65 	bl	8002922 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <xTaskIncrementTick+0x15c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <xTaskIncrementTick+0x15c>)
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <xTaskIncrementTick+0x160>)
 8003078:	441a      	add	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3304      	adds	r3, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f7ff fbf1 	bl	8002868 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <xTaskIncrementTick+0x164>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d3b9      	bcc.n	8003008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003098:	e7b6      	b.n	8003008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <xTaskIncrementTick+0x164>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4914      	ldr	r1, [pc, #80]	; (80030f4 <xTaskIncrementTick+0x160>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d901      	bls.n	80030b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <xTaskIncrementTick+0x168>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80030be:	2301      	movs	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	e004      	b.n	80030ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <xTaskIncrementTick+0x16c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a0d      	ldr	r2, [pc, #52]	; (8003100 <xTaskIncrementTick+0x16c>)
 80030cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200004cc 	.word	0x200004cc
 80030dc:	200004a8 	.word	0x200004a8
 80030e0:	2000045c 	.word	0x2000045c
 80030e4:	20000460 	.word	0x20000460
 80030e8:	200004bc 	.word	0x200004bc
 80030ec:	200004c4 	.word	0x200004c4
 80030f0:	200004ac 	.word	0x200004ac
 80030f4:	200003a8 	.word	0x200003a8
 80030f8:	200003a4 	.word	0x200003a4
 80030fc:	200004b8 	.word	0x200004b8
 8003100:	200004b4 	.word	0x200004b4

08003104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <vTaskSwitchContext+0xac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <vTaskSwitchContext+0xb0>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003118:	e044      	b.n	80031a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <vTaskSwitchContext+0xb0>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <vTaskSwitchContext+0xb4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f1c3 031f 	rsb	r3, r3, #31
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	4921      	ldr	r1, [pc, #132]	; (80031bc <vTaskSwitchContext+0xb8>)
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <vTaskSwitchContext+0x5c>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	607b      	str	r3, [r7, #4]
}
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <vTaskSwitchContext+0x5a>
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <vTaskSwitchContext+0xb8>)
 800316c:	4413      	add	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	3308      	adds	r3, #8
 8003182:	429a      	cmp	r2, r3
 8003184:	d104      	bne.n	8003190 <vTaskSwitchContext+0x8c>
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <vTaskSwitchContext+0xbc>)
 8003198:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <vTaskSwitchContext+0xbc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	334c      	adds	r3, #76	; 0x4c
 80031a0:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <vTaskSwitchContext+0xc0>)
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	200004cc 	.word	0x200004cc
 80031b4:	200004b8 	.word	0x200004b8
 80031b8:	200004ac 	.word	0x200004ac
 80031bc:	200003a8 	.word	0x200003a8
 80031c0:	200003a4 	.word	0x200003a4
 80031c4:	20000010 	.word	0x20000010

080031c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031d0:	f000 f852 	bl	8003278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <prvIdleTask+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d9f9      	bls.n	80031d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <prvIdleTask+0x2c>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031ec:	e7f0      	b.n	80031d0 <prvIdleTask+0x8>
 80031ee:	bf00      	nop
 80031f0:	200003a8 	.word	0x200003a8
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	e00c      	b.n	800321e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <prvInitialiseTaskLists+0x60>)
 8003210:	4413      	add	r3, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fafb 	bl	800280e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d9ef      	bls.n	8003204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <prvInitialiseTaskLists+0x64>)
 8003226:	f7ff faf2 	bl	800280e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800322a:	480d      	ldr	r0, [pc, #52]	; (8003260 <prvInitialiseTaskLists+0x68>)
 800322c:	f7ff faef 	bl	800280e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <prvInitialiseTaskLists+0x6c>)
 8003232:	f7ff faec 	bl	800280e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003236:	480c      	ldr	r0, [pc, #48]	; (8003268 <prvInitialiseTaskLists+0x70>)
 8003238:	f7ff fae9 	bl	800280e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800323c:	480b      	ldr	r0, [pc, #44]	; (800326c <prvInitialiseTaskLists+0x74>)
 800323e:	f7ff fae6 	bl	800280e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <prvInitialiseTaskLists+0x78>)
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <prvInitialiseTaskLists+0x64>)
 8003246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <prvInitialiseTaskLists+0x7c>)
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <prvInitialiseTaskLists+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200003a8 	.word	0x200003a8
 800325c:	20000434 	.word	0x20000434
 8003260:	20000448 	.word	0x20000448
 8003264:	20000464 	.word	0x20000464
 8003268:	20000478 	.word	0x20000478
 800326c:	20000490 	.word	0x20000490
 8003270:	2000045c 	.word	0x2000045c
 8003274:	20000460 	.word	0x20000460

08003278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800327e:	e019      	b.n	80032b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003280:	f000 fa30 	bl	80036e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <prvCheckTasksWaitingTermination+0x50>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb46 	bl	8002922 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <prvCheckTasksWaitingTermination+0x54>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <prvCheckTasksWaitingTermination+0x54>)
 800329e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032aa:	f000 fa4b 	bl	8003744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f810 	bl	80032d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e1      	bne.n	8003280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000478 	.word	0x20000478
 80032cc:	200004a4 	.word	0x200004a4
 80032d0:	2000048c 	.word	0x2000048c

080032d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	334c      	adds	r3, #76	; 0x4c
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 ff0f 	bl	8004104 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fba3 	bl	8003a40 <vPortFree>
				vPortFree( pxTCB );
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fba0 	bl	8003a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003300:	e018      	b.n	8003334 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d103      	bne.n	8003314 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb97 	bl	8003a40 <vPortFree>
	}
 8003312:	e00f      	b.n	8003334 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800331a:	2b02      	cmp	r3, #2
 800331c:	d00a      	beq.n	8003334 <prvDeleteTCB+0x60>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <prvDeleteTCB+0x5e>
	}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <prvResetNextTaskUnblockTime+0x38>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <prvResetNextTaskUnblockTime+0x3c>)
 800334e:	f04f 32ff 	mov.w	r2, #4294967295
 8003352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003354:	e008      	b.n	8003368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <prvResetNextTaskUnblockTime+0x38>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <prvResetNextTaskUnblockTime+0x3c>)
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	2000045c 	.word	0x2000045c
 8003378:	200004c4 	.word	0x200004c4

0800337c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <xTaskGetSchedulerState+0x34>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800338a:	2301      	movs	r3, #1
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	e008      	b.n	80033a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <xTaskGetSchedulerState+0x38>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003398:	2302      	movs	r3, #2
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	e001      	b.n	80033a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033a2:	687b      	ldr	r3, [r7, #4]
	}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	200004b0 	.word	0x200004b0
 80033b4:	200004cc 	.word	0x200004cc

080033b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033c2:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80033c8:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff faa2 	bl	8002922 <uxListRemove>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	2201      	movs	r2, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43da      	mvns	r2, r3
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4013      	ands	r3, r2
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033fa:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d10a      	bne.n	800341a <prvAddCurrentTaskToDelayedList+0x62>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	481a      	ldr	r0, [pc, #104]	; (800347c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003414:	f7ff fa28 	bl	8002868 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003418:	e026      	b.n	8003468 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	429a      	cmp	r2, r3
 8003430:	d209      	bcs.n	8003446 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f7ff fa36 	bl	80028b0 <vListInsert>
}
 8003444:	e010      	b.n	8003468 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003446:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <prvAddCurrentTaskToDelayedList+0xbc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7ff fa2c 	bl	80028b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <prvAddCurrentTaskToDelayedList+0xd0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d202      	bcs.n	8003468 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200004a8 	.word	0x200004a8
 8003474:	200003a4 	.word	0x200003a4
 8003478:	200004ac 	.word	0x200004ac
 800347c:	20000490 	.word	0x20000490
 8003480:	20000460 	.word	0x20000460
 8003484:	2000045c 	.word	0x2000045c
 8003488:	200004c4 	.word	0x200004c4

0800348c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3b04      	subs	r3, #4
 800349c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3b04      	subs	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b04      	subs	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <pxPortInitialiseStack+0x64>)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b14      	subs	r3, #20
 80034c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b04      	subs	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f06f 0202 	mvn.w	r2, #2
 80034da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3b20      	subs	r3, #32
 80034e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	080034f5 	.word	0x080034f5

080034f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <prvTaskExitError+0x54>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d00a      	beq.n	800351e <prvTaskExitError+0x2a>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	60fb      	str	r3, [r7, #12]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <prvTaskExitError+0x28>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60bb      	str	r3, [r7, #8]
}
 8003530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003532:	bf00      	nop
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0fc      	beq.n	8003534 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	2000000c 	.word	0x2000000c
 800354c:	00000000 	.word	0x00000000

08003550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <pxCurrentTCBConst2>)
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	6808      	ldr	r0, [r1, #0]
 8003556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355a:	f380 8809 	msr	PSP, r0
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f380 8811 	msr	BASEPRI, r0
 800356a:	4770      	bx	lr
 800356c:	f3af 8000 	nop.w

08003570 <pxCurrentTCBConst2>:
 8003570:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <prvPortStartFirstTask+0x24>)
 800357a:	6800      	ldr	r0, [r0, #0]
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	f380 8808 	msr	MSP, r0
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8814 	msr	CONTROL, r0
 800358a:	b662      	cpsie	i
 800358c:	b661      	cpsie	f
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	df00      	svc	0
 8003598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800359a:	bf00      	nop
 800359c:	e000ed08 	.word	0xe000ed08

080035a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <xPortStartScheduler+0x120>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <xPortStartScheduler+0x124>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10a      	bne.n	80035c6 <xPortStartScheduler+0x26>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	613b      	str	r3, [r7, #16]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <xPortStartScheduler+0x120>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <xPortStartScheduler+0x128>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10a      	bne.n	80035e6 <xPortStartScheduler+0x46>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	60fb      	str	r3, [r7, #12]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <xPortStartScheduler+0x12c>)
 80035e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <xPortStartScheduler+0x130>)
 800360c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <xPortStartScheduler+0x134>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003614:	e009      	b.n	800362a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003616:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <xPortStartScheduler+0x134>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	4a2d      	ldr	r2, [pc, #180]	; (80036d4 <xPortStartScheduler+0x134>)
 800361e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d0ef      	beq.n	8003616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003636:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <xPortStartScheduler+0x134>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1c3 0307 	rsb	r3, r3, #7
 800363e:	2b04      	cmp	r3, #4
 8003640:	d00a      	beq.n	8003658 <xPortStartScheduler+0xb8>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60bb      	str	r3, [r7, #8]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003658:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <xPortStartScheduler+0x134>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <xPortStartScheduler+0x134>)
 8003660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <xPortStartScheduler+0x134>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <xPortStartScheduler+0x134>)
 800366c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <xPortStartScheduler+0x138>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <xPortStartScheduler+0x138>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <xPortStartScheduler+0x138>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <xPortStartScheduler+0x138>)
 8003688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800368c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800368e:	f000 f8dd 	bl	800384c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <xPortStartScheduler+0x13c>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003698:	f000 f8fc 	bl	8003894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <xPortStartScheduler+0x140>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <xPortStartScheduler+0x140>)
 80036a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036a8:	f7ff ff66 	bl	8003578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036ac:	f7ff fd2a 	bl	8003104 <vTaskSwitchContext>
	prvTaskExitError();
 80036b0:	f7ff ff20 	bl	80034f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00
 80036c4:	410fc271 	.word	0x410fc271
 80036c8:	410fc270 	.word	0x410fc270
 80036cc:	e000e400 	.word	0xe000e400
 80036d0:	200004d0 	.word	0x200004d0
 80036d4:	200004d4 	.word	0x200004d4
 80036d8:	e000ed20 	.word	0xe000ed20
 80036dc:	2000000c 	.word	0x2000000c
 80036e0:	e000ef34 	.word	0xe000ef34

080036e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	607b      	str	r3, [r7, #4]
}
 80036fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <vPortEnterCritical+0x58>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <vPortEnterCritical+0x58>)
 8003706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <vPortEnterCritical+0x58>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10f      	bne.n	8003730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <vPortEnterCritical+0x5c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <vPortEnterCritical+0x4c>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	603b      	str	r3, [r7, #0]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <vPortEnterCritical+0x4a>
	}
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	2000000c 	.word	0x2000000c
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <vPortExitCritical+0x50>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <vPortExitCritical+0x24>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
}
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <vPortExitCritical+0x50>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3b01      	subs	r3, #1
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <vPortExitCritical+0x50>)
 8003770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <vPortExitCritical+0x50>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d105      	bne.n	8003786 <vPortExitCritical+0x42>
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000000c 	.word	0x2000000c
	...

080037a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037a0:	f3ef 8009 	mrs	r0, PSP
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <pxCurrentTCBConst>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f01e 0f10 	tst.w	lr, #16
 80037b0:	bf08      	it	eq
 80037b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ba:	6010      	str	r0, [r2, #0]
 80037bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037c4:	f380 8811 	msr	BASEPRI, r0
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f7ff fc98 	bl	8003104 <vTaskSwitchContext>
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	f380 8811 	msr	BASEPRI, r0
 80037dc:	bc09      	pop	{r0, r3}
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	6808      	ldr	r0, [r1, #0]
 80037e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e6:	f01e 0f10 	tst.w	lr, #16
 80037ea:	bf08      	it	eq
 80037ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037f0:	f380 8809 	msr	PSP, r0
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst>:
 8003800:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop

08003808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	607b      	str	r3, [r7, #4]
}
 8003820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003822:	f7ff fbb7 	bl	8002f94 <xTaskIncrementTick>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <xPortSysTickHandler+0x40>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f383 8811 	msr	BASEPRI, r3
}
 800383e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <vPortSetupTimerInterrupt+0x34>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <vPortSetupTimerInterrupt+0x38>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vPortSetupTimerInterrupt+0x3c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <vPortSetupTimerInterrupt+0x40>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <vPortSetupTimerInterrupt+0x44>)
 800386a:	3b01      	subs	r3, #1
 800386c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vPortSetupTimerInterrupt+0x34>)
 8003870:	2207      	movs	r2, #7
 8003872:	601a      	str	r2, [r3, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e010 	.word	0xe000e010
 8003884:	e000e018 	.word	0xe000e018
 8003888:	20000000 	.word	0x20000000
 800388c:	10624dd3 	.word	0x10624dd3
 8003890:	e000e014 	.word	0xe000e014

08003894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038a4 <vPortEnableVFP+0x10>
 8003898:	6801      	ldr	r1, [r0, #0]
 800389a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800389e:	6001      	str	r1, [r0, #0]
 80038a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038a2:	bf00      	nop
 80038a4:	e000ed88 	.word	0xe000ed88

080038a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038b4:	f7ff fab4 	bl	8002e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038b8:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <pvPortMalloc+0x180>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038c0:	f000 f920 	bl	8003b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <pvPortMalloc+0x184>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8093 	bne.w	80039f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01d      	beq.n	8003914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80038d8:	2208      	movs	r2, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d014      	beq.n	8003914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f023 0307 	bic.w	r3, r3, #7
 80038f0:	3308      	adds	r3, #8
 80038f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <pvPortMalloc+0x6c>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	617b      	str	r3, [r7, #20]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d06e      	beq.n	80039f8 <pvPortMalloc+0x150>
 800391a:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <pvPortMalloc+0x188>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d869      	bhi.n	80039f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003924:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <pvPortMalloc+0x18c>)
 8003926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003928:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <pvPortMalloc+0x18c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800392e:	e004      	b.n	800393a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	d903      	bls.n	800394c <pvPortMalloc+0xa4>
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f1      	bne.n	8003930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <pvPortMalloc+0x180>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	429a      	cmp	r2, r3
 8003954:	d050      	beq.n	80039f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2208      	movs	r2, #8
 800395c:	4413      	add	r3, r2
 800395e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	2308      	movs	r3, #8
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	429a      	cmp	r2, r3
 8003976:	d91f      	bls.n	80039b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <pvPortMalloc+0xf8>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	613b      	str	r3, [r7, #16]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	1ad2      	subs	r2, r2, r3
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039b2:	69b8      	ldr	r0, [r7, #24]
 80039b4:	f000 f908 	bl	8003bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <pvPortMalloc+0x188>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <pvPortMalloc+0x188>)
 80039c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <pvPortMalloc+0x188>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <pvPortMalloc+0x190>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d203      	bcs.n	80039da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <pvPortMalloc+0x188>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <pvPortMalloc+0x190>)
 80039d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <pvPortMalloc+0x184>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <pvPortMalloc+0x194>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <pvPortMalloc+0x194>)
 80039f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039f8:	f7ff fa20 	bl	8002e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <pvPortMalloc+0x174>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	60fb      	str	r3, [r7, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <pvPortMalloc+0x172>
	return pvReturn;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20001098 	.word	0x20001098
 8003a2c:	200010ac 	.word	0x200010ac
 8003a30:	2000109c 	.word	0x2000109c
 8003a34:	20001090 	.word	0x20001090
 8003a38:	200010a0 	.word	0x200010a0
 8003a3c:	200010a4 	.word	0x200010a4

08003a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d04d      	beq.n	8003aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a52:	2308      	movs	r3, #8
 8003a54:	425b      	negs	r3, r3
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <vPortFree+0xb8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <vPortFree+0x44>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60fb      	str	r3, [r7, #12]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <vPortFree+0x62>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60bb      	str	r3, [r7, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <vPortFree+0xb8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01e      	beq.n	8003aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11a      	bne.n	8003aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <vPortFree+0xb8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ac8:	f7ff f9aa 	bl	8002e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <vPortFree+0xbc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <vPortFree+0xbc>)
 8003ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ada:	6938      	ldr	r0, [r7, #16]
 8003adc:	f000 f874 	bl	8003bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <vPortFree+0xc0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <vPortFree+0xc0>)
 8003ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003aea:	f7ff f9a7 	bl	8002e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	200010ac 	.word	0x200010ac
 8003afc:	2000109c 	.word	0x2000109c
 8003b00:	200010a8 	.word	0x200010a8

08003b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <prvHeapInit+0xac>)
 8003b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3307      	adds	r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0307 	bic.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <prvHeapInit+0xac>)
 8003b34:	4413      	add	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <prvHeapInit+0xb0>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <prvHeapInit+0xb0>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b50:	2208      	movs	r2, #8
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <prvHeapInit+0xb8>)
 8003b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <prvHeapInit+0xbc>)
 8003b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <prvHeapInit+0xc0>)
 8003b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	200004d8 	.word	0x200004d8
 8003bb4:	20001090 	.word	0x20001090
 8003bb8:	20001098 	.word	0x20001098
 8003bbc:	200010a0 	.word	0x200010a0
 8003bc0:	2000109c 	.word	0x2000109c
 8003bc4:	200010ac 	.word	0x200010ac

08003bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bd0:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <prvInsertBlockIntoFreeList+0xac>)
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e002      	b.n	8003bdc <prvInsertBlockIntoFreeList+0x14>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d8f7      	bhi.n	8003bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d108      	bne.n	8003c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	441a      	add	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d118      	bne.n	8003c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <prvInsertBlockIntoFreeList+0xb0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d00d      	beq.n	8003c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e008      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <prvInsertBlockIntoFreeList+0xb0>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e003      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d002      	beq.n	8003c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20001090 	.word	0x20001090
 8003c78:	20001098 	.word	0x20001098

08003c7c <__errno>:
 8003c7c:	4b01      	ldr	r3, [pc, #4]	; (8003c84 <__errno+0x8>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000010 	.word	0x20000010

08003c88 <std>:
 8003c88:	2300      	movs	r3, #0
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c96:	6083      	str	r3, [r0, #8]
 8003c98:	8181      	strh	r1, [r0, #12]
 8003c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c9c:	81c2      	strh	r2, [r0, #14]
 8003c9e:	6183      	str	r3, [r0, #24]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	305c      	adds	r0, #92	; 0x5c
 8003ca6:	f000 f90c 	bl	8003ec2 <memset>
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <std+0x38>)
 8003cac:	6263      	str	r3, [r4, #36]	; 0x24
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <std+0x3c>)
 8003cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <std+0x40>)
 8003cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <std+0x44>)
 8003cb8:	6224      	str	r4, [r4, #32]
 8003cba:	6323      	str	r3, [r4, #48]	; 0x30
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	bf00      	nop
 8003cc0:	080041dd 	.word	0x080041dd
 8003cc4:	080041ff 	.word	0x080041ff
 8003cc8:	08004237 	.word	0x08004237
 8003ccc:	0800425b 	.word	0x0800425b

08003cd0 <_cleanup_r>:
 8003cd0:	4901      	ldr	r1, [pc, #4]	; (8003cd8 <_cleanup_r+0x8>)
 8003cd2:	f000 b8af 	b.w	8003e34 <_fwalk_reent>
 8003cd6:	bf00      	nop
 8003cd8:	08004535 	.word	0x08004535

08003cdc <__sfmoreglue>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	2268      	movs	r2, #104	; 0x68
 8003ce0:	1e4d      	subs	r5, r1, #1
 8003ce2:	4355      	muls	r5, r2
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cea:	f000 f913 	bl	8003f14 <_malloc_r>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	b140      	cbz	r0, 8003d04 <__sfmoreglue+0x28>
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8003cf8:	300c      	adds	r0, #12
 8003cfa:	60a0      	str	r0, [r4, #8]
 8003cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d00:	f000 f8df 	bl	8003ec2 <memset>
 8003d04:	4620      	mov	r0, r4
 8003d06:	bd70      	pop	{r4, r5, r6, pc}

08003d08 <__sfp_lock_acquire>:
 8003d08:	4801      	ldr	r0, [pc, #4]	; (8003d10 <__sfp_lock_acquire+0x8>)
 8003d0a:	f000 b8d8 	b.w	8003ebe <__retarget_lock_acquire_recursive>
 8003d0e:	bf00      	nop
 8003d10:	200010b1 	.word	0x200010b1

08003d14 <__sfp_lock_release>:
 8003d14:	4801      	ldr	r0, [pc, #4]	; (8003d1c <__sfp_lock_release+0x8>)
 8003d16:	f000 b8d3 	b.w	8003ec0 <__retarget_lock_release_recursive>
 8003d1a:	bf00      	nop
 8003d1c:	200010b1 	.word	0x200010b1

08003d20 <__sinit_lock_acquire>:
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <__sinit_lock_acquire+0x8>)
 8003d22:	f000 b8cc 	b.w	8003ebe <__retarget_lock_acquire_recursive>
 8003d26:	bf00      	nop
 8003d28:	200010b2 	.word	0x200010b2

08003d2c <__sinit_lock_release>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <__sinit_lock_release+0x8>)
 8003d2e:	f000 b8c7 	b.w	8003ec0 <__retarget_lock_release_recursive>
 8003d32:	bf00      	nop
 8003d34:	200010b2 	.word	0x200010b2

08003d38 <__sinit>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	f7ff fff0 	bl	8003d20 <__sinit_lock_acquire>
 8003d40:	69a3      	ldr	r3, [r4, #24]
 8003d42:	b11b      	cbz	r3, 8003d4c <__sinit+0x14>
 8003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d48:	f7ff bff0 	b.w	8003d2c <__sinit_lock_release>
 8003d4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d50:	6523      	str	r3, [r4, #80]	; 0x50
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <__sinit+0x68>)
 8003d54:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <__sinit+0x6c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	bf04      	itt	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	61a3      	streq	r3, [r4, #24]
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 f820 	bl	8003da8 <__sfp>
 8003d68:	6060      	str	r0, [r4, #4]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f000 f81c 	bl	8003da8 <__sfp>
 8003d70:	60a0      	str	r0, [r4, #8]
 8003d72:	4620      	mov	r0, r4
 8003d74:	f000 f818 	bl	8003da8 <__sfp>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	60e0      	str	r0, [r4, #12]
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	6860      	ldr	r0, [r4, #4]
 8003d80:	f7ff ff82 	bl	8003c88 <std>
 8003d84:	68a0      	ldr	r0, [r4, #8]
 8003d86:	2201      	movs	r2, #1
 8003d88:	2109      	movs	r1, #9
 8003d8a:	f7ff ff7d 	bl	8003c88 <std>
 8003d8e:	68e0      	ldr	r0, [r4, #12]
 8003d90:	2202      	movs	r2, #2
 8003d92:	2112      	movs	r1, #18
 8003d94:	f7ff ff78 	bl	8003c88 <std>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	61a3      	str	r3, [r4, #24]
 8003d9c:	e7d2      	b.n	8003d44 <__sinit+0xc>
 8003d9e:	bf00      	nop
 8003da0:	080048ec 	.word	0x080048ec
 8003da4:	08003cd1 	.word	0x08003cd1

08003da8 <__sfp>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	4607      	mov	r7, r0
 8003dac:	f7ff ffac 	bl	8003d08 <__sfp_lock_acquire>
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <__sfp+0x84>)
 8003db2:	681e      	ldr	r6, [r3, #0]
 8003db4:	69b3      	ldr	r3, [r6, #24]
 8003db6:	b913      	cbnz	r3, 8003dbe <__sfp+0x16>
 8003db8:	4630      	mov	r0, r6
 8003dba:	f7ff ffbd 	bl	8003d38 <__sinit>
 8003dbe:	3648      	adds	r6, #72	; 0x48
 8003dc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	d503      	bpl.n	8003dd0 <__sfp+0x28>
 8003dc8:	6833      	ldr	r3, [r6, #0]
 8003dca:	b30b      	cbz	r3, 8003e10 <__sfp+0x68>
 8003dcc:	6836      	ldr	r6, [r6, #0]
 8003dce:	e7f7      	b.n	8003dc0 <__sfp+0x18>
 8003dd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dd4:	b9d5      	cbnz	r5, 8003e0c <__sfp+0x64>
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <__sfp+0x88>)
 8003dd8:	60e3      	str	r3, [r4, #12]
 8003dda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dde:	6665      	str	r5, [r4, #100]	; 0x64
 8003de0:	f000 f86c 	bl	8003ebc <__retarget_lock_init_recursive>
 8003de4:	f7ff ff96 	bl	8003d14 <__sfp_lock_release>
 8003de8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003df0:	6025      	str	r5, [r4, #0]
 8003df2:	61a5      	str	r5, [r4, #24]
 8003df4:	2208      	movs	r2, #8
 8003df6:	4629      	mov	r1, r5
 8003df8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dfc:	f000 f861 	bl	8003ec2 <memset>
 8003e00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0c:	3468      	adds	r4, #104	; 0x68
 8003e0e:	e7d9      	b.n	8003dc4 <__sfp+0x1c>
 8003e10:	2104      	movs	r1, #4
 8003e12:	4638      	mov	r0, r7
 8003e14:	f7ff ff62 	bl	8003cdc <__sfmoreglue>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	6030      	str	r0, [r6, #0]
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d1d5      	bne.n	8003dcc <__sfp+0x24>
 8003e20:	f7ff ff78 	bl	8003d14 <__sfp_lock_release>
 8003e24:	230c      	movs	r3, #12
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	e7ee      	b.n	8003e08 <__sfp+0x60>
 8003e2a:	bf00      	nop
 8003e2c:	080048ec 	.word	0x080048ec
 8003e30:	ffff0001 	.word	0xffff0001

08003e34 <_fwalk_reent>:
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e38:	4606      	mov	r6, r0
 8003e3a:	4688      	mov	r8, r1
 8003e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e40:	2700      	movs	r7, #0
 8003e42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e46:	f1b9 0901 	subs.w	r9, r9, #1
 8003e4a:	d505      	bpl.n	8003e58 <_fwalk_reent+0x24>
 8003e4c:	6824      	ldr	r4, [r4, #0]
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d1f7      	bne.n	8003e42 <_fwalk_reent+0xe>
 8003e52:	4638      	mov	r0, r7
 8003e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e58:	89ab      	ldrh	r3, [r5, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d907      	bls.n	8003e6e <_fwalk_reent+0x3a>
 8003e5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e62:	3301      	adds	r3, #1
 8003e64:	d003      	beq.n	8003e6e <_fwalk_reent+0x3a>
 8003e66:	4629      	mov	r1, r5
 8003e68:	4630      	mov	r0, r6
 8003e6a:	47c0      	blx	r8
 8003e6c:	4307      	orrs	r7, r0
 8003e6e:	3568      	adds	r5, #104	; 0x68
 8003e70:	e7e9      	b.n	8003e46 <_fwalk_reent+0x12>
	...

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	4d0d      	ldr	r5, [pc, #52]	; (8003eac <__libc_init_array+0x38>)
 8003e78:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7a:	1b64      	subs	r4, r4, r5
 8003e7c:	10a4      	asrs	r4, r4, #2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	4d0b      	ldr	r5, [pc, #44]	; (8003eb4 <__libc_init_array+0x40>)
 8003e86:	4c0c      	ldr	r4, [pc, #48]	; (8003eb8 <__libc_init_array+0x44>)
 8003e88:	f000 fc94 	bl	80047b4 <_init>
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	2600      	movs	r6, #0
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	080048f0 	.word	0x080048f0
 8003eb0:	080048f0 	.word	0x080048f0
 8003eb4:	080048f0 	.word	0x080048f0
 8003eb8:	080048f4 	.word	0x080048f4

08003ebc <__retarget_lock_init_recursive>:
 8003ebc:	4770      	bx	lr

08003ebe <__retarget_lock_acquire_recursive>:
 8003ebe:	4770      	bx	lr

08003ec0 <__retarget_lock_release_recursive>:
 8003ec0:	4770      	bx	lr

08003ec2 <memset>:
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <memset+0xa>
 8003eca:	4770      	bx	lr
 8003ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed0:	e7f9      	b.n	8003ec6 <memset+0x4>
	...

08003ed4 <sbrk_aligned>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4e0e      	ldr	r6, [pc, #56]	; (8003f10 <sbrk_aligned+0x3c>)
 8003ed8:	460c      	mov	r4, r1
 8003eda:	6831      	ldr	r1, [r6, #0]
 8003edc:	4605      	mov	r5, r0
 8003ede:	b911      	cbnz	r1, 8003ee6 <sbrk_aligned+0x12>
 8003ee0:	f000 f96c 	bl	80041bc <_sbrk_r>
 8003ee4:	6030      	str	r0, [r6, #0]
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f000 f967 	bl	80041bc <_sbrk_r>
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d00a      	beq.n	8003f08 <sbrk_aligned+0x34>
 8003ef2:	1cc4      	adds	r4, r0, #3
 8003ef4:	f024 0403 	bic.w	r4, r4, #3
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d007      	beq.n	8003f0c <sbrk_aligned+0x38>
 8003efc:	1a21      	subs	r1, r4, r0
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 f95c 	bl	80041bc <_sbrk_r>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d101      	bne.n	8003f0c <sbrk_aligned+0x38>
 8003f08:	f04f 34ff 	mov.w	r4, #4294967295
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	200010b8 	.word	0x200010b8

08003f14 <_malloc_r>:
 8003f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f18:	1ccd      	adds	r5, r1, #3
 8003f1a:	f025 0503 	bic.w	r5, r5, #3
 8003f1e:	3508      	adds	r5, #8
 8003f20:	2d0c      	cmp	r5, #12
 8003f22:	bf38      	it	cc
 8003f24:	250c      	movcc	r5, #12
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	4607      	mov	r7, r0
 8003f2a:	db01      	blt.n	8003f30 <_malloc_r+0x1c>
 8003f2c:	42a9      	cmp	r1, r5
 8003f2e:	d905      	bls.n	8003f3c <_malloc_r+0x28>
 8003f30:	230c      	movs	r3, #12
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	2600      	movs	r6, #0
 8003f36:	4630      	mov	r0, r6
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	4e2e      	ldr	r6, [pc, #184]	; (8003ff8 <_malloc_r+0xe4>)
 8003f3e:	f000 fbad 	bl	800469c <__malloc_lock>
 8003f42:	6833      	ldr	r3, [r6, #0]
 8003f44:	461c      	mov	r4, r3
 8003f46:	bb34      	cbnz	r4, 8003f96 <_malloc_r+0x82>
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff ffc2 	bl	8003ed4 <sbrk_aligned>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	4604      	mov	r4, r0
 8003f54:	d14d      	bne.n	8003ff2 <_malloc_r+0xde>
 8003f56:	6834      	ldr	r4, [r6, #0]
 8003f58:	4626      	mov	r6, r4
 8003f5a:	2e00      	cmp	r6, #0
 8003f5c:	d140      	bne.n	8003fe0 <_malloc_r+0xcc>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	4631      	mov	r1, r6
 8003f62:	4638      	mov	r0, r7
 8003f64:	eb04 0803 	add.w	r8, r4, r3
 8003f68:	f000 f928 	bl	80041bc <_sbrk_r>
 8003f6c:	4580      	cmp	r8, r0
 8003f6e:	d13a      	bne.n	8003fe6 <_malloc_r+0xd2>
 8003f70:	6821      	ldr	r1, [r4, #0]
 8003f72:	3503      	adds	r5, #3
 8003f74:	1a6d      	subs	r5, r5, r1
 8003f76:	f025 0503 	bic.w	r5, r5, #3
 8003f7a:	3508      	adds	r5, #8
 8003f7c:	2d0c      	cmp	r5, #12
 8003f7e:	bf38      	it	cc
 8003f80:	250c      	movcc	r5, #12
 8003f82:	4629      	mov	r1, r5
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7ff ffa5 	bl	8003ed4 <sbrk_aligned>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d02b      	beq.n	8003fe6 <_malloc_r+0xd2>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	442b      	add	r3, r5
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	e00e      	b.n	8003fb4 <_malloc_r+0xa0>
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	1b52      	subs	r2, r2, r5
 8003f9a:	d41e      	bmi.n	8003fda <_malloc_r+0xc6>
 8003f9c:	2a0b      	cmp	r2, #11
 8003f9e:	d916      	bls.n	8003fce <_malloc_r+0xba>
 8003fa0:	1961      	adds	r1, r4, r5
 8003fa2:	42a3      	cmp	r3, r4
 8003fa4:	6025      	str	r5, [r4, #0]
 8003fa6:	bf18      	it	ne
 8003fa8:	6059      	strne	r1, [r3, #4]
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	bf08      	it	eq
 8003fae:	6031      	streq	r1, [r6, #0]
 8003fb0:	5162      	str	r2, [r4, r5]
 8003fb2:	604b      	str	r3, [r1, #4]
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f104 060b 	add.w	r6, r4, #11
 8003fba:	f000 fb75 	bl	80046a8 <__malloc_unlock>
 8003fbe:	f026 0607 	bic.w	r6, r6, #7
 8003fc2:	1d23      	adds	r3, r4, #4
 8003fc4:	1af2      	subs	r2, r6, r3
 8003fc6:	d0b6      	beq.n	8003f36 <_malloc_r+0x22>
 8003fc8:	1b9b      	subs	r3, r3, r6
 8003fca:	50a3      	str	r3, [r4, r2]
 8003fcc:	e7b3      	b.n	8003f36 <_malloc_r+0x22>
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	bf0c      	ite	eq
 8003fd4:	6032      	streq	r2, [r6, #0]
 8003fd6:	605a      	strne	r2, [r3, #4]
 8003fd8:	e7ec      	b.n	8003fb4 <_malloc_r+0xa0>
 8003fda:	4623      	mov	r3, r4
 8003fdc:	6864      	ldr	r4, [r4, #4]
 8003fde:	e7b2      	b.n	8003f46 <_malloc_r+0x32>
 8003fe0:	4634      	mov	r4, r6
 8003fe2:	6876      	ldr	r6, [r6, #4]
 8003fe4:	e7b9      	b.n	8003f5a <_malloc_r+0x46>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4638      	mov	r0, r7
 8003fec:	f000 fb5c 	bl	80046a8 <__malloc_unlock>
 8003ff0:	e7a1      	b.n	8003f36 <_malloc_r+0x22>
 8003ff2:	6025      	str	r5, [r4, #0]
 8003ff4:	e7de      	b.n	8003fb4 <_malloc_r+0xa0>
 8003ff6:	bf00      	nop
 8003ff8:	200010b4 	.word	0x200010b4

08003ffc <_puts_r>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	460e      	mov	r6, r1
 8004000:	4605      	mov	r5, r0
 8004002:	b118      	cbz	r0, 800400c <_puts_r+0x10>
 8004004:	6983      	ldr	r3, [r0, #24]
 8004006:	b90b      	cbnz	r3, 800400c <_puts_r+0x10>
 8004008:	f7ff fe96 	bl	8003d38 <__sinit>
 800400c:	69ab      	ldr	r3, [r5, #24]
 800400e:	68ac      	ldr	r4, [r5, #8]
 8004010:	b913      	cbnz	r3, 8004018 <_puts_r+0x1c>
 8004012:	4628      	mov	r0, r5
 8004014:	f7ff fe90 	bl	8003d38 <__sinit>
 8004018:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <_puts_r+0xd0>)
 800401a:	429c      	cmp	r4, r3
 800401c:	d120      	bne.n	8004060 <_puts_r+0x64>
 800401e:	686c      	ldr	r4, [r5, #4]
 8004020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004022:	07db      	lsls	r3, r3, #31
 8004024:	d405      	bmi.n	8004032 <_puts_r+0x36>
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	0598      	lsls	r0, r3, #22
 800402a:	d402      	bmi.n	8004032 <_puts_r+0x36>
 800402c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402e:	f7ff ff46 	bl	8003ebe <__retarget_lock_acquire_recursive>
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	0719      	lsls	r1, r3, #28
 8004036:	d51d      	bpl.n	8004074 <_puts_r+0x78>
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	b1db      	cbz	r3, 8004074 <_puts_r+0x78>
 800403c:	3e01      	subs	r6, #1
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004044:	3b01      	subs	r3, #1
 8004046:	60a3      	str	r3, [r4, #8]
 8004048:	bb39      	cbnz	r1, 800409a <_puts_r+0x9e>
 800404a:	2b00      	cmp	r3, #0
 800404c:	da38      	bge.n	80040c0 <_puts_r+0xc4>
 800404e:	4622      	mov	r2, r4
 8004050:	210a      	movs	r1, #10
 8004052:	4628      	mov	r0, r5
 8004054:	f000 f906 	bl	8004264 <__swbuf_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d011      	beq.n	8004080 <_puts_r+0x84>
 800405c:	250a      	movs	r5, #10
 800405e:	e011      	b.n	8004084 <_puts_r+0x88>
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <_puts_r+0xd4>)
 8004062:	429c      	cmp	r4, r3
 8004064:	d101      	bne.n	800406a <_puts_r+0x6e>
 8004066:	68ac      	ldr	r4, [r5, #8]
 8004068:	e7da      	b.n	8004020 <_puts_r+0x24>
 800406a:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <_puts_r+0xd8>)
 800406c:	429c      	cmp	r4, r3
 800406e:	bf08      	it	eq
 8004070:	68ec      	ldreq	r4, [r5, #12]
 8004072:	e7d5      	b.n	8004020 <_puts_r+0x24>
 8004074:	4621      	mov	r1, r4
 8004076:	4628      	mov	r0, r5
 8004078:	f000 f958 	bl	800432c <__swsetup_r>
 800407c:	2800      	cmp	r0, #0
 800407e:	d0dd      	beq.n	800403c <_puts_r+0x40>
 8004080:	f04f 35ff 	mov.w	r5, #4294967295
 8004084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004086:	07da      	lsls	r2, r3, #31
 8004088:	d405      	bmi.n	8004096 <_puts_r+0x9a>
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	059b      	lsls	r3, r3, #22
 800408e:	d402      	bmi.n	8004096 <_puts_r+0x9a>
 8004090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004092:	f7ff ff15 	bl	8003ec0 <__retarget_lock_release_recursive>
 8004096:	4628      	mov	r0, r5
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	2b00      	cmp	r3, #0
 800409c:	da04      	bge.n	80040a8 <_puts_r+0xac>
 800409e:	69a2      	ldr	r2, [r4, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	dc06      	bgt.n	80040b2 <_puts_r+0xb6>
 80040a4:	290a      	cmp	r1, #10
 80040a6:	d004      	beq.n	80040b2 <_puts_r+0xb6>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	6022      	str	r2, [r4, #0]
 80040ae:	7019      	strb	r1, [r3, #0]
 80040b0:	e7c5      	b.n	800403e <_puts_r+0x42>
 80040b2:	4622      	mov	r2, r4
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 f8d5 	bl	8004264 <__swbuf_r>
 80040ba:	3001      	adds	r0, #1
 80040bc:	d1bf      	bne.n	800403e <_puts_r+0x42>
 80040be:	e7df      	b.n	8004080 <_puts_r+0x84>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	250a      	movs	r5, #10
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	6022      	str	r2, [r4, #0]
 80040c8:	701d      	strb	r5, [r3, #0]
 80040ca:	e7db      	b.n	8004084 <_puts_r+0x88>
 80040cc:	080048ac 	.word	0x080048ac
 80040d0:	080048cc 	.word	0x080048cc
 80040d4:	0800488c 	.word	0x0800488c

080040d8 <puts>:
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <puts+0xc>)
 80040da:	4601      	mov	r1, r0
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	f7ff bf8d 	b.w	8003ffc <_puts_r>
 80040e2:	bf00      	nop
 80040e4:	20000010 	.word	0x20000010

080040e8 <cleanup_glue>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	460c      	mov	r4, r1
 80040ec:	6809      	ldr	r1, [r1, #0]
 80040ee:	4605      	mov	r5, r0
 80040f0:	b109      	cbz	r1, 80040f6 <cleanup_glue+0xe>
 80040f2:	f7ff fff9 	bl	80040e8 <cleanup_glue>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040fe:	f000 bad9 	b.w	80046b4 <_free_r>
	...

08004104 <_reclaim_reent>:
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <_reclaim_reent+0xb4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4283      	cmp	r3, r0
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	4604      	mov	r4, r0
 800410e:	d051      	beq.n	80041b4 <_reclaim_reent+0xb0>
 8004110:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004112:	b143      	cbz	r3, 8004126 <_reclaim_reent+0x22>
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d14a      	bne.n	80041b0 <_reclaim_reent+0xac>
 800411a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	b111      	cbz	r1, 8004126 <_reclaim_reent+0x22>
 8004120:	4620      	mov	r0, r4
 8004122:	f000 fac7 	bl	80046b4 <_free_r>
 8004126:	6961      	ldr	r1, [r4, #20]
 8004128:	b111      	cbz	r1, 8004130 <_reclaim_reent+0x2c>
 800412a:	4620      	mov	r0, r4
 800412c:	f000 fac2 	bl	80046b4 <_free_r>
 8004130:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004132:	b111      	cbz	r1, 800413a <_reclaim_reent+0x36>
 8004134:	4620      	mov	r0, r4
 8004136:	f000 fabd 	bl	80046b4 <_free_r>
 800413a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800413c:	b111      	cbz	r1, 8004144 <_reclaim_reent+0x40>
 800413e:	4620      	mov	r0, r4
 8004140:	f000 fab8 	bl	80046b4 <_free_r>
 8004144:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004146:	b111      	cbz	r1, 800414e <_reclaim_reent+0x4a>
 8004148:	4620      	mov	r0, r4
 800414a:	f000 fab3 	bl	80046b4 <_free_r>
 800414e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004150:	b111      	cbz	r1, 8004158 <_reclaim_reent+0x54>
 8004152:	4620      	mov	r0, r4
 8004154:	f000 faae 	bl	80046b4 <_free_r>
 8004158:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800415a:	b111      	cbz	r1, 8004162 <_reclaim_reent+0x5e>
 800415c:	4620      	mov	r0, r4
 800415e:	f000 faa9 	bl	80046b4 <_free_r>
 8004162:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004164:	b111      	cbz	r1, 800416c <_reclaim_reent+0x68>
 8004166:	4620      	mov	r0, r4
 8004168:	f000 faa4 	bl	80046b4 <_free_r>
 800416c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800416e:	b111      	cbz	r1, 8004176 <_reclaim_reent+0x72>
 8004170:	4620      	mov	r0, r4
 8004172:	f000 fa9f 	bl	80046b4 <_free_r>
 8004176:	69a3      	ldr	r3, [r4, #24]
 8004178:	b1e3      	cbz	r3, 80041b4 <_reclaim_reent+0xb0>
 800417a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800417c:	4620      	mov	r0, r4
 800417e:	4798      	blx	r3
 8004180:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004182:	b1b9      	cbz	r1, 80041b4 <_reclaim_reent+0xb0>
 8004184:	4620      	mov	r0, r4
 8004186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800418a:	f7ff bfad 	b.w	80040e8 <cleanup_glue>
 800418e:	5949      	ldr	r1, [r1, r5]
 8004190:	b941      	cbnz	r1, 80041a4 <_reclaim_reent+0xa0>
 8004192:	3504      	adds	r5, #4
 8004194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004196:	2d80      	cmp	r5, #128	; 0x80
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	d1f8      	bne.n	800418e <_reclaim_reent+0x8a>
 800419c:	4620      	mov	r0, r4
 800419e:	f000 fa89 	bl	80046b4 <_free_r>
 80041a2:	e7ba      	b.n	800411a <_reclaim_reent+0x16>
 80041a4:	680e      	ldr	r6, [r1, #0]
 80041a6:	4620      	mov	r0, r4
 80041a8:	f000 fa84 	bl	80046b4 <_free_r>
 80041ac:	4631      	mov	r1, r6
 80041ae:	e7ef      	b.n	8004190 <_reclaim_reent+0x8c>
 80041b0:	2500      	movs	r5, #0
 80041b2:	e7ef      	b.n	8004194 <_reclaim_reent+0x90>
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	bf00      	nop
 80041b8:	20000010 	.word	0x20000010

080041bc <_sbrk_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4d06      	ldr	r5, [pc, #24]	; (80041d8 <_sbrk_r+0x1c>)
 80041c0:	2300      	movs	r3, #0
 80041c2:	4604      	mov	r4, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f7fc fae4 	bl	8000794 <_sbrk>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_sbrk_r+0x1a>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_sbrk_r+0x1a>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	200010bc 	.word	0x200010bc

080041dc <__sread>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	460c      	mov	r4, r1
 80041e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e4:	f000 fab2 	bl	800474c <_read_r>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	bfab      	itete	ge
 80041ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041ee:	89a3      	ldrhlt	r3, [r4, #12]
 80041f0:	181b      	addge	r3, r3, r0
 80041f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041f6:	bfac      	ite	ge
 80041f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80041fa:	81a3      	strhlt	r3, [r4, #12]
 80041fc:	bd10      	pop	{r4, pc}

080041fe <__swrite>:
 80041fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004202:	461f      	mov	r7, r3
 8004204:	898b      	ldrh	r3, [r1, #12]
 8004206:	05db      	lsls	r3, r3, #23
 8004208:	4605      	mov	r5, r0
 800420a:	460c      	mov	r4, r1
 800420c:	4616      	mov	r6, r2
 800420e:	d505      	bpl.n	800421c <__swrite+0x1e>
 8004210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004214:	2302      	movs	r3, #2
 8004216:	2200      	movs	r2, #0
 8004218:	f000 f9c8 	bl	80045ac <_lseek_r>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	4632      	mov	r2, r6
 800422a:	463b      	mov	r3, r7
 800422c:	4628      	mov	r0, r5
 800422e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004232:	f000 b869 	b.w	8004308 <_write_r>

08004236 <__sseek>:
 8004236:	b510      	push	{r4, lr}
 8004238:	460c      	mov	r4, r1
 800423a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423e:	f000 f9b5 	bl	80045ac <_lseek_r>
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	bf15      	itete	ne
 8004248:	6560      	strne	r0, [r4, #84]	; 0x54
 800424a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800424e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004252:	81a3      	strheq	r3, [r4, #12]
 8004254:	bf18      	it	ne
 8004256:	81a3      	strhne	r3, [r4, #12]
 8004258:	bd10      	pop	{r4, pc}

0800425a <__sclose>:
 800425a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425e:	f000 b8d3 	b.w	8004408 <_close_r>
	...

08004264 <__swbuf_r>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	460e      	mov	r6, r1
 8004268:	4614      	mov	r4, r2
 800426a:	4605      	mov	r5, r0
 800426c:	b118      	cbz	r0, 8004276 <__swbuf_r+0x12>
 800426e:	6983      	ldr	r3, [r0, #24]
 8004270:	b90b      	cbnz	r3, 8004276 <__swbuf_r+0x12>
 8004272:	f7ff fd61 	bl	8003d38 <__sinit>
 8004276:	4b21      	ldr	r3, [pc, #132]	; (80042fc <__swbuf_r+0x98>)
 8004278:	429c      	cmp	r4, r3
 800427a:	d12b      	bne.n	80042d4 <__swbuf_r+0x70>
 800427c:	686c      	ldr	r4, [r5, #4]
 800427e:	69a3      	ldr	r3, [r4, #24]
 8004280:	60a3      	str	r3, [r4, #8]
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	071a      	lsls	r2, r3, #28
 8004286:	d52f      	bpl.n	80042e8 <__swbuf_r+0x84>
 8004288:	6923      	ldr	r3, [r4, #16]
 800428a:	b36b      	cbz	r3, 80042e8 <__swbuf_r+0x84>
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	1ac0      	subs	r0, r0, r3
 8004292:	6963      	ldr	r3, [r4, #20]
 8004294:	b2f6      	uxtb	r6, r6
 8004296:	4283      	cmp	r3, r0
 8004298:	4637      	mov	r7, r6
 800429a:	dc04      	bgt.n	80042a6 <__swbuf_r+0x42>
 800429c:	4621      	mov	r1, r4
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 f948 	bl	8004534 <_fflush_r>
 80042a4:	bb30      	cbnz	r0, 80042f4 <__swbuf_r+0x90>
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	6022      	str	r2, [r4, #0]
 80042b2:	701e      	strb	r6, [r3, #0]
 80042b4:	6963      	ldr	r3, [r4, #20]
 80042b6:	3001      	adds	r0, #1
 80042b8:	4283      	cmp	r3, r0
 80042ba:	d004      	beq.n	80042c6 <__swbuf_r+0x62>
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	07db      	lsls	r3, r3, #31
 80042c0:	d506      	bpl.n	80042d0 <__swbuf_r+0x6c>
 80042c2:	2e0a      	cmp	r6, #10
 80042c4:	d104      	bne.n	80042d0 <__swbuf_r+0x6c>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	f000 f933 	bl	8004534 <_fflush_r>
 80042ce:	b988      	cbnz	r0, 80042f4 <__swbuf_r+0x90>
 80042d0:	4638      	mov	r0, r7
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <__swbuf_r+0x9c>)
 80042d6:	429c      	cmp	r4, r3
 80042d8:	d101      	bne.n	80042de <__swbuf_r+0x7a>
 80042da:	68ac      	ldr	r4, [r5, #8]
 80042dc:	e7cf      	b.n	800427e <__swbuf_r+0x1a>
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <__swbuf_r+0xa0>)
 80042e0:	429c      	cmp	r4, r3
 80042e2:	bf08      	it	eq
 80042e4:	68ec      	ldreq	r4, [r5, #12]
 80042e6:	e7ca      	b.n	800427e <__swbuf_r+0x1a>
 80042e8:	4621      	mov	r1, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	f000 f81e 	bl	800432c <__swsetup_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d0cb      	beq.n	800428c <__swbuf_r+0x28>
 80042f4:	f04f 37ff 	mov.w	r7, #4294967295
 80042f8:	e7ea      	b.n	80042d0 <__swbuf_r+0x6c>
 80042fa:	bf00      	nop
 80042fc:	080048ac 	.word	0x080048ac
 8004300:	080048cc 	.word	0x080048cc
 8004304:	0800488c 	.word	0x0800488c

08004308 <_write_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4d07      	ldr	r5, [pc, #28]	; (8004328 <_write_r+0x20>)
 800430c:	4604      	mov	r4, r0
 800430e:	4608      	mov	r0, r1
 8004310:	4611      	mov	r1, r2
 8004312:	2200      	movs	r2, #0
 8004314:	602a      	str	r2, [r5, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	f7fc f9ec 	bl	80006f4 <_write>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d102      	bne.n	8004326 <_write_r+0x1e>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	b103      	cbz	r3, 8004326 <_write_r+0x1e>
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	200010bc 	.word	0x200010bc

0800432c <__swsetup_r>:
 800432c:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <__swsetup_r+0xcc>)
 800432e:	b570      	push	{r4, r5, r6, lr}
 8004330:	681d      	ldr	r5, [r3, #0]
 8004332:	4606      	mov	r6, r0
 8004334:	460c      	mov	r4, r1
 8004336:	b125      	cbz	r5, 8004342 <__swsetup_r+0x16>
 8004338:	69ab      	ldr	r3, [r5, #24]
 800433a:	b913      	cbnz	r3, 8004342 <__swsetup_r+0x16>
 800433c:	4628      	mov	r0, r5
 800433e:	f7ff fcfb 	bl	8003d38 <__sinit>
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <__swsetup_r+0xd0>)
 8004344:	429c      	cmp	r4, r3
 8004346:	d10f      	bne.n	8004368 <__swsetup_r+0x3c>
 8004348:	686c      	ldr	r4, [r5, #4]
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004350:	0719      	lsls	r1, r3, #28
 8004352:	d42c      	bmi.n	80043ae <__swsetup_r+0x82>
 8004354:	06dd      	lsls	r5, r3, #27
 8004356:	d411      	bmi.n	800437c <__swsetup_r+0x50>
 8004358:	2309      	movs	r3, #9
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	e03e      	b.n	80043e6 <__swsetup_r+0xba>
 8004368:	4b25      	ldr	r3, [pc, #148]	; (8004400 <__swsetup_r+0xd4>)
 800436a:	429c      	cmp	r4, r3
 800436c:	d101      	bne.n	8004372 <__swsetup_r+0x46>
 800436e:	68ac      	ldr	r4, [r5, #8]
 8004370:	e7eb      	b.n	800434a <__swsetup_r+0x1e>
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <__swsetup_r+0xd8>)
 8004374:	429c      	cmp	r4, r3
 8004376:	bf08      	it	eq
 8004378:	68ec      	ldreq	r4, [r5, #12]
 800437a:	e7e6      	b.n	800434a <__swsetup_r+0x1e>
 800437c:	0758      	lsls	r0, r3, #29
 800437e:	d512      	bpl.n	80043a6 <__swsetup_r+0x7a>
 8004380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004382:	b141      	cbz	r1, 8004396 <__swsetup_r+0x6a>
 8004384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004388:	4299      	cmp	r1, r3
 800438a:	d002      	beq.n	8004392 <__swsetup_r+0x66>
 800438c:	4630      	mov	r0, r6
 800438e:	f000 f991 	bl	80046b4 <_free_r>
 8004392:	2300      	movs	r3, #0
 8004394:	6363      	str	r3, [r4, #52]	; 0x34
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	2300      	movs	r3, #0
 80043a0:	6063      	str	r3, [r4, #4]
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	f043 0308 	orr.w	r3, r3, #8
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	b94b      	cbnz	r3, 80043c6 <__swsetup_r+0x9a>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043bc:	d003      	beq.n	80043c6 <__swsetup_r+0x9a>
 80043be:	4621      	mov	r1, r4
 80043c0:	4630      	mov	r0, r6
 80043c2:	f000 f92b 	bl	800461c <__smakebuf_r>
 80043c6:	89a0      	ldrh	r0, [r4, #12]
 80043c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043cc:	f010 0301 	ands.w	r3, r0, #1
 80043d0:	d00a      	beq.n	80043e8 <__swsetup_r+0xbc>
 80043d2:	2300      	movs	r3, #0
 80043d4:	60a3      	str	r3, [r4, #8]
 80043d6:	6963      	ldr	r3, [r4, #20]
 80043d8:	425b      	negs	r3, r3
 80043da:	61a3      	str	r3, [r4, #24]
 80043dc:	6923      	ldr	r3, [r4, #16]
 80043de:	b943      	cbnz	r3, 80043f2 <__swsetup_r+0xc6>
 80043e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043e4:	d1ba      	bne.n	800435c <__swsetup_r+0x30>
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
 80043e8:	0781      	lsls	r1, r0, #30
 80043ea:	bf58      	it	pl
 80043ec:	6963      	ldrpl	r3, [r4, #20]
 80043ee:	60a3      	str	r3, [r4, #8]
 80043f0:	e7f4      	b.n	80043dc <__swsetup_r+0xb0>
 80043f2:	2000      	movs	r0, #0
 80043f4:	e7f7      	b.n	80043e6 <__swsetup_r+0xba>
 80043f6:	bf00      	nop
 80043f8:	20000010 	.word	0x20000010
 80043fc:	080048ac 	.word	0x080048ac
 8004400:	080048cc 	.word	0x080048cc
 8004404:	0800488c 	.word	0x0800488c

08004408 <_close_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d06      	ldr	r5, [pc, #24]	; (8004424 <_close_r+0x1c>)
 800440c:	2300      	movs	r3, #0
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	f7fc f98a 	bl	800072c <_close>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_close_r+0x1a>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_close_r+0x1a>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	200010bc 	.word	0x200010bc

08004428 <__sflush_r>:
 8004428:	898a      	ldrh	r2, [r1, #12]
 800442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442e:	4605      	mov	r5, r0
 8004430:	0710      	lsls	r0, r2, #28
 8004432:	460c      	mov	r4, r1
 8004434:	d458      	bmi.n	80044e8 <__sflush_r+0xc0>
 8004436:	684b      	ldr	r3, [r1, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc05      	bgt.n	8004448 <__sflush_r+0x20>
 800443c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	dc02      	bgt.n	8004448 <__sflush_r+0x20>
 8004442:	2000      	movs	r0, #0
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800444a:	2e00      	cmp	r6, #0
 800444c:	d0f9      	beq.n	8004442 <__sflush_r+0x1a>
 800444e:	2300      	movs	r3, #0
 8004450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004454:	682f      	ldr	r7, [r5, #0]
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	d032      	beq.n	80044c0 <__sflush_r+0x98>
 800445a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	075a      	lsls	r2, r3, #29
 8004460:	d505      	bpl.n	800446e <__sflush_r+0x46>
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	1ac0      	subs	r0, r0, r3
 8004466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004468:	b10b      	cbz	r3, 800446e <__sflush_r+0x46>
 800446a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446c:	1ac0      	subs	r0, r0, r3
 800446e:	2300      	movs	r3, #0
 8004470:	4602      	mov	r2, r0
 8004472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004474:	6a21      	ldr	r1, [r4, #32]
 8004476:	4628      	mov	r0, r5
 8004478:	47b0      	blx	r6
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	d106      	bne.n	800448e <__sflush_r+0x66>
 8004480:	6829      	ldr	r1, [r5, #0]
 8004482:	291d      	cmp	r1, #29
 8004484:	d82c      	bhi.n	80044e0 <__sflush_r+0xb8>
 8004486:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <__sflush_r+0x108>)
 8004488:	40ca      	lsrs	r2, r1
 800448a:	07d6      	lsls	r6, r2, #31
 800448c:	d528      	bpl.n	80044e0 <__sflush_r+0xb8>
 800448e:	2200      	movs	r2, #0
 8004490:	6062      	str	r2, [r4, #4]
 8004492:	04d9      	lsls	r1, r3, #19
 8004494:	6922      	ldr	r2, [r4, #16]
 8004496:	6022      	str	r2, [r4, #0]
 8004498:	d504      	bpl.n	80044a4 <__sflush_r+0x7c>
 800449a:	1c42      	adds	r2, r0, #1
 800449c:	d101      	bne.n	80044a2 <__sflush_r+0x7a>
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	b903      	cbnz	r3, 80044a4 <__sflush_r+0x7c>
 80044a2:	6560      	str	r0, [r4, #84]	; 0x54
 80044a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a6:	602f      	str	r7, [r5, #0]
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d0ca      	beq.n	8004442 <__sflush_r+0x1a>
 80044ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <__sflush_r+0x92>
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 f8fd 	bl	80046b4 <_free_r>
 80044ba:	2000      	movs	r0, #0
 80044bc:	6360      	str	r0, [r4, #52]	; 0x34
 80044be:	e7c1      	b.n	8004444 <__sflush_r+0x1c>
 80044c0:	6a21      	ldr	r1, [r4, #32]
 80044c2:	2301      	movs	r3, #1
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b0      	blx	r6
 80044c8:	1c41      	adds	r1, r0, #1
 80044ca:	d1c7      	bne.n	800445c <__sflush_r+0x34>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0c4      	beq.n	800445c <__sflush_r+0x34>
 80044d2:	2b1d      	cmp	r3, #29
 80044d4:	d001      	beq.n	80044da <__sflush_r+0xb2>
 80044d6:	2b16      	cmp	r3, #22
 80044d8:	d101      	bne.n	80044de <__sflush_r+0xb6>
 80044da:	602f      	str	r7, [r5, #0]
 80044dc:	e7b1      	b.n	8004442 <__sflush_r+0x1a>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	e7ad      	b.n	8004444 <__sflush_r+0x1c>
 80044e8:	690f      	ldr	r7, [r1, #16]
 80044ea:	2f00      	cmp	r7, #0
 80044ec:	d0a9      	beq.n	8004442 <__sflush_r+0x1a>
 80044ee:	0793      	lsls	r3, r2, #30
 80044f0:	680e      	ldr	r6, [r1, #0]
 80044f2:	bf08      	it	eq
 80044f4:	694b      	ldreq	r3, [r1, #20]
 80044f6:	600f      	str	r7, [r1, #0]
 80044f8:	bf18      	it	ne
 80044fa:	2300      	movne	r3, #0
 80044fc:	eba6 0807 	sub.w	r8, r6, r7
 8004500:	608b      	str	r3, [r1, #8]
 8004502:	f1b8 0f00 	cmp.w	r8, #0
 8004506:	dd9c      	ble.n	8004442 <__sflush_r+0x1a>
 8004508:	6a21      	ldr	r1, [r4, #32]
 800450a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800450c:	4643      	mov	r3, r8
 800450e:	463a      	mov	r2, r7
 8004510:	4628      	mov	r0, r5
 8004512:	47b0      	blx	r6
 8004514:	2800      	cmp	r0, #0
 8004516:	dc06      	bgt.n	8004526 <__sflush_r+0xfe>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	e78e      	b.n	8004444 <__sflush_r+0x1c>
 8004526:	4407      	add	r7, r0
 8004528:	eba8 0800 	sub.w	r8, r8, r0
 800452c:	e7e9      	b.n	8004502 <__sflush_r+0xda>
 800452e:	bf00      	nop
 8004530:	20400001 	.word	0x20400001

08004534 <_fflush_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	690b      	ldr	r3, [r1, #16]
 8004538:	4605      	mov	r5, r0
 800453a:	460c      	mov	r4, r1
 800453c:	b913      	cbnz	r3, 8004544 <_fflush_r+0x10>
 800453e:	2500      	movs	r5, #0
 8004540:	4628      	mov	r0, r5
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	b118      	cbz	r0, 800454e <_fflush_r+0x1a>
 8004546:	6983      	ldr	r3, [r0, #24]
 8004548:	b90b      	cbnz	r3, 800454e <_fflush_r+0x1a>
 800454a:	f7ff fbf5 	bl	8003d38 <__sinit>
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <_fflush_r+0x6c>)
 8004550:	429c      	cmp	r4, r3
 8004552:	d11b      	bne.n	800458c <_fflush_r+0x58>
 8004554:	686c      	ldr	r4, [r5, #4]
 8004556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ef      	beq.n	800453e <_fflush_r+0xa>
 800455e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004560:	07d0      	lsls	r0, r2, #31
 8004562:	d404      	bmi.n	800456e <_fflush_r+0x3a>
 8004564:	0599      	lsls	r1, r3, #22
 8004566:	d402      	bmi.n	800456e <_fflush_r+0x3a>
 8004568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800456a:	f7ff fca8 	bl	8003ebe <__retarget_lock_acquire_recursive>
 800456e:	4628      	mov	r0, r5
 8004570:	4621      	mov	r1, r4
 8004572:	f7ff ff59 	bl	8004428 <__sflush_r>
 8004576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004578:	07da      	lsls	r2, r3, #31
 800457a:	4605      	mov	r5, r0
 800457c:	d4e0      	bmi.n	8004540 <_fflush_r+0xc>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	059b      	lsls	r3, r3, #22
 8004582:	d4dd      	bmi.n	8004540 <_fflush_r+0xc>
 8004584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004586:	f7ff fc9b 	bl	8003ec0 <__retarget_lock_release_recursive>
 800458a:	e7d9      	b.n	8004540 <_fflush_r+0xc>
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <_fflush_r+0x70>)
 800458e:	429c      	cmp	r4, r3
 8004590:	d101      	bne.n	8004596 <_fflush_r+0x62>
 8004592:	68ac      	ldr	r4, [r5, #8]
 8004594:	e7df      	b.n	8004556 <_fflush_r+0x22>
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <_fflush_r+0x74>)
 8004598:	429c      	cmp	r4, r3
 800459a:	bf08      	it	eq
 800459c:	68ec      	ldreq	r4, [r5, #12]
 800459e:	e7da      	b.n	8004556 <_fflush_r+0x22>
 80045a0:	080048ac 	.word	0x080048ac
 80045a4:	080048cc 	.word	0x080048cc
 80045a8:	0800488c 	.word	0x0800488c

080045ac <_lseek_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	; (80045cc <_lseek_r+0x20>)
 80045b0:	4604      	mov	r4, r0
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	602a      	str	r2, [r5, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f7fc f8dd 	bl	800077a <_lseek>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_lseek_r+0x1e>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_lseek_r+0x1e>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	200010bc 	.word	0x200010bc

080045d0 <__swhatbuf_r>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	460e      	mov	r6, r1
 80045d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d8:	2900      	cmp	r1, #0
 80045da:	b096      	sub	sp, #88	; 0x58
 80045dc:	4614      	mov	r4, r2
 80045de:	461d      	mov	r5, r3
 80045e0:	da08      	bge.n	80045f4 <__swhatbuf_r+0x24>
 80045e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	602a      	str	r2, [r5, #0]
 80045ea:	061a      	lsls	r2, r3, #24
 80045ec:	d410      	bmi.n	8004610 <__swhatbuf_r+0x40>
 80045ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f2:	e00e      	b.n	8004612 <__swhatbuf_r+0x42>
 80045f4:	466a      	mov	r2, sp
 80045f6:	f000 f8bb 	bl	8004770 <_fstat_r>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	dbf1      	blt.n	80045e2 <__swhatbuf_r+0x12>
 80045fe:	9a01      	ldr	r2, [sp, #4]
 8004600:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004604:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004608:	425a      	negs	r2, r3
 800460a:	415a      	adcs	r2, r3
 800460c:	602a      	str	r2, [r5, #0]
 800460e:	e7ee      	b.n	80045ee <__swhatbuf_r+0x1e>
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	2000      	movs	r0, #0
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	b016      	add	sp, #88	; 0x58
 8004618:	bd70      	pop	{r4, r5, r6, pc}
	...

0800461c <__smakebuf_r>:
 800461c:	898b      	ldrh	r3, [r1, #12]
 800461e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004620:	079d      	lsls	r5, r3, #30
 8004622:	4606      	mov	r6, r0
 8004624:	460c      	mov	r4, r1
 8004626:	d507      	bpl.n	8004638 <__smakebuf_r+0x1c>
 8004628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	2301      	movs	r3, #1
 8004632:	6163      	str	r3, [r4, #20]
 8004634:	b002      	add	sp, #8
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	ab01      	add	r3, sp, #4
 800463a:	466a      	mov	r2, sp
 800463c:	f7ff ffc8 	bl	80045d0 <__swhatbuf_r>
 8004640:	9900      	ldr	r1, [sp, #0]
 8004642:	4605      	mov	r5, r0
 8004644:	4630      	mov	r0, r6
 8004646:	f7ff fc65 	bl	8003f14 <_malloc_r>
 800464a:	b948      	cbnz	r0, 8004660 <__smakebuf_r+0x44>
 800464c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004650:	059a      	lsls	r2, r3, #22
 8004652:	d4ef      	bmi.n	8004634 <__smakebuf_r+0x18>
 8004654:	f023 0303 	bic.w	r3, r3, #3
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	e7e3      	b.n	8004628 <__smakebuf_r+0xc>
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <__smakebuf_r+0x7c>)
 8004662:	62b3      	str	r3, [r6, #40]	; 0x28
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	6020      	str	r0, [r4, #0]
 8004668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	9b00      	ldr	r3, [sp, #0]
 8004670:	6163      	str	r3, [r4, #20]
 8004672:	9b01      	ldr	r3, [sp, #4]
 8004674:	6120      	str	r0, [r4, #16]
 8004676:	b15b      	cbz	r3, 8004690 <__smakebuf_r+0x74>
 8004678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f889 	bl	8004794 <_isatty_r>
 8004682:	b128      	cbz	r0, 8004690 <__smakebuf_r+0x74>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	89a0      	ldrh	r0, [r4, #12]
 8004692:	4305      	orrs	r5, r0
 8004694:	81a5      	strh	r5, [r4, #12]
 8004696:	e7cd      	b.n	8004634 <__smakebuf_r+0x18>
 8004698:	08003cd1 	.word	0x08003cd1

0800469c <__malloc_lock>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__malloc_lock+0x8>)
 800469e:	f7ff bc0e 	b.w	8003ebe <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	200010b0 	.word	0x200010b0

080046a8 <__malloc_unlock>:
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <__malloc_unlock+0x8>)
 80046aa:	f7ff bc09 	b.w	8003ec0 <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	200010b0 	.word	0x200010b0

080046b4 <_free_r>:
 80046b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046b6:	2900      	cmp	r1, #0
 80046b8:	d044      	beq.n	8004744 <_free_r+0x90>
 80046ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046be:	9001      	str	r0, [sp, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f1a1 0404 	sub.w	r4, r1, #4
 80046c6:	bfb8      	it	lt
 80046c8:	18e4      	addlt	r4, r4, r3
 80046ca:	f7ff ffe7 	bl	800469c <__malloc_lock>
 80046ce:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <_free_r+0x94>)
 80046d0:	9801      	ldr	r0, [sp, #4]
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	b933      	cbnz	r3, 80046e4 <_free_r+0x30>
 80046d6:	6063      	str	r3, [r4, #4]
 80046d8:	6014      	str	r4, [r2, #0]
 80046da:	b003      	add	sp, #12
 80046dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046e0:	f7ff bfe2 	b.w	80046a8 <__malloc_unlock>
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	d908      	bls.n	80046fa <_free_r+0x46>
 80046e8:	6825      	ldr	r5, [r4, #0]
 80046ea:	1961      	adds	r1, r4, r5
 80046ec:	428b      	cmp	r3, r1
 80046ee:	bf01      	itttt	eq
 80046f0:	6819      	ldreq	r1, [r3, #0]
 80046f2:	685b      	ldreq	r3, [r3, #4]
 80046f4:	1949      	addeq	r1, r1, r5
 80046f6:	6021      	streq	r1, [r4, #0]
 80046f8:	e7ed      	b.n	80046d6 <_free_r+0x22>
 80046fa:	461a      	mov	r2, r3
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	b10b      	cbz	r3, 8004704 <_free_r+0x50>
 8004700:	42a3      	cmp	r3, r4
 8004702:	d9fa      	bls.n	80046fa <_free_r+0x46>
 8004704:	6811      	ldr	r1, [r2, #0]
 8004706:	1855      	adds	r5, r2, r1
 8004708:	42a5      	cmp	r5, r4
 800470a:	d10b      	bne.n	8004724 <_free_r+0x70>
 800470c:	6824      	ldr	r4, [r4, #0]
 800470e:	4421      	add	r1, r4
 8004710:	1854      	adds	r4, r2, r1
 8004712:	42a3      	cmp	r3, r4
 8004714:	6011      	str	r1, [r2, #0]
 8004716:	d1e0      	bne.n	80046da <_free_r+0x26>
 8004718:	681c      	ldr	r4, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	6053      	str	r3, [r2, #4]
 800471e:	4421      	add	r1, r4
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	e7da      	b.n	80046da <_free_r+0x26>
 8004724:	d902      	bls.n	800472c <_free_r+0x78>
 8004726:	230c      	movs	r3, #12
 8004728:	6003      	str	r3, [r0, #0]
 800472a:	e7d6      	b.n	80046da <_free_r+0x26>
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	1961      	adds	r1, r4, r5
 8004730:	428b      	cmp	r3, r1
 8004732:	bf04      	itt	eq
 8004734:	6819      	ldreq	r1, [r3, #0]
 8004736:	685b      	ldreq	r3, [r3, #4]
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	bf04      	itt	eq
 800473c:	1949      	addeq	r1, r1, r5
 800473e:	6021      	streq	r1, [r4, #0]
 8004740:	6054      	str	r4, [r2, #4]
 8004742:	e7ca      	b.n	80046da <_free_r+0x26>
 8004744:	b003      	add	sp, #12
 8004746:	bd30      	pop	{r4, r5, pc}
 8004748:	200010b4 	.word	0x200010b4

0800474c <_read_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	; (800476c <_read_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fb ffad 	bl	80006ba <_read>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_read_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_read_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200010bc 	.word	0x200010bc

08004770 <_fstat_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d07      	ldr	r5, [pc, #28]	; (8004790 <_fstat_r+0x20>)
 8004774:	2300      	movs	r3, #0
 8004776:	4604      	mov	r4, r0
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	602b      	str	r3, [r5, #0]
 800477e:	f7fb ffe1 	bl	8000744 <_fstat>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d102      	bne.n	800478c <_fstat_r+0x1c>
 8004786:	682b      	ldr	r3, [r5, #0]
 8004788:	b103      	cbz	r3, 800478c <_fstat_r+0x1c>
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	bd38      	pop	{r3, r4, r5, pc}
 800478e:	bf00      	nop
 8004790:	200010bc 	.word	0x200010bc

08004794 <_isatty_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d06      	ldr	r5, [pc, #24]	; (80047b0 <_isatty_r+0x1c>)
 8004798:	2300      	movs	r3, #0
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fb ffe0 	bl	8000764 <_isatty>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_isatty_r+0x1a>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_isatty_r+0x1a>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	200010bc 	.word	0x200010bc

080047b4 <_init>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr

080047c0 <_fini>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr
