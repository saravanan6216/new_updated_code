
freertos_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc8  08003bc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc8  08003bc8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc8  08003bc8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001000  20000074  08003c44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001074  08003c44  00021074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c319  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f7  00000000  00000000  0002c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277bc  00000000  00000000  0002fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8b9  00000000  00000000  000573dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec123  00000000  00000000  00062c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014edb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  0014ee08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a24 	.word	0x08003a24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003a24 	.word	0x08003a24

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000144 	.word	0x20000144

08000204 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800020c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000210:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d013      	beq.n	8000244 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800021c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000220:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000224:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00b      	beq.n	8000244 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800022c:	e000      	b.n	8000230 <ITM_SendChar+0x2c>
    {
      __NOP();
 800022e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000230:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800023a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000244:	687b      	ldr	r3, [r7, #4]
}
 8000246:	4618      	mov	r0, r3
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <_write>:
#include "cmsis_os.h"
#include "stdio.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
int _write(int file,char *ptr,int len)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b086      	sub	sp, #24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
    int i=0;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	e009      	b.n	800027c <_write+0x2a>
    	ITM_SendChar((*ptr++));
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	1c5a      	adds	r2, r3, #1
 800026c:	60ba      	str	r2, [r7, #8]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ffc7 	bl	8000204 <ITM_SendChar>
    for(i=0;i<len;i++)
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	3301      	adds	r3, #1
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	dbf1      	blt.n	8000268 <_write+0x16>
    return len;
 8000284:	687b      	ldr	r3, [r7, #4]
}
 8000286:	4618      	mov	r0, r3
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b096      	sub	sp, #88	; 0x58
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fa29 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f849 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f899 	bl	80003d4 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002a2:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <main+0x88>)
 80002a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002a8:	461d      	mov	r5, r3
 80002aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 fb9e 	bl	80019fe <osThreadCreate>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a15      	ldr	r2, [pc, #84]	; (800031c <main+0x8c>)
 80002c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED */
  osThreadDef(LED, task1_LED, 1, 0, 128);
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <main+0x90>)
 80002ca:	f107 0420 	add.w	r4, r7, #32
 80002ce:	461d      	mov	r5, r3
 80002d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 80002dc:	f107 0320 	add.w	r3, r7, #32
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fb8b 	bl	80019fe <osThreadCreate>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <main+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_RED */
  osThreadDef(LED_RED, RED_LED, 2, 0, 128);
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <main+0x98>)
 80002f0:	1d3c      	adds	r4, r7, #4
 80002f2:	461d      	mov	r5, r3
 80002f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_REDHandle = osThreadCreate(osThread(LED_RED), NULL);
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fb7a 	bl	80019fe <osThreadCreate>
 800030a:	4603      	mov	r3, r0
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <main+0x9c>)
 800030e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000310:	f001 fb6e 	bl	80019f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000314:	e7fe      	b.n	8000314 <main+0x84>
 8000316:	bf00      	nop
 8000318:	08003a54 	.word	0x08003a54
 800031c:	20000344 	.word	0x20000344
 8000320:	08003a70 	.word	0x08003a70
 8000324:	20000348 	.word	0x20000348
 8000328:	08003a8c 	.word	0x08003a8c
 800032c:	2000034c 	.word	0x2000034c

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b096      	sub	sp, #88	; 0x58
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2244      	movs	r2, #68	; 0x44
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fef7 	bl	8003132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000352:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000356:	f000 fd15 	bl	8000d84 <HAL_PWREx_ControlVoltageScaling>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000360:	f000 f8b0 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	2302      	movs	r3, #2
 8000366:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	2302      	movs	r3, #2
 8000374:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000376:	2302      	movs	r3, #2
 8000378:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800037a:	2301      	movs	r3, #1
 800037c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800037e:	230a      	movs	r3, #10
 8000380:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000382:	2307      	movs	r3, #7
 8000384:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000386:	2302      	movs	r3, #2
 8000388:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800038a:	2302      	movs	r3, #2
 800038c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fd4c 	bl	8000e30 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800039e:	f000 f891 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a6:	2303      	movs	r3, #3
 80003a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003b6:	463b      	mov	r3, r7
 80003b8:	2104      	movs	r1, #4
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 f914 	bl	80015e8 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003c6:	f000 f87d 	bl	80004c4 <Error_Handler>
  }
}
 80003ca:	bf00      	nop
 80003cc:	3758      	adds	r7, #88	; 0x58
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_GPIO_Init+0x5c>)
 80003ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <MX_GPIO_Init+0x5c>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_GPIO_Init+0x5c>)
 80003f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2170      	movs	r1, #112	; 0x70
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fc7c 	bl	8000d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800040c:	2370      	movs	r3, #112	; 0x70
 800040e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f000 fac4 	bl	80009b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000428:	bf00      	nop
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000

08000434 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800043c:	2120      	movs	r1, #32
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f000 fc77 	bl	8000d34 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, SET);
	  printf("Difault task is running\n");
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <StartDefaultTask+0x28>)
 8000448:	f002 ff7e 	bl	8003348 <puts>
	  printf("PA5 is blink\n");
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <StartDefaultTask+0x2c>)
 800044e:	f002 ff7b 	bl	8003348 <puts>
    osDelay(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f001 fb1f 	bl	8001a96 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000458:	e7f0      	b.n	800043c <StartDefaultTask+0x8>
 800045a:	bf00      	nop
 800045c:	08003aa8 	.word	0x08003aa8
 8000460:	08003ac0 	.word	0x08003ac0

08000464 <task1_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_LED */
void task1_LED(void const * argument)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task1_LED */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,6);
 800046c:	2106      	movs	r1, #6
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fc5f 	bl	8000d34 <HAL_GPIO_TogglePin>
	  	  printf("LED task is running\n");
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <task1_LED+0x28>)
 8000478:	f002 ff66 	bl	8003348 <puts>
	  	  printf("PA6 is blink\n");
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <task1_LED+0x2c>)
 800047e:	f002 ff63 	bl	8003348 <puts>
    osDelay(100);
 8000482:	2064      	movs	r0, #100	; 0x64
 8000484:	f001 fb07 	bl	8001a96 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,6);
 8000488:	e7f0      	b.n	800046c <task1_LED+0x8>
 800048a:	bf00      	nop
 800048c:	08003ad0 	.word	0x08003ad0
 8000490:	08003ae4 	.word	0x08003ae4

08000494 <RED_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RED_LED */
void RED_LED(void const * argument)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RED_LED */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA,4);
 800049c:	2104      	movs	r1, #4
 800049e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a2:	f000 fc47 	bl	8000d34 <HAL_GPIO_TogglePin>
	  	  printf("RED_LED task is running\n");
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <RED_LED+0x28>)
 80004a8:	f002 ff4e 	bl	8003348 <puts>
	  	  printf("PA4 is blink\n");
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <RED_LED+0x2c>)
 80004ae:	f002 ff4b 	bl	8003348 <puts>
    osDelay(100);
 80004b2:	2064      	movs	r0, #100	; 0x64
 80004b4:	f001 faef 	bl	8001a96 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA,4);
 80004b8:	e7f0      	b.n	800049c <RED_LED+0x8>
 80004ba:	bf00      	nop
 80004bc:	08003af4 	.word	0x08003af4
 80004c0:	08003b0c 	.word	0x08003b0c

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <HAL_MspInit+0x4c>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <HAL_MspInit+0x4c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6613      	str	r3, [r2, #96]	; 0x60
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_MspInit+0x4c>)
 80004e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_MspInit+0x4c>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <HAL_MspInit+0x4c>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	6593      	str	r3, [r2, #88]	; 0x58
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_MspInit+0x4c>)
 80004fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	210f      	movs	r1, #15
 800050a:	f06f 0001 	mvn.w	r0, #1
 800050e:	f000 fa26 	bl	800095e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <NMI_Handler+0x4>

08000526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler+0x4>

08000532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>

0800053e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000550:	f000 f928 	bl	80007a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000554:	f002 f84e 	bl	80025f4 <xTaskGetSchedulerState>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d001      	beq.n	8000562 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800055e:	f002 fa8b 	bl	8002a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}

08000566 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e00a      	b.n	800058e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000578:	f3af 8000 	nop.w
 800057c:	4601      	mov	r1, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	60ba      	str	r2, [r7, #8]
 8000584:	b2ca      	uxtb	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	dbf0      	blt.n	8000578 <_read+0x12>
  }

  return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c8:	605a      	str	r2, [r3, #4]
  return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_isatty>:

int _isatty(int file)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f002 fc58 	bl	8002eec <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20018000 	.word	0x20018000
 8000668:	00000400 	.word	0x00000400
 800066c:	20000350 	.word	0x20000350
 8000670:	20001078 	.word	0x20001078

08000674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SystemInit+0x20>)
 800067a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <SystemInit+0x20>)
 8000680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800069c:	f7ff ffea 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f002 fd0d 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ca:	f7ff fde1 	bl	8000290 <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006dc:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 80006e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006e4:	20001074 	.word	0x20001074

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_Init+0x3c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_Init+0x3c>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000700:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000702:	2003      	movs	r0, #3
 8000704:	f000 f920 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000708:	200f      	movs	r0, #15
 800070a:	f000 f80f 	bl	800072c <HAL_InitTick>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	e001      	b.n	800071e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800071a:	f7ff fed9 	bl	80004d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800071e:	79fb      	ldrb	r3, [r7, #7]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_InitTick+0x6c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d023      	beq.n	8000788 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_InitTick+0x70>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_InitTick+0x6c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f91d 	bl	8000996 <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10f      	bne.n	8000782 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d809      	bhi.n	800077c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f8f5 	bl	800095e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_InitTick+0x74>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	e007      	b.n	800078c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e004      	b.n	800078c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	e001      	b.n	800078c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000354 	.word	0x20000354

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000354 	.word	0x20000354

080007e4 <__NVIC_SetPriorityGrouping>:
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_SetPriority>:
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff47 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff5c 	bl	800082c <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff8e 	bl	800089c <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ffb0 	bl	8000904 <SysTick_Config>
 80009a4:	4603      	mov	r3, r0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e17f      	b.n	8000cc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8171 	beq.w	8000cba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d005      	beq.n	80009f0 <HAL_GPIO_Init+0x40>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d130      	bne.n	8000a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a26:	2201      	movs	r2, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	091b      	lsrs	r3, r3, #4
 8000a3c:	f003 0201 	and.w	r2, r3, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d118      	bne.n	8000a90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a64:	2201      	movs	r2, #1
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	f003 0201 	and.w	r2, r3, #1
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d017      	beq.n	8000acc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d123      	bne.n	8000b20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	220f      	movs	r2, #15
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	691a      	ldr	r2, [r3, #16]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	08da      	lsrs	r2, r3, #3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3208      	adds	r2, #8
 8000b1a:	6939      	ldr	r1, [r7, #16]
 8000b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0203 	and.w	r2, r3, #3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f000 80ac 	beq.w	8000cba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b5f      	ldr	r3, [pc, #380]	; (8000ce0 <HAL_GPIO_Init+0x330>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a5e      	ldr	r2, [pc, #376]	; (8000ce0 <HAL_GPIO_Init+0x330>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ce0 <HAL_GPIO_Init+0x330>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b7a:	4a5a      	ldr	r2, [pc, #360]	; (8000ce4 <HAL_GPIO_Init+0x334>)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3302      	adds	r3, #2
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ba4:	d025      	beq.n	8000bf2 <HAL_GPIO_Init+0x242>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <HAL_GPIO_Init+0x338>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d01f      	beq.n	8000bee <HAL_GPIO_Init+0x23e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4e      	ldr	r2, [pc, #312]	; (8000cec <HAL_GPIO_Init+0x33c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d019      	beq.n	8000bea <HAL_GPIO_Init+0x23a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4d      	ldr	r2, [pc, #308]	; (8000cf0 <HAL_GPIO_Init+0x340>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d013      	beq.n	8000be6 <HAL_GPIO_Init+0x236>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <HAL_GPIO_Init+0x344>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d00d      	beq.n	8000be2 <HAL_GPIO_Init+0x232>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <HAL_GPIO_Init+0x348>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d007      	beq.n	8000bde <HAL_GPIO_Init+0x22e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4a      	ldr	r2, [pc, #296]	; (8000cfc <HAL_GPIO_Init+0x34c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_GPIO_Init+0x22a>
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	e00c      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000bda:	2307      	movs	r3, #7
 8000bdc:	e00a      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000bde:	2305      	movs	r3, #5
 8000be0:	e008      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000be2:	2304      	movs	r3, #4
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e004      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e002      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <HAL_GPIO_Init+0x244>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	f002 0203 	and.w	r2, r2, #3
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	4093      	lsls	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c04:	4937      	ldr	r1, [pc, #220]	; (8000ce4 <HAL_GPIO_Init+0x334>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c12:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c36:	4a32      	ldr	r2, [pc, #200]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <HAL_GPIO_Init+0x350>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f47f ae78 	bne.w	80009c0 <HAL_GPIO_Init+0x10>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	48001000 	.word	0x48001000
 8000cf8:	48001400 	.word	0x48001400
 8000cfc:	48001800 	.word	0x48001800
 8000d00:	40010400 	.word	0x40010400

08000d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
 8000d10:	4613      	mov	r3, r2
 8000d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43d9      	mvns	r1, r3
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	400b      	ands	r3, r1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40007000 	.word	0x40007000

08000d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d92:	d130      	bne.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000da0:	d038      	beq.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000daa:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2232      	movs	r2, #50	; 0x32
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9b      	lsrs	r3, r3, #18
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc8:	e002      	b.n	8000dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ddc:	d102      	bne.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f2      	bne.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df0:	d110      	bne.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e00f      	b.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e02:	d007      	beq.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40007000 	.word	0x40007000
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	431bde83 	.word	0x431bde83

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e3ca      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e42:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e4c:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80e4 	beq.w	800102c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <HAL_RCC_OscConfig+0x4a>
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b0c      	cmp	r3, #12
 8000e6e:	f040 808b 	bne.w	8000f88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	f040 8087 	bne.w	8000f88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7a:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_RCC_OscConfig+0x62>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e3a2      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1a      	ldr	r2, [r3, #32]
 8000e96:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <HAL_RCC_OscConfig+0x7c>
 8000ea2:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eaa:	e005      	b.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000eac:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d223      	bcs.n	8000f04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fd1d 	bl	8001900 <RCC_SetFlashLatencyFromMSIRange>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e383      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed0:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	496d      	ldr	r1, [pc, #436]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eee:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	4968      	ldr	r1, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
 8000f02:	e025      	b.n	8000f50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f04:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a65      	ldr	r2, [pc, #404]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4960      	ldr	r1, [pc, #384]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f22:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	495b      	ldr	r1, [pc, #364]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d109      	bne.n	8000f50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fcdd 	bl	8001900 <RCC_SetFlashLatencyFromMSIRange>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e343      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f50:	f000 fc4a 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8000f54:	4602      	mov	r2, r0
 8000f56:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 030f 	and.w	r3, r3, #15
 8000f60:	4950      	ldr	r1, [pc, #320]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 8000f62:	5ccb      	ldrb	r3, [r1, r3]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_RCC_OscConfig+0x278>)
 8000f6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f70:	4b4e      	ldr	r3, [pc, #312]	; (80010ac <HAL_RCC_OscConfig+0x27c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbd9 	bl	800072c <HAL_InitTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d052      	beq.n	800102a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	e327      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d032      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fc16 	bl	80007cc <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fc12 	bl	80007cc <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e310      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a36      	ldr	r2, [pc, #216]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4931      	ldr	r1, [pc, #196]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	492c      	ldr	r1, [pc, #176]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
 8000ff4:	e01a      	b.n	800102c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001002:	f7ff fbe3 	bl	80007cc <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800100a:	f7ff fbdf 	bl	80007cc <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e2dd      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f0      	bne.n	800100a <HAL_RCC_OscConfig+0x1da>
 8001028:	e000      	b.n	800102c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800102a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d074      	beq.n	8001122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d005      	beq.n	800104a <HAL_RCC_OscConfig+0x21a>
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2b0c      	cmp	r3, #12
 8001042:	d10e      	bne.n	8001062 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d10b      	bne.n	8001062 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d064      	beq.n	8001120 <HAL_RCC_OscConfig+0x2f0>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d160      	bne.n	8001120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e2ba      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x24a>
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e026      	b.n	80010c8 <HAL_RCC_OscConfig+0x298>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001082:	d115      	bne.n	80010b0 <HAL_RCC_OscConfig+0x280>
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 800108a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a02      	ldr	r2, [pc, #8]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e014      	b.n	80010c8 <HAL_RCC_OscConfig+0x298>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	08003b24 	.word	0x08003b24
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000004 	.word	0x20000004
 80010b0:	4ba0      	ldr	r3, [pc, #640]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a9f      	ldr	r2, [pc, #636]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b9d      	ldr	r3, [pc, #628]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a9c      	ldr	r2, [pc, #624]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fb7c 	bl	80007cc <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fb78 	bl	80007cc <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e276      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ea:	4b92      	ldr	r3, [pc, #584]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x2a8>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb68 	bl	80007cc <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fb64 	bl	80007cc <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e262      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001112:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x2d0>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d060      	beq.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b04      	cmp	r3, #4
 8001132:	d005      	beq.n	8001140 <HAL_RCC_OscConfig+0x310>
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d119      	bne.n	800116e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d116      	bne.n	800116e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001140:	4b7c      	ldr	r3, [pc, #496]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x328>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e23f      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b76      	ldr	r3, [pc, #472]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	061b      	lsls	r3, r3, #24
 8001166:	4973      	ldr	r1, [pc, #460]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116c:	e040      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d023      	beq.n	80011be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001176:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fb23 	bl	80007cc <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fb1f 	bl	80007cc <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e21d      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800119c:	4b65      	ldr	r3, [pc, #404]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b62      	ldr	r3, [pc, #392]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	061b      	lsls	r3, r3, #24
 80011b6:	495f      	ldr	r1, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e018      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a5c      	ldr	r2, [pc, #368]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff faff 	bl	80007cc <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fafb 	bl	80007cc <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1f9      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d03c      	beq.n	8001276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01c      	beq.n	800123e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120a:	4a4a      	ldr	r2, [pc, #296]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fada 	bl	80007cc <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff fad6 	bl	80007cc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1d4      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ef      	beq.n	800121c <HAL_RCC_OscConfig+0x3ec>
 800123c:	e01b      	b.n	8001276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001244:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff fabd 	bl	80007cc <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fab9 	bl	80007cc <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1b7      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800126a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1ef      	bne.n	8001256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80a6 	beq.w	80013d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10d      	bne.n	80012b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129e:	6593      	str	r3, [r2, #88]	; 0x58
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d118      	bne.n	80012ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fa80 	bl	80007cc <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d0:	f7ff fa7c 	bl	80007cc <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e17a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_RCC_OscConfig+0x4d8>
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001306:	e029      	b.n	800135c <HAL_RCC_OscConfig+0x52c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d115      	bne.n	800133c <HAL_RCC_OscConfig+0x50c>
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_RCC_OscConfig+0x504>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x52c>
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40007000 	.word	0x40007000
 800133c:	4b9c      	ldr	r3, [pc, #624]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	4a9b      	ldr	r2, [pc, #620]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134c:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	4a97      	ldr	r2, [pc, #604]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d016      	beq.n	8001392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fa32 	bl	80007cc <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fa2e 	bl	80007cc <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e12a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001382:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ed      	beq.n	800136c <HAL_RCC_OscConfig+0x53c>
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001392:	f7ff fa1b 	bl	80007cc <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fa17 	bl	80007cc <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e113      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013b0:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1ed      	bne.n	800139a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d105      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c4:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	4a79      	ldr	r2, [pc, #484]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80fe 	beq.w	80015d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	2b02      	cmp	r3, #2
 80013e0:	f040 80d0 	bne.w	8001584 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013e4:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d130      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	3b01      	subs	r3, #1
 8001404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d127      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001414:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d11f      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001424:	2a07      	cmp	r2, #7
 8001426:	bf14      	ite	ne
 8001428:	2201      	movne	r2, #1
 800142a:	2200      	moveq	r2, #0
 800142c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800142e:	4293      	cmp	r3, r2
 8001430:	d113      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	3b01      	subs	r3, #1
 8001440:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d109      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	3b01      	subs	r3, #1
 8001454:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d06e      	beq.n	8001538 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d069      	beq.n	8001534 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0ad      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001486:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001488:	f7ff f9a0 	bl	80007cc <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff f99c 	bl	80007cc <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e09a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <HAL_RCC_OscConfig+0x784>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014be:	3a01      	subs	r2, #1
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014c8:	0212      	lsls	r2, r2, #8
 80014ca:	4311      	orrs	r1, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014d0:	0852      	lsrs	r2, r2, #1
 80014d2:	3a01      	subs	r2, #1
 80014d4:	0552      	lsls	r2, r2, #21
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	3a01      	subs	r2, #1
 80014e0:	0652      	lsls	r2, r2, #25
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014e8:	0912      	lsrs	r2, r2, #4
 80014ea:	0452      	lsls	r2, r2, #17
 80014ec:	430a      	orrs	r2, r1
 80014ee:	4930      	ldr	r1, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2d      	ldr	r2, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800150c:	f7ff f95e 	bl	80007cc <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff f95a 	bl	80007cc <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e058      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001532:	e050      	b.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e04f      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d148      	bne.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800155c:	f7ff f936 	bl	80007cc <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff f932 	bl	80007cc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e030      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x734>
 8001582:	e028      	b.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff f919 	bl	80007cc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159c:	e00c      	b.n	80015b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff f915 	bl	80007cc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d905      	bls.n	80015b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_OscConfig+0x7b0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ec      	bne.n	800159e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x7b0>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	4905      	ldr	r1, [pc, #20]	; (80015e0 <HAL_RCC_OscConfig+0x7b0>)
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_OscConfig+0x7b4>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
 80015d0:	e001      	b.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	feeefffc 	.word	0xfeeefffc

080015e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0e7      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015fc:	4b75      	ldr	r3, [pc, #468]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d910      	bls.n	800162c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b72      	ldr	r3, [pc, #456]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0207 	bic.w	r2, r3, #7
 8001612:	4970      	ldr	r1, [pc, #448]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0cf      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d010      	beq.n	800165a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001644:	429a      	cmp	r2, r3
 8001646:	d908      	bls.n	800165a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4960      	ldr	r1, [pc, #384]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d04c      	beq.n	8001700 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166e:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d121      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0a6      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001686:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e09a      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169e:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e08e      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ae:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e086      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4943      	ldr	r1, [pc, #268]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016d0:	f7ff f87c 	bl	80007cc <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f878 	bl	80007cc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e06e      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001718:	429a      	cmp	r2, r3
 800171a:	d208      	bcs.n	800172e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	492b      	ldr	r1, [pc, #172]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d210      	bcs.n	800175e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 0207 	bic.w	r2, r3, #7
 8001744:	4923      	ldr	r1, [pc, #140]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e036      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4918      	ldr	r1, [pc, #96]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4910      	ldr	r1, [pc, #64]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800179c:	f000 f824 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	490b      	ldr	r1, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1f4>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1fc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe ffb3 	bl	800072c <HAL_InitTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ca:	7afb      	ldrb	r3, [r7, #11]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08003b24 	.word	0x08003b24
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001800:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x34>
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d121      	bne.n	800185a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d11e      	bne.n	800185a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800181c:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001828:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e005      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10d      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b04      	cmp	r3, #4
 800185e:	d102      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	e004      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d101      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_RCC_GetSysClockFreq+0x114>)
 800186e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d134      	bne.n	80018e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0xa6>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d003      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0xac>
 800188c:	e005      	b.n	800189a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001890:	617b      	str	r3, [r7, #20]
      break;
 8001892:	e005      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_GetSysClockFreq+0x114>)
 8001896:	617b      	str	r3, [r7, #20]
      break;
 8001898:	e002      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	617b      	str	r3, [r7, #20]
      break;
 800189e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	3301      	adds	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	fb03 f202 	mul.w	r2, r3, r2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	0e5b      	lsrs	r3, r3, #25
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	3301      	adds	r3, #1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018e0:	69bb      	ldr	r3, [r7, #24]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08003b34 	.word	0x08003b34
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	007a1200 	.word	0x007a1200

08001900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001918:	f7ff fa26 	bl	8000d68 <HAL_PWREx_GetVoltageRange>
 800191c:	6178      	str	r0, [r7, #20]
 800191e:	e014      	b.n	800194a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001938:	f7ff fa16 	bl	8000d68 <HAL_PWREx_GetVoltageRange>
 800193c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001950:	d10b      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b80      	cmp	r3, #128	; 0x80
 8001956:	d919      	bls.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2ba0      	cmp	r3, #160	; 0xa0
 800195c:	d902      	bls.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800195e:	2302      	movs	r3, #2
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e013      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001964:	2301      	movs	r3, #1
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	e010      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b80      	cmp	r3, #128	; 0x80
 800196e:	d902      	bls.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001970:	2303      	movs	r3, #3
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e00a      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b80      	cmp	r3, #128	; 0x80
 800197a:	d102      	bne.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	e004      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b70      	cmp	r3, #112	; 0x70
 8001986:	d101      	bne.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0207 	bic.w	r2, r3, #7
 8001994:	4909      	ldr	r1, [pc, #36]	; (80019bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d001      	beq.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40022000 	.word	0x40022000

080019c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	2b84      	cmp	r3, #132	; 0x84
 80019d4:	d005      	beq.n	80019e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	3303      	adds	r3, #3
 80019e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019f4:	f000 faf6 	bl	8001fe4 <vTaskStartScheduler>
  
  return osOK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}

080019fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a00:	b089      	sub	sp, #36	; 0x24
 8001a02:	af04      	add	r7, sp, #16
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <osThreadCreate+0x54>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01c      	beq.n	8001a52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685c      	ldr	r4, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681d      	ldr	r5, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691e      	ldr	r6, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ffc8 	bl	80019c0 <makeFreeRtosPriority>
 8001a30:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a3a:	9202      	str	r2, [sp, #8]
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	9100      	str	r1, [sp, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4632      	mov	r2, r6
 8001a44:	4629      	mov	r1, r5
 8001a46:	4620      	mov	r0, r4
 8001a48:	f000 f8ed 	bl	8001c26 <xTaskCreateStatic>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e01c      	b.n	8001a8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685c      	ldr	r4, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a5e:	b29e      	uxth	r6, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffaa 	bl	80019c0 <makeFreeRtosPriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4632      	mov	r2, r6
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f000 f92f 	bl	8001ce0 <xTaskCreate>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d001      	beq.n	8001a8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <osDelay+0x16>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	e000      	b.n	8001aae <osDelay+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fa64 	bl	8001f7c <vTaskDelay>
  
  return osOK;
 8001ab4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f103 0208 	add.w	r2, r3, #8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f103 0208 	add.w	r2, r3, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f103 0208 	add.w	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	601a      	str	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b76:	d103      	bne.n	8001b80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e00c      	b.n	8001b9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3308      	adds	r3, #8
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e002      	b.n	8001b8e <vListInsert+0x2e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d2f6      	bcs.n	8001b88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6892      	ldr	r2, [r2, #8]
 8001be8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6852      	ldr	r2, [r2, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d103      	bne.n	8001c06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b08e      	sub	sp, #56	; 0x38
 8001c2a:	af04      	add	r7, sp, #16
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10a      	bne.n	8001c50 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c4c:	bf00      	nop
 8001c4e:	e7fe      	b.n	8001c4e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <xTaskCreateStatic+0x46>
	__asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	61fb      	str	r3, [r7, #28]
}
 8001c68:	bf00      	nop
 8001c6a:	e7fe      	b.n	8001c6a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c6c:	23b4      	movs	r3, #180	; 0xb4
 8001c6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2bb4      	cmp	r3, #180	; 0xb4
 8001c74:	d00a      	beq.n	8001c8c <xTaskCreateStatic+0x66>
	__asm volatile
 8001c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	f3bf 8f6f 	isb	sy
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	61bb      	str	r3, [r7, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	e7fe      	b.n	8001c8a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001c8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01e      	beq.n	8001cd2 <xTaskCreateStatic+0xac>
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01b      	beq.n	8001cd2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001cac:	2300      	movs	r3, #0
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f851 	bl	8001d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ccc:	f000 f8ec 	bl	8001ea8 <prvAddNewTaskToReadyList>
 8001cd0:	e001      	b.n	8001cd6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001cd6:	697b      	ldr	r3, [r7, #20]
	}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 ff0f 	bl	8002b18 <pvPortMalloc>
 8001cfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00e      	beq.n	8001d20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d02:	20b4      	movs	r0, #180	; 0xb4
 8001d04:	f000 ff08 	bl	8002b18 <pvPortMalloc>
 8001d08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
 8001d16:	e005      	b.n	8001d24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d18:	6978      	ldr	r0, [r7, #20]
 8001d1a:	f000 ffc9 	bl	8002cb0 <vPortFree>
 8001d1e:	e001      	b.n	8001d24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d017      	beq.n	8001d5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	2300      	movs	r3, #0
 8001d36:	9303      	str	r3, [sp, #12]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f80f 	bl	8001d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d4e:	69f8      	ldr	r0, [r7, #28]
 8001d50:	f000 f8aa 	bl	8001ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e002      	b.n	8001d60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d60:	69bb      	ldr	r3, [r7, #24]
	}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d84:	3b01      	subs	r3, #1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	617b      	str	r3, [r7, #20]
}
 8001db0:	bf00      	nop
 8001db2:	e7fe      	b.n	8001db2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01f      	beq.n	8001dfa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e012      	b.n	8001de6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	7819      	ldrb	r1, [r3, #0]
 8001dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3334      	adds	r3, #52	; 0x34
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3301      	adds	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d9e9      	bls.n	8001dc0 <prvInitialiseNewTask+0x54>
 8001dec:	e000      	b.n	8001df0 <prvInitialiseNewTask+0x84>
			{
				break;
 8001dee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001df8:	e003      	b.n	8001e02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d901      	bls.n	8001e0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e08:	2306      	movs	r3, #6
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe6b 	bl	8001afe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe66 	bl	8001afe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	f1c3 0207 	rsb	r2, r3, #7
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	334c      	adds	r3, #76	; 0x4c
 8001e5c:	2260      	movs	r2, #96	; 0x60
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 f966 	bl	8003132 <memset>
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <prvInitialiseNewTask+0x130>)
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <prvInitialiseNewTask+0x134>)
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <prvInitialiseNewTask+0x138>)
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	69b8      	ldr	r0, [r7, #24]
 8001e7e:	f000 fc3d 	bl	80026fc <pxPortInitialiseStack>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	08003b84 	.word	0x08003b84
 8001ea0:	08003ba4 	.word	0x08003ba4
 8001ea4:	08003b64 	.word	0x08003b64

08001ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001eb0:	f000 fd50 	bl	8002954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <prvAddNewTaskToReadyList+0xb8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <prvAddNewTaskToReadyList+0xb8>)
 8001ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <prvAddNewTaskToReadyList+0xb8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d110      	bne.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ed4:	f000 facc 	bl	8002470 <prvInitialiseTaskLists>
 8001ed8:	e00d      	b.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <prvAddNewTaskToReadyList+0xc0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d802      	bhi.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <prvAddNewTaskToReadyList+0xc4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <prvAddNewTaskToReadyList+0xc4>)
 8001efe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <prvAddNewTaskToReadyList+0xc8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <prvAddNewTaskToReadyList+0xc8>)
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <prvAddNewTaskToReadyList+0xcc>)
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7ff fdf5 	bl	8001b18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f2e:	f000 fd41 	bl	80029b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <prvAddNewTaskToReadyList+0xc0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <prvAddNewTaskToReadyList+0xd0>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000458 	.word	0x20000458
 8001f64:	20000358 	.word	0x20000358
 8001f68:	20000464 	.word	0x20000464
 8001f6c:	20000474 	.word	0x20000474
 8001f70:	20000460 	.word	0x20000460
 8001f74:	2000035c 	.word	0x2000035c
 8001f78:	e000ed04 	.word	0xe000ed04

08001f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d017      	beq.n	8001fbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <vTaskDelay+0x60>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <vTaskDelay+0x30>
	__asm volatile
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	60bb      	str	r3, [r7, #8]
}
 8001fa8:	bf00      	nop
 8001faa:	e7fe      	b.n	8001faa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001fac:	f000 f884 	bl	80020b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fb3c 	bl	8002630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001fb8:	f000 f88c 	bl	80020d4 <xTaskResumeAll>
 8001fbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <vTaskDelay+0x64>)
 8001fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000480 	.word	0x20000480
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ff2:	463a      	mov	r2, r7
 8001ff4:	1d39      	adds	r1, r7, #4
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8e8 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	2300      	movs	r3, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2300      	movs	r3, #0
 8002010:	460a      	mov	r2, r1
 8002012:	4921      	ldr	r1, [pc, #132]	; (8002098 <vTaskStartScheduler+0xb4>)
 8002014:	4821      	ldr	r0, [pc, #132]	; (800209c <vTaskStartScheduler+0xb8>)
 8002016:	f7ff fe06 	bl	8001c26 <xTaskCreateStatic>
 800201a:	4603      	mov	r3, r0
 800201c:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <vTaskStartScheduler+0xbc>)
 800201e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <vTaskStartScheduler+0xbc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e001      	b.n	8002032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d11b      	bne.n	8002070 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	613b      	str	r3, [r7, #16]
}
 800204a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <vTaskStartScheduler+0xc0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	334c      	adds	r3, #76	; 0x4c
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <vTaskStartScheduler+0xc4>)
 8002054:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <vTaskStartScheduler+0xc8>)
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <vTaskStartScheduler+0xcc>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <vTaskStartScheduler+0xd0>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800206a:	f000 fbd1 	bl	8002810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800206e:	e00e      	b.n	800208e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002076:	d10a      	bne.n	800208e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	60fb      	str	r3, [r7, #12]
}
 800208a:	bf00      	nop
 800208c:	e7fe      	b.n	800208c <vTaskStartScheduler+0xa8>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08003b1c 	.word	0x08003b1c
 800209c:	08002441 	.word	0x08002441
 80020a0:	2000047c 	.word	0x2000047c
 80020a4:	20000358 	.word	0x20000358
 80020a8:	20000010 	.word	0x20000010
 80020ac:	20000478 	.word	0x20000478
 80020b0:	20000464 	.word	0x20000464
 80020b4:	2000045c 	.word	0x2000045c

080020b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <vTaskSuspendAll+0x18>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <vTaskSuspendAll+0x18>)
 80020c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20000480 	.word	0x20000480

080020d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <xTaskResumeAll+0x114>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <xTaskResumeAll+0x2c>
	__asm volatile
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	603b      	str	r3, [r7, #0]
}
 80020fc:	bf00      	nop
 80020fe:	e7fe      	b.n	80020fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002100:	f000 fc28 	bl	8002954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <xTaskResumeAll+0x114>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <xTaskResumeAll+0x114>)
 800210c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <xTaskResumeAll+0x114>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d161      	bne.n	80021da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002116:	4b35      	ldr	r3, [pc, #212]	; (80021ec <xTaskResumeAll+0x118>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d05d      	beq.n	80021da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800211e:	e02e      	b.n	800217e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <xTaskResumeAll+0x11c>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3318      	adds	r3, #24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fd50 	bl	8001bd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd4b 	bl	8001bd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <xTaskResumeAll+0x120>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <xTaskResumeAll+0x120>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <xTaskResumeAll+0x124>)
 800215c:	441a      	add	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7ff fcd7 	bl	8001b18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <xTaskResumeAll+0x128>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <xTaskResumeAll+0x12c>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <xTaskResumeAll+0x11c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1cc      	bne.n	8002120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800218c:	f000 fa12 	bl	80025b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <xTaskResumeAll+0x130>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800219c:	f000 f836 	bl	800220c <xTaskIncrementTick>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <xTaskResumeAll+0x12c>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f1      	bne.n	800219c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <xTaskResumeAll+0x130>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <xTaskResumeAll+0x12c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <xTaskResumeAll+0x134>)
 80021cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021da:	f000 fbeb 	bl	80029b4 <vPortExitCritical>

	return xAlreadyYielded;
 80021de:	68bb      	ldr	r3, [r7, #8]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000480 	.word	0x20000480
 80021ec:	20000458 	.word	0x20000458
 80021f0:	20000418 	.word	0x20000418
 80021f4:	20000460 	.word	0x20000460
 80021f8:	2000035c 	.word	0x2000035c
 80021fc:	20000358 	.word	0x20000358
 8002200:	2000046c 	.word	0x2000046c
 8002204:	20000468 	.word	0x20000468
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <xTaskIncrementTick+0x144>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 808e 	bne.w	800233c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <xTaskIncrementTick+0x148>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <xTaskIncrementTick+0x148>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d120      	bne.n	8002276 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <xTaskIncrementTick+0x14c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <xTaskIncrementTick+0x48>
	__asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	603b      	str	r3, [r7, #0]
}
 8002250:	bf00      	nop
 8002252:	e7fe      	b.n	8002252 <xTaskIncrementTick+0x46>
 8002254:	4b40      	ldr	r3, [pc, #256]	; (8002358 <xTaskIncrementTick+0x14c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <xTaskIncrementTick+0x150>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3e      	ldr	r2, [pc, #248]	; (8002358 <xTaskIncrementTick+0x14c>)
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4a3e      	ldr	r2, [pc, #248]	; (800235c <xTaskIncrementTick+0x150>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <xTaskIncrementTick+0x154>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <xTaskIncrementTick+0x154>)
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	f000 f99f 	bl	80025b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <xTaskIncrementTick+0x158>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d348      	bcc.n	8002312 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <xTaskIncrementTick+0x14c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <xTaskIncrementTick+0x158>)
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	601a      	str	r2, [r3, #0]
					break;
 8002292:	e03e      	b.n	8002312 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <xTaskIncrementTick+0x14c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d203      	bcs.n	80022b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80022ac:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <xTaskIncrementTick+0x158>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80022b2:	e02e      	b.n	8002312 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3304      	adds	r3, #4
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fc8a 	bl	8001bd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3318      	adds	r3, #24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fc81 	bl	8001bd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <xTaskIncrementTick+0x15c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	4a22      	ldr	r2, [pc, #136]	; (8002368 <xTaskIncrementTick+0x15c>)
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <xTaskIncrementTick+0x160>)
 80022f0:	441a      	add	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3304      	adds	r3, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7ff fc0d 	bl	8001b18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <xTaskIncrementTick+0x164>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	429a      	cmp	r2, r3
 800230a:	d3b9      	bcc.n	8002280 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800230c:	2301      	movs	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002310:	e7b6      	b.n	8002280 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <xTaskIncrementTick+0x164>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	4914      	ldr	r1, [pc, #80]	; (800236c <xTaskIncrementTick+0x160>)
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d901      	bls.n	800232e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800232a:	2301      	movs	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <xTaskIncrementTick+0x168>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002336:	2301      	movs	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e004      	b.n	8002346 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <xTaskIncrementTick+0x16c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <xTaskIncrementTick+0x16c>)
 8002344:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002346:	697b      	ldr	r3, [r7, #20]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000480 	.word	0x20000480
 8002354:	2000045c 	.word	0x2000045c
 8002358:	20000410 	.word	0x20000410
 800235c:	20000414 	.word	0x20000414
 8002360:	20000470 	.word	0x20000470
 8002364:	20000478 	.word	0x20000478
 8002368:	20000460 	.word	0x20000460
 800236c:	2000035c 	.word	0x2000035c
 8002370:	20000358 	.word	0x20000358
 8002374:	2000046c 	.word	0x2000046c
 8002378:	20000468 	.word	0x20000468

0800237c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <vTaskSwitchContext+0xac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <vTaskSwitchContext+0xb0>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002390:	e044      	b.n	800241c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <vTaskSwitchContext+0xb0>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <vTaskSwitchContext+0xb4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	f1c3 031f 	rsb	r3, r3, #31
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	4921      	ldr	r1, [pc, #132]	; (8002434 <vTaskSwitchContext+0xb8>)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	607b      	str	r3, [r7, #4]
}
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <vTaskSwitchContext+0x5a>
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <vTaskSwitchContext+0xb8>)
 80023e4:	4413      	add	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3308      	adds	r3, #8
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d104      	bne.n	8002408 <vTaskSwitchContext+0x8c>
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <vTaskSwitchContext+0xbc>)
 8002410:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <vTaskSwitchContext+0xbc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	334c      	adds	r3, #76	; 0x4c
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <vTaskSwitchContext+0xc0>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	20000480 	.word	0x20000480
 800242c:	2000046c 	.word	0x2000046c
 8002430:	20000460 	.word	0x20000460
 8002434:	2000035c 	.word	0x2000035c
 8002438:	20000358 	.word	0x20000358
 800243c:	20000010 	.word	0x20000010

08002440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002448:	f000 f852 	bl	80024f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <prvIdleTask+0x28>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d9f9      	bls.n	8002448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <prvIdleTask+0x2c>)
 8002456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002464:	e7f0      	b.n	8002448 <prvIdleTask+0x8>
 8002466:	bf00      	nop
 8002468:	2000035c 	.word	0x2000035c
 800246c:	e000ed04 	.word	0xe000ed04

08002470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	e00c      	b.n	8002496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <prvInitialiseTaskLists+0x60>)
 8002488:	4413      	add	r3, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fb17 	bl	8001abe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d9ef      	bls.n	800247c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <prvInitialiseTaskLists+0x64>)
 800249e:	f7ff fb0e 	bl	8001abe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <prvInitialiseTaskLists+0x68>)
 80024a4:	f7ff fb0b 	bl	8001abe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <prvInitialiseTaskLists+0x6c>)
 80024aa:	f7ff fb08 	bl	8001abe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <prvInitialiseTaskLists+0x70>)
 80024b0:	f7ff fb05 	bl	8001abe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024b4:	480b      	ldr	r0, [pc, #44]	; (80024e4 <prvInitialiseTaskLists+0x74>)
 80024b6:	f7ff fb02 	bl	8001abe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <prvInitialiseTaskLists+0x78>)
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <prvInitialiseTaskLists+0x64>)
 80024be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <prvInitialiseTaskLists+0x7c>)
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <prvInitialiseTaskLists+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000035c 	.word	0x2000035c
 80024d4:	200003e8 	.word	0x200003e8
 80024d8:	200003fc 	.word	0x200003fc
 80024dc:	20000418 	.word	0x20000418
 80024e0:	2000042c 	.word	0x2000042c
 80024e4:	20000444 	.word	0x20000444
 80024e8:	20000410 	.word	0x20000410
 80024ec:	20000414 	.word	0x20000414

080024f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024f6:	e019      	b.n	800252c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80024f8:	f000 fa2c 	bl	8002954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <prvCheckTasksWaitingTermination+0x50>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb62 	bl	8001bd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <prvCheckTasksWaitingTermination+0x54>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3b01      	subs	r3, #1
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <prvCheckTasksWaitingTermination+0x54>)
 8002516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <prvCheckTasksWaitingTermination+0x58>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <prvCheckTasksWaitingTermination+0x58>)
 8002520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002522:	f000 fa47 	bl	80029b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f810 	bl	800254c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <prvCheckTasksWaitingTermination+0x58>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e1      	bne.n	80024f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000042c 	.word	0x2000042c
 8002544:	20000458 	.word	0x20000458
 8002548:	20000440 	.word	0x20000440

0800254c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	334c      	adds	r3, #76	; 0x4c
 8002558:	4618      	mov	r0, r3
 800255a:	f000 ff0b 	bl	8003374 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fb9f 	bl	8002cb0 <vPortFree>
				vPortFree( pxTCB );
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fb9c 	bl	8002cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002578:	e018      	b.n	80025ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d103      	bne.n	800258c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb93 	bl	8002cb0 <vPortFree>
	}
 800258a:	e00f      	b.n	80025ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002592:	2b02      	cmp	r3, #2
 8002594:	d00a      	beq.n	80025ac <prvDeleteTCB+0x60>
	__asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	60fb      	str	r3, [r7, #12]
}
 80025a8:	bf00      	nop
 80025aa:	e7fe      	b.n	80025aa <prvDeleteTCB+0x5e>
	}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <prvResetNextTaskUnblockTime+0x38>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <prvResetNextTaskUnblockTime+0x3c>)
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025cc:	e008      	b.n	80025e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <prvResetNextTaskUnblockTime+0x38>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <prvResetNextTaskUnblockTime+0x3c>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000410 	.word	0x20000410
 80025f0:	20000478 	.word	0x20000478

080025f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <xTaskGetSchedulerState+0x34>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002602:	2301      	movs	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e008      	b.n	800261a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <xTaskGetSchedulerState+0x38>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002610:	2302      	movs	r3, #2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	e001      	b.n	800261a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800261a:	687b      	ldr	r3, [r7, #4]
	}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	20000464 	.word	0x20000464
 800262c:	20000480 	.word	0x20000480

08002630 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3304      	adds	r3, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fac3 	bl	8001bd2 <uxListRemove>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	2201      	movs	r2, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4013      	ands	r3, r2
 8002666:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002668:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d10a      	bne.n	8002688 <prvAddCurrentTaskToDelayedList+0x58>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3304      	adds	r3, #4
 800267e:	4619      	mov	r1, r3
 8002680:	481a      	ldr	r0, [pc, #104]	; (80026ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8002682:	f7ff fa49 	bl	8001b18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002686:	e026      	b.n	80026d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d209      	bcs.n	80026b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3304      	adds	r3, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7ff fa57 	bl	8001b60 <vListInsert>
}
 80026b2:	e010      	b.n	80026d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3304      	adds	r3, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7ff fa4d 	bl	8001b60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d202      	bcs.n	80026d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80026d0:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000045c 	.word	0x2000045c
 80026e4:	20000358 	.word	0x20000358
 80026e8:	20000460 	.word	0x20000460
 80026ec:	20000444 	.word	0x20000444
 80026f0:	20000414 	.word	0x20000414
 80026f4:	20000410 	.word	0x20000410
 80026f8:	20000478 	.word	0x20000478

080026fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3b04      	subs	r3, #4
 800270c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b04      	subs	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0201 	bic.w	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3b04      	subs	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <pxPortInitialiseStack+0x64>)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3b14      	subs	r3, #20
 8002736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b04      	subs	r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f06f 0202 	mvn.w	r2, #2
 800274a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b20      	subs	r3, #32
 8002750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	08002765 	.word	0x08002765

08002764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <prvTaskExitError+0x54>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d00a      	beq.n	800278e <prvTaskExitError+0x2a>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	60fb      	str	r3, [r7, #12]
}
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <prvTaskExitError+0x28>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	60bb      	str	r3, [r7, #8]
}
 80027a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027a2:	bf00      	nop
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0fc      	beq.n	80027a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	00000000 	.word	0x00000000

080027c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <pxCurrentTCBConst2>)
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	6808      	ldr	r0, [r1, #0]
 80027c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ca:	f380 8809 	msr	PSP, r0
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8811 	msr	BASEPRI, r0
 80027da:	4770      	bx	lr
 80027dc:	f3af 8000 	nop.w

080027e0 <pxCurrentTCBConst2>:
 80027e0:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop

080027e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027e8:	4808      	ldr	r0, [pc, #32]	; (800280c <prvPortStartFirstTask+0x24>)
 80027ea:	6800      	ldr	r0, [r0, #0]
 80027ec:	6800      	ldr	r0, [r0, #0]
 80027ee:	f380 8808 	msr	MSP, r0
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f380 8814 	msr	CONTROL, r0
 80027fa:	b662      	cpsie	i
 80027fc:	b661      	cpsie	f
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	df00      	svc	0
 8002808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800280a:	bf00      	nop
 800280c:	e000ed08 	.word	0xe000ed08

08002810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <xPortStartScheduler+0x120>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a46      	ldr	r2, [pc, #280]	; (8002934 <xPortStartScheduler+0x124>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10a      	bne.n	8002836 <xPortStartScheduler+0x26>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	613b      	str	r3, [r7, #16]
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <xPortStartScheduler+0x120>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <xPortStartScheduler+0x128>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10a      	bne.n	8002856 <xPortStartScheduler+0x46>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	60fb      	str	r3, [r7, #12]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <xPortStartScheduler+0x12c>)
 8002858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <xPortStartScheduler+0x130>)
 800287c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <xPortStartScheduler+0x134>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002884:	e009      	b.n	800289a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <xPortStartScheduler+0x134>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <xPortStartScheduler+0x134>)
 800288e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d0ef      	beq.n	8002886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <xPortStartScheduler+0x134>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d00a      	beq.n	80028c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	60bb      	str	r3, [r7, #8]
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <xPortStartScheduler+0x134>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <xPortStartScheduler+0x134>)
 80028d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <xPortStartScheduler+0x134>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <xPortStartScheduler+0x134>)
 80028dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <xPortStartScheduler+0x138>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <xPortStartScheduler+0x138>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <xPortStartScheduler+0x138>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a14      	ldr	r2, [pc, #80]	; (8002948 <xPortStartScheduler+0x138>)
 80028f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028fe:	f000 f8dd 	bl	8002abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <xPortStartScheduler+0x13c>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002908:	f000 f8fc 	bl	8002b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <xPortStartScheduler+0x140>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <xPortStartScheduler+0x140>)
 8002912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002918:	f7ff ff66 	bl	80027e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800291c:	f7ff fd2e 	bl	800237c <vTaskSwitchContext>
	prvTaskExitError();
 8002920:	f7ff ff20 	bl	8002764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	410fc271 	.word	0x410fc271
 8002938:	410fc270 	.word	0x410fc270
 800293c:	e000e400 	.word	0xe000e400
 8002940:	20000484 	.word	0x20000484
 8002944:	20000488 	.word	0x20000488
 8002948:	e000ed20 	.word	0xe000ed20
 800294c:	2000000c 	.word	0x2000000c
 8002950:	e000ef34 	.word	0xe000ef34

08002954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	607b      	str	r3, [r7, #4]
}
 800296c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <vPortEnterCritical+0x58>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <vPortEnterCritical+0x58>)
 8002976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <vPortEnterCritical+0x58>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10f      	bne.n	80029a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <vPortEnterCritical+0x5c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	603b      	str	r3, [r7, #0]
}
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <vPortEnterCritical+0x4a>
	}
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	2000000c 	.word	0x2000000c
 80029b0:	e000ed04 	.word	0xe000ed04

080029b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <vPortExitCritical+0x50>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <vPortExitCritical+0x24>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	607b      	str	r3, [r7, #4]
}
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <vPortExitCritical+0x50>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <vPortExitCritical+0x50>)
 80029e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <vPortExitCritical+0x50>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <vPortExitCritical+0x42>
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000000c 	.word	0x2000000c
	...

08002a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a10:	f3ef 8009 	mrs	r0, PSP
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <pxCurrentTCBConst>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f01e 0f10 	tst.w	lr, #16
 8002a20:	bf08      	it	eq
 8002a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2a:	6010      	str	r0, [r2, #0]
 8002a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a34:	f380 8811 	msr	BASEPRI, r0
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f7ff fc9c 	bl	800237c <vTaskSwitchContext>
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f380 8811 	msr	BASEPRI, r0
 8002a4c:	bc09      	pop	{r0, r3}
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	6808      	ldr	r0, [r1, #0]
 8002a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a56:	f01e 0f10 	tst.w	lr, #16
 8002a5a:	bf08      	it	eq
 8002a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a60:	f380 8809 	msr	PSP, r0
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	f3af 8000 	nop.w

08002a70 <pxCurrentTCBConst>:
 8002a70:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop

08002a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	607b      	str	r3, [r7, #4]
}
 8002a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a92:	f7ff fbbb 	bl	800220c <xTaskIncrementTick>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <xPortSysTickHandler+0x40>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f383 8811 	msr	BASEPRI, r3
}
 8002aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <vPortSetupTimerInterrupt+0x34>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <vPortSetupTimerInterrupt+0x38>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <vPortSetupTimerInterrupt+0x3c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <vPortSetupTimerInterrupt+0x40>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <vPortSetupTimerInterrupt+0x44>)
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <vPortSetupTimerInterrupt+0x34>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010
 8002af4:	e000e018 	.word	0xe000e018
 8002af8:	20000000 	.word	0x20000000
 8002afc:	10624dd3 	.word	0x10624dd3
 8002b00:	e000e014 	.word	0xe000e014

08002b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b14 <vPortEnableVFP+0x10>
 8002b08:	6801      	ldr	r1, [r0, #0]
 8002b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b0e:	6001      	str	r1, [r0, #0]
 8002b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b12:	bf00      	nop
 8002b14:	e000ed88 	.word	0xe000ed88

08002b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002b24:	f7ff fac8 	bl	80020b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002b28:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <pvPortMalloc+0x180>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002b30:	f000 f920 	bl	8002d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <pvPortMalloc+0x184>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 8093 	bne.w	8002c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01d      	beq.n	8002b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002b48:	2208      	movs	r2, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f023 0307 	bic.w	r3, r3, #7
 8002b60:	3308      	adds	r3, #8
 8002b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <pvPortMalloc+0x6c>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	617b      	str	r3, [r7, #20]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06e      	beq.n	8002c68 <pvPortMalloc+0x150>
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <pvPortMalloc+0x188>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d869      	bhi.n	8002c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <pvPortMalloc+0x18c>)
 8002b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <pvPortMalloc+0x18c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b9e:	e004      	b.n	8002baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d903      	bls.n	8002bbc <pvPortMalloc+0xa4>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f1      	bne.n	8002ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <pvPortMalloc+0x180>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d050      	beq.n	8002c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4413      	add	r3, r2
 8002bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	2308      	movs	r3, #8
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d91f      	bls.n	8002c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <pvPortMalloc+0xf8>
	__asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	613b      	str	r3, [r7, #16]
}
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c22:	69b8      	ldr	r0, [r7, #24]
 8002c24:	f000 f908 	bl	8002e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <pvPortMalloc+0x190>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d203      	bcs.n	8002c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <pvPortMalloc+0x190>)
 8002c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <pvPortMalloc+0x184>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <pvPortMalloc+0x194>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <pvPortMalloc+0x194>)
 8002c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002c68:	f7ff fa34 	bl	80020d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <pvPortMalloc+0x174>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	60fb      	str	r3, [r7, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <pvPortMalloc+0x172>
	return pvReturn;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000104c 	.word	0x2000104c
 8002c9c:	20001060 	.word	0x20001060
 8002ca0:	20001050 	.word	0x20001050
 8002ca4:	20001044 	.word	0x20001044
 8002ca8:	20001054 	.word	0x20001054
 8002cac:	20001058 	.word	0x20001058

08002cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04d      	beq.n	8002d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <vPortFree+0xb8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <vPortFree+0x44>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	60fb      	str	r3, [r7, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <vPortFree+0x62>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60bb      	str	r3, [r7, #8]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <vPortFree+0xb8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01e      	beq.n	8002d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11a      	bne.n	8002d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <vPortFree+0xb8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002d38:	f7ff f9be 	bl	80020b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <vPortFree+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4413      	add	r3, r2
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <vPortFree+0xbc>)
 8002d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d4a:	6938      	ldr	r0, [r7, #16]
 8002d4c:	f000 f874 	bl	8002e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <vPortFree+0xc0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <vPortFree+0xc0>)
 8002d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002d5a:	f7ff f9bb 	bl	80020d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20001060 	.word	0x20001060
 8002d6c:	20001050 	.word	0x20001050
 8002d70:	2000105c 	.word	0x2000105c

08002d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <prvHeapInit+0xac>)
 8002d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3307      	adds	r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <prvHeapInit+0xac>)
 8002da4:	4413      	add	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <prvHeapInit+0xb0>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <prvHeapInit+0xb0>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0307 	bic.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <prvHeapInit+0xb4>)
 8002dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <prvHeapInit+0xb4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <prvHeapInit+0xb4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <prvHeapInit+0xb4>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <prvHeapInit+0xb8>)
 8002e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <prvHeapInit+0xbc>)
 8002e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <prvHeapInit+0xc0>)
 8002e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	2000048c 	.word	0x2000048c
 8002e24:	20001044 	.word	0x20001044
 8002e28:	2000104c 	.word	0x2000104c
 8002e2c:	20001054 	.word	0x20001054
 8002e30:	20001050 	.word	0x20001050
 8002e34:	20001060 	.word	0x20001060

08002e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e40:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <prvInsertBlockIntoFreeList+0xac>)
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e002      	b.n	8002e4c <prvInsertBlockIntoFreeList+0x14>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d8f7      	bhi.n	8002e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d108      	bne.n	8002e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	441a      	add	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	441a      	add	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d118      	bne.n	8002ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d00d      	beq.n	8002eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e008      	b.n	8002ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e003      	b.n	8002ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d002      	beq.n	8002ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20001044 	.word	0x20001044
 8002ee8:	2000104c 	.word	0x2000104c

08002eec <__errno>:
 8002eec:	4b01      	ldr	r3, [pc, #4]	; (8002ef4 <__errno+0x8>)
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000010 	.word	0x20000010

08002ef8 <std>:
 8002ef8:	2300      	movs	r3, #0
 8002efa:	b510      	push	{r4, lr}
 8002efc:	4604      	mov	r4, r0
 8002efe:	e9c0 3300 	strd	r3, r3, [r0]
 8002f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f06:	6083      	str	r3, [r0, #8]
 8002f08:	8181      	strh	r1, [r0, #12]
 8002f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f0c:	81c2      	strh	r2, [r0, #14]
 8002f0e:	6183      	str	r3, [r0, #24]
 8002f10:	4619      	mov	r1, r3
 8002f12:	2208      	movs	r2, #8
 8002f14:	305c      	adds	r0, #92	; 0x5c
 8002f16:	f000 f90c 	bl	8003132 <memset>
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <std+0x38>)
 8002f1c:	6263      	str	r3, [r4, #36]	; 0x24
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <std+0x3c>)
 8002f20:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <std+0x40>)
 8002f24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <std+0x44>)
 8002f28:	6224      	str	r4, [r4, #32]
 8002f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f2c:	bd10      	pop	{r4, pc}
 8002f2e:	bf00      	nop
 8002f30:	0800344d 	.word	0x0800344d
 8002f34:	0800346f 	.word	0x0800346f
 8002f38:	080034a7 	.word	0x080034a7
 8002f3c:	080034cb 	.word	0x080034cb

08002f40 <_cleanup_r>:
 8002f40:	4901      	ldr	r1, [pc, #4]	; (8002f48 <_cleanup_r+0x8>)
 8002f42:	f000 b8af 	b.w	80030a4 <_fwalk_reent>
 8002f46:	bf00      	nop
 8002f48:	080037a5 	.word	0x080037a5

08002f4c <__sfmoreglue>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	2268      	movs	r2, #104	; 0x68
 8002f50:	1e4d      	subs	r5, r1, #1
 8002f52:	4355      	muls	r5, r2
 8002f54:	460e      	mov	r6, r1
 8002f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f5a:	f000 f913 	bl	8003184 <_malloc_r>
 8002f5e:	4604      	mov	r4, r0
 8002f60:	b140      	cbz	r0, 8002f74 <__sfmoreglue+0x28>
 8002f62:	2100      	movs	r1, #0
 8002f64:	e9c0 1600 	strd	r1, r6, [r0]
 8002f68:	300c      	adds	r0, #12
 8002f6a:	60a0      	str	r0, [r4, #8]
 8002f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f70:	f000 f8df 	bl	8003132 <memset>
 8002f74:	4620      	mov	r0, r4
 8002f76:	bd70      	pop	{r4, r5, r6, pc}

08002f78 <__sfp_lock_acquire>:
 8002f78:	4801      	ldr	r0, [pc, #4]	; (8002f80 <__sfp_lock_acquire+0x8>)
 8002f7a:	f000 b8d8 	b.w	800312e <__retarget_lock_acquire_recursive>
 8002f7e:	bf00      	nop
 8002f80:	20001065 	.word	0x20001065

08002f84 <__sfp_lock_release>:
 8002f84:	4801      	ldr	r0, [pc, #4]	; (8002f8c <__sfp_lock_release+0x8>)
 8002f86:	f000 b8d3 	b.w	8003130 <__retarget_lock_release_recursive>
 8002f8a:	bf00      	nop
 8002f8c:	20001065 	.word	0x20001065

08002f90 <__sinit_lock_acquire>:
 8002f90:	4801      	ldr	r0, [pc, #4]	; (8002f98 <__sinit_lock_acquire+0x8>)
 8002f92:	f000 b8cc 	b.w	800312e <__retarget_lock_acquire_recursive>
 8002f96:	bf00      	nop
 8002f98:	20001066 	.word	0x20001066

08002f9c <__sinit_lock_release>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	; (8002fa4 <__sinit_lock_release+0x8>)
 8002f9e:	f000 b8c7 	b.w	8003130 <__retarget_lock_release_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	20001066 	.word	0x20001066

08002fa8 <__sinit>:
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
 8002fac:	f7ff fff0 	bl	8002f90 <__sinit_lock_acquire>
 8002fb0:	69a3      	ldr	r3, [r4, #24]
 8002fb2:	b11b      	cbz	r3, 8002fbc <__sinit+0x14>
 8002fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb8:	f7ff bff0 	b.w	8002f9c <__sinit_lock_release>
 8002fbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <__sinit+0x68>)
 8002fc4:	4a13      	ldr	r2, [pc, #76]	; (8003014 <__sinit+0x6c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fca:	42a3      	cmp	r3, r4
 8002fcc:	bf04      	itt	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	61a3      	streq	r3, [r4, #24]
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f000 f820 	bl	8003018 <__sfp>
 8002fd8:	6060      	str	r0, [r4, #4]
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 f81c 	bl	8003018 <__sfp>
 8002fe0:	60a0      	str	r0, [r4, #8]
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f000 f818 	bl	8003018 <__sfp>
 8002fe8:	2200      	movs	r2, #0
 8002fea:	60e0      	str	r0, [r4, #12]
 8002fec:	2104      	movs	r1, #4
 8002fee:	6860      	ldr	r0, [r4, #4]
 8002ff0:	f7ff ff82 	bl	8002ef8 <std>
 8002ff4:	68a0      	ldr	r0, [r4, #8]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2109      	movs	r1, #9
 8002ffa:	f7ff ff7d 	bl	8002ef8 <std>
 8002ffe:	68e0      	ldr	r0, [r4, #12]
 8003000:	2202      	movs	r2, #2
 8003002:	2112      	movs	r1, #18
 8003004:	f7ff ff78 	bl	8002ef8 <std>
 8003008:	2301      	movs	r3, #1
 800300a:	61a3      	str	r3, [r4, #24]
 800300c:	e7d2      	b.n	8002fb4 <__sinit+0xc>
 800300e:	bf00      	nop
 8003010:	08003bc4 	.word	0x08003bc4
 8003014:	08002f41 	.word	0x08002f41

08003018 <__sfp>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	4607      	mov	r7, r0
 800301c:	f7ff ffac 	bl	8002f78 <__sfp_lock_acquire>
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <__sfp+0x84>)
 8003022:	681e      	ldr	r6, [r3, #0]
 8003024:	69b3      	ldr	r3, [r6, #24]
 8003026:	b913      	cbnz	r3, 800302e <__sfp+0x16>
 8003028:	4630      	mov	r0, r6
 800302a:	f7ff ffbd 	bl	8002fa8 <__sinit>
 800302e:	3648      	adds	r6, #72	; 0x48
 8003030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003034:	3b01      	subs	r3, #1
 8003036:	d503      	bpl.n	8003040 <__sfp+0x28>
 8003038:	6833      	ldr	r3, [r6, #0]
 800303a:	b30b      	cbz	r3, 8003080 <__sfp+0x68>
 800303c:	6836      	ldr	r6, [r6, #0]
 800303e:	e7f7      	b.n	8003030 <__sfp+0x18>
 8003040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003044:	b9d5      	cbnz	r5, 800307c <__sfp+0x64>
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <__sfp+0x88>)
 8003048:	60e3      	str	r3, [r4, #12]
 800304a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800304e:	6665      	str	r5, [r4, #100]	; 0x64
 8003050:	f000 f86c 	bl	800312c <__retarget_lock_init_recursive>
 8003054:	f7ff ff96 	bl	8002f84 <__sfp_lock_release>
 8003058:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800305c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003060:	6025      	str	r5, [r4, #0]
 8003062:	61a5      	str	r5, [r4, #24]
 8003064:	2208      	movs	r2, #8
 8003066:	4629      	mov	r1, r5
 8003068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800306c:	f000 f861 	bl	8003132 <memset>
 8003070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003078:	4620      	mov	r0, r4
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307c:	3468      	adds	r4, #104	; 0x68
 800307e:	e7d9      	b.n	8003034 <__sfp+0x1c>
 8003080:	2104      	movs	r1, #4
 8003082:	4638      	mov	r0, r7
 8003084:	f7ff ff62 	bl	8002f4c <__sfmoreglue>
 8003088:	4604      	mov	r4, r0
 800308a:	6030      	str	r0, [r6, #0]
 800308c:	2800      	cmp	r0, #0
 800308e:	d1d5      	bne.n	800303c <__sfp+0x24>
 8003090:	f7ff ff78 	bl	8002f84 <__sfp_lock_release>
 8003094:	230c      	movs	r3, #12
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	e7ee      	b.n	8003078 <__sfp+0x60>
 800309a:	bf00      	nop
 800309c:	08003bc4 	.word	0x08003bc4
 80030a0:	ffff0001 	.word	0xffff0001

080030a4 <_fwalk_reent>:
 80030a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030a8:	4606      	mov	r6, r0
 80030aa:	4688      	mov	r8, r1
 80030ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030b0:	2700      	movs	r7, #0
 80030b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030b6:	f1b9 0901 	subs.w	r9, r9, #1
 80030ba:	d505      	bpl.n	80030c8 <_fwalk_reent+0x24>
 80030bc:	6824      	ldr	r4, [r4, #0]
 80030be:	2c00      	cmp	r4, #0
 80030c0:	d1f7      	bne.n	80030b2 <_fwalk_reent+0xe>
 80030c2:	4638      	mov	r0, r7
 80030c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030c8:	89ab      	ldrh	r3, [r5, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d907      	bls.n	80030de <_fwalk_reent+0x3a>
 80030ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030d2:	3301      	adds	r3, #1
 80030d4:	d003      	beq.n	80030de <_fwalk_reent+0x3a>
 80030d6:	4629      	mov	r1, r5
 80030d8:	4630      	mov	r0, r6
 80030da:	47c0      	blx	r8
 80030dc:	4307      	orrs	r7, r0
 80030de:	3568      	adds	r5, #104	; 0x68
 80030e0:	e7e9      	b.n	80030b6 <_fwalk_reent+0x12>
	...

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4d0d      	ldr	r5, [pc, #52]	; (800311c <__libc_init_array+0x38>)
 80030e8:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ea:	1b64      	subs	r4, r4, r5
 80030ec:	10a4      	asrs	r4, r4, #2
 80030ee:	2600      	movs	r6, #0
 80030f0:	42a6      	cmp	r6, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	4d0b      	ldr	r5, [pc, #44]	; (8003124 <__libc_init_array+0x40>)
 80030f6:	4c0c      	ldr	r4, [pc, #48]	; (8003128 <__libc_init_array+0x44>)
 80030f8:	f000 fc94 	bl	8003a24 <_init>
 80030fc:	1b64      	subs	r4, r4, r5
 80030fe:	10a4      	asrs	r4, r4, #2
 8003100:	2600      	movs	r6, #0
 8003102:	42a6      	cmp	r6, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	f855 3b04 	ldr.w	r3, [r5], #4
 800310c:	4798      	blx	r3
 800310e:	3601      	adds	r6, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	f855 3b04 	ldr.w	r3, [r5], #4
 8003116:	4798      	blx	r3
 8003118:	3601      	adds	r6, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	08003bc8 	.word	0x08003bc8
 8003120:	08003bc8 	.word	0x08003bc8
 8003124:	08003bc8 	.word	0x08003bc8
 8003128:	08003bcc 	.word	0x08003bcc

0800312c <__retarget_lock_init_recursive>:
 800312c:	4770      	bx	lr

0800312e <__retarget_lock_acquire_recursive>:
 800312e:	4770      	bx	lr

08003130 <__retarget_lock_release_recursive>:
 8003130:	4770      	bx	lr

08003132 <memset>:
 8003132:	4402      	add	r2, r0
 8003134:	4603      	mov	r3, r0
 8003136:	4293      	cmp	r3, r2
 8003138:	d100      	bne.n	800313c <memset+0xa>
 800313a:	4770      	bx	lr
 800313c:	f803 1b01 	strb.w	r1, [r3], #1
 8003140:	e7f9      	b.n	8003136 <memset+0x4>
	...

08003144 <sbrk_aligned>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4e0e      	ldr	r6, [pc, #56]	; (8003180 <sbrk_aligned+0x3c>)
 8003148:	460c      	mov	r4, r1
 800314a:	6831      	ldr	r1, [r6, #0]
 800314c:	4605      	mov	r5, r0
 800314e:	b911      	cbnz	r1, 8003156 <sbrk_aligned+0x12>
 8003150:	f000 f96c 	bl	800342c <_sbrk_r>
 8003154:	6030      	str	r0, [r6, #0]
 8003156:	4621      	mov	r1, r4
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f967 	bl	800342c <_sbrk_r>
 800315e:	1c43      	adds	r3, r0, #1
 8003160:	d00a      	beq.n	8003178 <sbrk_aligned+0x34>
 8003162:	1cc4      	adds	r4, r0, #3
 8003164:	f024 0403 	bic.w	r4, r4, #3
 8003168:	42a0      	cmp	r0, r4
 800316a:	d007      	beq.n	800317c <sbrk_aligned+0x38>
 800316c:	1a21      	subs	r1, r4, r0
 800316e:	4628      	mov	r0, r5
 8003170:	f000 f95c 	bl	800342c <_sbrk_r>
 8003174:	3001      	adds	r0, #1
 8003176:	d101      	bne.n	800317c <sbrk_aligned+0x38>
 8003178:	f04f 34ff 	mov.w	r4, #4294967295
 800317c:	4620      	mov	r0, r4
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	2000106c 	.word	0x2000106c

08003184 <_malloc_r>:
 8003184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003188:	1ccd      	adds	r5, r1, #3
 800318a:	f025 0503 	bic.w	r5, r5, #3
 800318e:	3508      	adds	r5, #8
 8003190:	2d0c      	cmp	r5, #12
 8003192:	bf38      	it	cc
 8003194:	250c      	movcc	r5, #12
 8003196:	2d00      	cmp	r5, #0
 8003198:	4607      	mov	r7, r0
 800319a:	db01      	blt.n	80031a0 <_malloc_r+0x1c>
 800319c:	42a9      	cmp	r1, r5
 800319e:	d905      	bls.n	80031ac <_malloc_r+0x28>
 80031a0:	230c      	movs	r3, #12
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	2600      	movs	r6, #0
 80031a6:	4630      	mov	r0, r6
 80031a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ac:	4e2e      	ldr	r6, [pc, #184]	; (8003268 <_malloc_r+0xe4>)
 80031ae:	f000 fbad 	bl	800390c <__malloc_lock>
 80031b2:	6833      	ldr	r3, [r6, #0]
 80031b4:	461c      	mov	r4, r3
 80031b6:	bb34      	cbnz	r4, 8003206 <_malloc_r+0x82>
 80031b8:	4629      	mov	r1, r5
 80031ba:	4638      	mov	r0, r7
 80031bc:	f7ff ffc2 	bl	8003144 <sbrk_aligned>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	4604      	mov	r4, r0
 80031c4:	d14d      	bne.n	8003262 <_malloc_r+0xde>
 80031c6:	6834      	ldr	r4, [r6, #0]
 80031c8:	4626      	mov	r6, r4
 80031ca:	2e00      	cmp	r6, #0
 80031cc:	d140      	bne.n	8003250 <_malloc_r+0xcc>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	4631      	mov	r1, r6
 80031d2:	4638      	mov	r0, r7
 80031d4:	eb04 0803 	add.w	r8, r4, r3
 80031d8:	f000 f928 	bl	800342c <_sbrk_r>
 80031dc:	4580      	cmp	r8, r0
 80031de:	d13a      	bne.n	8003256 <_malloc_r+0xd2>
 80031e0:	6821      	ldr	r1, [r4, #0]
 80031e2:	3503      	adds	r5, #3
 80031e4:	1a6d      	subs	r5, r5, r1
 80031e6:	f025 0503 	bic.w	r5, r5, #3
 80031ea:	3508      	adds	r5, #8
 80031ec:	2d0c      	cmp	r5, #12
 80031ee:	bf38      	it	cc
 80031f0:	250c      	movcc	r5, #12
 80031f2:	4629      	mov	r1, r5
 80031f4:	4638      	mov	r0, r7
 80031f6:	f7ff ffa5 	bl	8003144 <sbrk_aligned>
 80031fa:	3001      	adds	r0, #1
 80031fc:	d02b      	beq.n	8003256 <_malloc_r+0xd2>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	442b      	add	r3, r5
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	e00e      	b.n	8003224 <_malloc_r+0xa0>
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	1b52      	subs	r2, r2, r5
 800320a:	d41e      	bmi.n	800324a <_malloc_r+0xc6>
 800320c:	2a0b      	cmp	r2, #11
 800320e:	d916      	bls.n	800323e <_malloc_r+0xba>
 8003210:	1961      	adds	r1, r4, r5
 8003212:	42a3      	cmp	r3, r4
 8003214:	6025      	str	r5, [r4, #0]
 8003216:	bf18      	it	ne
 8003218:	6059      	strne	r1, [r3, #4]
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	bf08      	it	eq
 800321e:	6031      	streq	r1, [r6, #0]
 8003220:	5162      	str	r2, [r4, r5]
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	4638      	mov	r0, r7
 8003226:	f104 060b 	add.w	r6, r4, #11
 800322a:	f000 fb75 	bl	8003918 <__malloc_unlock>
 800322e:	f026 0607 	bic.w	r6, r6, #7
 8003232:	1d23      	adds	r3, r4, #4
 8003234:	1af2      	subs	r2, r6, r3
 8003236:	d0b6      	beq.n	80031a6 <_malloc_r+0x22>
 8003238:	1b9b      	subs	r3, r3, r6
 800323a:	50a3      	str	r3, [r4, r2]
 800323c:	e7b3      	b.n	80031a6 <_malloc_r+0x22>
 800323e:	6862      	ldr	r2, [r4, #4]
 8003240:	42a3      	cmp	r3, r4
 8003242:	bf0c      	ite	eq
 8003244:	6032      	streq	r2, [r6, #0]
 8003246:	605a      	strne	r2, [r3, #4]
 8003248:	e7ec      	b.n	8003224 <_malloc_r+0xa0>
 800324a:	4623      	mov	r3, r4
 800324c:	6864      	ldr	r4, [r4, #4]
 800324e:	e7b2      	b.n	80031b6 <_malloc_r+0x32>
 8003250:	4634      	mov	r4, r6
 8003252:	6876      	ldr	r6, [r6, #4]
 8003254:	e7b9      	b.n	80031ca <_malloc_r+0x46>
 8003256:	230c      	movs	r3, #12
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4638      	mov	r0, r7
 800325c:	f000 fb5c 	bl	8003918 <__malloc_unlock>
 8003260:	e7a1      	b.n	80031a6 <_malloc_r+0x22>
 8003262:	6025      	str	r5, [r4, #0]
 8003264:	e7de      	b.n	8003224 <_malloc_r+0xa0>
 8003266:	bf00      	nop
 8003268:	20001068 	.word	0x20001068

0800326c <_puts_r>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	460e      	mov	r6, r1
 8003270:	4605      	mov	r5, r0
 8003272:	b118      	cbz	r0, 800327c <_puts_r+0x10>
 8003274:	6983      	ldr	r3, [r0, #24]
 8003276:	b90b      	cbnz	r3, 800327c <_puts_r+0x10>
 8003278:	f7ff fe96 	bl	8002fa8 <__sinit>
 800327c:	69ab      	ldr	r3, [r5, #24]
 800327e:	68ac      	ldr	r4, [r5, #8]
 8003280:	b913      	cbnz	r3, 8003288 <_puts_r+0x1c>
 8003282:	4628      	mov	r0, r5
 8003284:	f7ff fe90 	bl	8002fa8 <__sinit>
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <_puts_r+0xd0>)
 800328a:	429c      	cmp	r4, r3
 800328c:	d120      	bne.n	80032d0 <_puts_r+0x64>
 800328e:	686c      	ldr	r4, [r5, #4]
 8003290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003292:	07db      	lsls	r3, r3, #31
 8003294:	d405      	bmi.n	80032a2 <_puts_r+0x36>
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	0598      	lsls	r0, r3, #22
 800329a:	d402      	bmi.n	80032a2 <_puts_r+0x36>
 800329c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329e:	f7ff ff46 	bl	800312e <__retarget_lock_acquire_recursive>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	0719      	lsls	r1, r3, #28
 80032a6:	d51d      	bpl.n	80032e4 <_puts_r+0x78>
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	b1db      	cbz	r3, 80032e4 <_puts_r+0x78>
 80032ac:	3e01      	subs	r6, #1
 80032ae:	68a3      	ldr	r3, [r4, #8]
 80032b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60a3      	str	r3, [r4, #8]
 80032b8:	bb39      	cbnz	r1, 800330a <_puts_r+0x9e>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da38      	bge.n	8003330 <_puts_r+0xc4>
 80032be:	4622      	mov	r2, r4
 80032c0:	210a      	movs	r1, #10
 80032c2:	4628      	mov	r0, r5
 80032c4:	f000 f906 	bl	80034d4 <__swbuf_r>
 80032c8:	3001      	adds	r0, #1
 80032ca:	d011      	beq.n	80032f0 <_puts_r+0x84>
 80032cc:	250a      	movs	r5, #10
 80032ce:	e011      	b.n	80032f4 <_puts_r+0x88>
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <_puts_r+0xd4>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	d101      	bne.n	80032da <_puts_r+0x6e>
 80032d6:	68ac      	ldr	r4, [r5, #8]
 80032d8:	e7da      	b.n	8003290 <_puts_r+0x24>
 80032da:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <_puts_r+0xd8>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	bf08      	it	eq
 80032e0:	68ec      	ldreq	r4, [r5, #12]
 80032e2:	e7d5      	b.n	8003290 <_puts_r+0x24>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 f958 	bl	800359c <__swsetup_r>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d0dd      	beq.n	80032ac <_puts_r+0x40>
 80032f0:	f04f 35ff 	mov.w	r5, #4294967295
 80032f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032f6:	07da      	lsls	r2, r3, #31
 80032f8:	d405      	bmi.n	8003306 <_puts_r+0x9a>
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	059b      	lsls	r3, r3, #22
 80032fe:	d402      	bmi.n	8003306 <_puts_r+0x9a>
 8003300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003302:	f7ff ff15 	bl	8003130 <__retarget_lock_release_recursive>
 8003306:	4628      	mov	r0, r5
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	2b00      	cmp	r3, #0
 800330c:	da04      	bge.n	8003318 <_puts_r+0xac>
 800330e:	69a2      	ldr	r2, [r4, #24]
 8003310:	429a      	cmp	r2, r3
 8003312:	dc06      	bgt.n	8003322 <_puts_r+0xb6>
 8003314:	290a      	cmp	r1, #10
 8003316:	d004      	beq.n	8003322 <_puts_r+0xb6>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	6022      	str	r2, [r4, #0]
 800331e:	7019      	strb	r1, [r3, #0]
 8003320:	e7c5      	b.n	80032ae <_puts_r+0x42>
 8003322:	4622      	mov	r2, r4
 8003324:	4628      	mov	r0, r5
 8003326:	f000 f8d5 	bl	80034d4 <__swbuf_r>
 800332a:	3001      	adds	r0, #1
 800332c:	d1bf      	bne.n	80032ae <_puts_r+0x42>
 800332e:	e7df      	b.n	80032f0 <_puts_r+0x84>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	250a      	movs	r5, #10
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	6022      	str	r2, [r4, #0]
 8003338:	701d      	strb	r5, [r3, #0]
 800333a:	e7db      	b.n	80032f4 <_puts_r+0x88>
 800333c:	08003b84 	.word	0x08003b84
 8003340:	08003ba4 	.word	0x08003ba4
 8003344:	08003b64 	.word	0x08003b64

08003348 <puts>:
 8003348:	4b02      	ldr	r3, [pc, #8]	; (8003354 <puts+0xc>)
 800334a:	4601      	mov	r1, r0
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f7ff bf8d 	b.w	800326c <_puts_r>
 8003352:	bf00      	nop
 8003354:	20000010 	.word	0x20000010

08003358 <cleanup_glue>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	460c      	mov	r4, r1
 800335c:	6809      	ldr	r1, [r1, #0]
 800335e:	4605      	mov	r5, r0
 8003360:	b109      	cbz	r1, 8003366 <cleanup_glue+0xe>
 8003362:	f7ff fff9 	bl	8003358 <cleanup_glue>
 8003366:	4621      	mov	r1, r4
 8003368:	4628      	mov	r0, r5
 800336a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800336e:	f000 bad9 	b.w	8003924 <_free_r>
	...

08003374 <_reclaim_reent>:
 8003374:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <_reclaim_reent+0xb4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4283      	cmp	r3, r0
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	4604      	mov	r4, r0
 800337e:	d051      	beq.n	8003424 <_reclaim_reent+0xb0>
 8003380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003382:	b143      	cbz	r3, 8003396 <_reclaim_reent+0x22>
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d14a      	bne.n	8003420 <_reclaim_reent+0xac>
 800338a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800338c:	6819      	ldr	r1, [r3, #0]
 800338e:	b111      	cbz	r1, 8003396 <_reclaim_reent+0x22>
 8003390:	4620      	mov	r0, r4
 8003392:	f000 fac7 	bl	8003924 <_free_r>
 8003396:	6961      	ldr	r1, [r4, #20]
 8003398:	b111      	cbz	r1, 80033a0 <_reclaim_reent+0x2c>
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fac2 	bl	8003924 <_free_r>
 80033a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033a2:	b111      	cbz	r1, 80033aa <_reclaim_reent+0x36>
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 fabd 	bl	8003924 <_free_r>
 80033aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80033ac:	b111      	cbz	r1, 80033b4 <_reclaim_reent+0x40>
 80033ae:	4620      	mov	r0, r4
 80033b0:	f000 fab8 	bl	8003924 <_free_r>
 80033b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80033b6:	b111      	cbz	r1, 80033be <_reclaim_reent+0x4a>
 80033b8:	4620      	mov	r0, r4
 80033ba:	f000 fab3 	bl	8003924 <_free_r>
 80033be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033c0:	b111      	cbz	r1, 80033c8 <_reclaim_reent+0x54>
 80033c2:	4620      	mov	r0, r4
 80033c4:	f000 faae 	bl	8003924 <_free_r>
 80033c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80033ca:	b111      	cbz	r1, 80033d2 <_reclaim_reent+0x5e>
 80033cc:	4620      	mov	r0, r4
 80033ce:	f000 faa9 	bl	8003924 <_free_r>
 80033d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80033d4:	b111      	cbz	r1, 80033dc <_reclaim_reent+0x68>
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 faa4 	bl	8003924 <_free_r>
 80033dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033de:	b111      	cbz	r1, 80033e6 <_reclaim_reent+0x72>
 80033e0:	4620      	mov	r0, r4
 80033e2:	f000 fa9f 	bl	8003924 <_free_r>
 80033e6:	69a3      	ldr	r3, [r4, #24]
 80033e8:	b1e3      	cbz	r3, 8003424 <_reclaim_reent+0xb0>
 80033ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033ec:	4620      	mov	r0, r4
 80033ee:	4798      	blx	r3
 80033f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80033f2:	b1b9      	cbz	r1, 8003424 <_reclaim_reent+0xb0>
 80033f4:	4620      	mov	r0, r4
 80033f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80033fa:	f7ff bfad 	b.w	8003358 <cleanup_glue>
 80033fe:	5949      	ldr	r1, [r1, r5]
 8003400:	b941      	cbnz	r1, 8003414 <_reclaim_reent+0xa0>
 8003402:	3504      	adds	r5, #4
 8003404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003406:	2d80      	cmp	r5, #128	; 0x80
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	d1f8      	bne.n	80033fe <_reclaim_reent+0x8a>
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fa89 	bl	8003924 <_free_r>
 8003412:	e7ba      	b.n	800338a <_reclaim_reent+0x16>
 8003414:	680e      	ldr	r6, [r1, #0]
 8003416:	4620      	mov	r0, r4
 8003418:	f000 fa84 	bl	8003924 <_free_r>
 800341c:	4631      	mov	r1, r6
 800341e:	e7ef      	b.n	8003400 <_reclaim_reent+0x8c>
 8003420:	2500      	movs	r5, #0
 8003422:	e7ef      	b.n	8003404 <_reclaim_reent+0x90>
 8003424:	bd70      	pop	{r4, r5, r6, pc}
 8003426:	bf00      	nop
 8003428:	20000010 	.word	0x20000010

0800342c <_sbrk_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d06      	ldr	r5, [pc, #24]	; (8003448 <_sbrk_r+0x1c>)
 8003430:	2300      	movs	r3, #0
 8003432:	4604      	mov	r4, r0
 8003434:	4608      	mov	r0, r1
 8003436:	602b      	str	r3, [r5, #0]
 8003438:	f7fd f8e6 	bl	8000608 <_sbrk>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_sbrk_r+0x1a>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_sbrk_r+0x1a>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20001070 	.word	0x20001070

0800344c <__sread>:
 800344c:	b510      	push	{r4, lr}
 800344e:	460c      	mov	r4, r1
 8003450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003454:	f000 fab2 	bl	80039bc <_read_r>
 8003458:	2800      	cmp	r0, #0
 800345a:	bfab      	itete	ge
 800345c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800345e:	89a3      	ldrhlt	r3, [r4, #12]
 8003460:	181b      	addge	r3, r3, r0
 8003462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003466:	bfac      	ite	ge
 8003468:	6563      	strge	r3, [r4, #84]	; 0x54
 800346a:	81a3      	strhlt	r3, [r4, #12]
 800346c:	bd10      	pop	{r4, pc}

0800346e <__swrite>:
 800346e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003472:	461f      	mov	r7, r3
 8003474:	898b      	ldrh	r3, [r1, #12]
 8003476:	05db      	lsls	r3, r3, #23
 8003478:	4605      	mov	r5, r0
 800347a:	460c      	mov	r4, r1
 800347c:	4616      	mov	r6, r2
 800347e:	d505      	bpl.n	800348c <__swrite+0x1e>
 8003480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003484:	2302      	movs	r3, #2
 8003486:	2200      	movs	r2, #0
 8003488:	f000 f9c8 	bl	800381c <_lseek_r>
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	4632      	mov	r2, r6
 800349a:	463b      	mov	r3, r7
 800349c:	4628      	mov	r0, r5
 800349e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034a2:	f000 b869 	b.w	8003578 <_write_r>

080034a6 <__sseek>:
 80034a6:	b510      	push	{r4, lr}
 80034a8:	460c      	mov	r4, r1
 80034aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ae:	f000 f9b5 	bl	800381c <_lseek_r>
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	bf15      	itete	ne
 80034b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034c2:	81a3      	strheq	r3, [r4, #12]
 80034c4:	bf18      	it	ne
 80034c6:	81a3      	strhne	r3, [r4, #12]
 80034c8:	bd10      	pop	{r4, pc}

080034ca <__sclose>:
 80034ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ce:	f000 b8d3 	b.w	8003678 <_close_r>
	...

080034d4 <__swbuf_r>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	460e      	mov	r6, r1
 80034d8:	4614      	mov	r4, r2
 80034da:	4605      	mov	r5, r0
 80034dc:	b118      	cbz	r0, 80034e6 <__swbuf_r+0x12>
 80034de:	6983      	ldr	r3, [r0, #24]
 80034e0:	b90b      	cbnz	r3, 80034e6 <__swbuf_r+0x12>
 80034e2:	f7ff fd61 	bl	8002fa8 <__sinit>
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <__swbuf_r+0x98>)
 80034e8:	429c      	cmp	r4, r3
 80034ea:	d12b      	bne.n	8003544 <__swbuf_r+0x70>
 80034ec:	686c      	ldr	r4, [r5, #4]
 80034ee:	69a3      	ldr	r3, [r4, #24]
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	071a      	lsls	r2, r3, #28
 80034f6:	d52f      	bpl.n	8003558 <__swbuf_r+0x84>
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	b36b      	cbz	r3, 8003558 <__swbuf_r+0x84>
 80034fc:	6923      	ldr	r3, [r4, #16]
 80034fe:	6820      	ldr	r0, [r4, #0]
 8003500:	1ac0      	subs	r0, r0, r3
 8003502:	6963      	ldr	r3, [r4, #20]
 8003504:	b2f6      	uxtb	r6, r6
 8003506:	4283      	cmp	r3, r0
 8003508:	4637      	mov	r7, r6
 800350a:	dc04      	bgt.n	8003516 <__swbuf_r+0x42>
 800350c:	4621      	mov	r1, r4
 800350e:	4628      	mov	r0, r5
 8003510:	f000 f948 	bl	80037a4 <_fflush_r>
 8003514:	bb30      	cbnz	r0, 8003564 <__swbuf_r+0x90>
 8003516:	68a3      	ldr	r3, [r4, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60a3      	str	r3, [r4, #8]
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	6022      	str	r2, [r4, #0]
 8003522:	701e      	strb	r6, [r3, #0]
 8003524:	6963      	ldr	r3, [r4, #20]
 8003526:	3001      	adds	r0, #1
 8003528:	4283      	cmp	r3, r0
 800352a:	d004      	beq.n	8003536 <__swbuf_r+0x62>
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	07db      	lsls	r3, r3, #31
 8003530:	d506      	bpl.n	8003540 <__swbuf_r+0x6c>
 8003532:	2e0a      	cmp	r6, #10
 8003534:	d104      	bne.n	8003540 <__swbuf_r+0x6c>
 8003536:	4621      	mov	r1, r4
 8003538:	4628      	mov	r0, r5
 800353a:	f000 f933 	bl	80037a4 <_fflush_r>
 800353e:	b988      	cbnz	r0, 8003564 <__swbuf_r+0x90>
 8003540:	4638      	mov	r0, r7
 8003542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <__swbuf_r+0x9c>)
 8003546:	429c      	cmp	r4, r3
 8003548:	d101      	bne.n	800354e <__swbuf_r+0x7a>
 800354a:	68ac      	ldr	r4, [r5, #8]
 800354c:	e7cf      	b.n	80034ee <__swbuf_r+0x1a>
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <__swbuf_r+0xa0>)
 8003550:	429c      	cmp	r4, r3
 8003552:	bf08      	it	eq
 8003554:	68ec      	ldreq	r4, [r5, #12]
 8003556:	e7ca      	b.n	80034ee <__swbuf_r+0x1a>
 8003558:	4621      	mov	r1, r4
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f81e 	bl	800359c <__swsetup_r>
 8003560:	2800      	cmp	r0, #0
 8003562:	d0cb      	beq.n	80034fc <__swbuf_r+0x28>
 8003564:	f04f 37ff 	mov.w	r7, #4294967295
 8003568:	e7ea      	b.n	8003540 <__swbuf_r+0x6c>
 800356a:	bf00      	nop
 800356c:	08003b84 	.word	0x08003b84
 8003570:	08003ba4 	.word	0x08003ba4
 8003574:	08003b64 	.word	0x08003b64

08003578 <_write_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4d07      	ldr	r5, [pc, #28]	; (8003598 <_write_r+0x20>)
 800357c:	4604      	mov	r4, r0
 800357e:	4608      	mov	r0, r1
 8003580:	4611      	mov	r1, r2
 8003582:	2200      	movs	r2, #0
 8003584:	602a      	str	r2, [r5, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	f7fc fe63 	bl	8000252 <_write>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_write_r+0x1e>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_write_r+0x1e>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	20001070 	.word	0x20001070

0800359c <__swsetup_r>:
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <__swsetup_r+0xcc>)
 800359e:	b570      	push	{r4, r5, r6, lr}
 80035a0:	681d      	ldr	r5, [r3, #0]
 80035a2:	4606      	mov	r6, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	b125      	cbz	r5, 80035b2 <__swsetup_r+0x16>
 80035a8:	69ab      	ldr	r3, [r5, #24]
 80035aa:	b913      	cbnz	r3, 80035b2 <__swsetup_r+0x16>
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7ff fcfb 	bl	8002fa8 <__sinit>
 80035b2:	4b2e      	ldr	r3, [pc, #184]	; (800366c <__swsetup_r+0xd0>)
 80035b4:	429c      	cmp	r4, r3
 80035b6:	d10f      	bne.n	80035d8 <__swsetup_r+0x3c>
 80035b8:	686c      	ldr	r4, [r5, #4]
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035c0:	0719      	lsls	r1, r3, #28
 80035c2:	d42c      	bmi.n	800361e <__swsetup_r+0x82>
 80035c4:	06dd      	lsls	r5, r3, #27
 80035c6:	d411      	bmi.n	80035ec <__swsetup_r+0x50>
 80035c8:	2309      	movs	r3, #9
 80035ca:	6033      	str	r3, [r6, #0]
 80035cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035d0:	81a3      	strh	r3, [r4, #12]
 80035d2:	f04f 30ff 	mov.w	r0, #4294967295
 80035d6:	e03e      	b.n	8003656 <__swsetup_r+0xba>
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <__swsetup_r+0xd4>)
 80035da:	429c      	cmp	r4, r3
 80035dc:	d101      	bne.n	80035e2 <__swsetup_r+0x46>
 80035de:	68ac      	ldr	r4, [r5, #8]
 80035e0:	e7eb      	b.n	80035ba <__swsetup_r+0x1e>
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <__swsetup_r+0xd8>)
 80035e4:	429c      	cmp	r4, r3
 80035e6:	bf08      	it	eq
 80035e8:	68ec      	ldreq	r4, [r5, #12]
 80035ea:	e7e6      	b.n	80035ba <__swsetup_r+0x1e>
 80035ec:	0758      	lsls	r0, r3, #29
 80035ee:	d512      	bpl.n	8003616 <__swsetup_r+0x7a>
 80035f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035f2:	b141      	cbz	r1, 8003606 <__swsetup_r+0x6a>
 80035f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035f8:	4299      	cmp	r1, r3
 80035fa:	d002      	beq.n	8003602 <__swsetup_r+0x66>
 80035fc:	4630      	mov	r0, r6
 80035fe:	f000 f991 	bl	8003924 <_free_r>
 8003602:	2300      	movs	r3, #0
 8003604:	6363      	str	r3, [r4, #52]	; 0x34
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800360c:	81a3      	strh	r3, [r4, #12]
 800360e:	2300      	movs	r3, #0
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	6923      	ldr	r3, [r4, #16]
 8003614:	6023      	str	r3, [r4, #0]
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	6923      	ldr	r3, [r4, #16]
 8003620:	b94b      	cbnz	r3, 8003636 <__swsetup_r+0x9a>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d003      	beq.n	8003636 <__swsetup_r+0x9a>
 800362e:	4621      	mov	r1, r4
 8003630:	4630      	mov	r0, r6
 8003632:	f000 f92b 	bl	800388c <__smakebuf_r>
 8003636:	89a0      	ldrh	r0, [r4, #12]
 8003638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800363c:	f010 0301 	ands.w	r3, r0, #1
 8003640:	d00a      	beq.n	8003658 <__swsetup_r+0xbc>
 8003642:	2300      	movs	r3, #0
 8003644:	60a3      	str	r3, [r4, #8]
 8003646:	6963      	ldr	r3, [r4, #20]
 8003648:	425b      	negs	r3, r3
 800364a:	61a3      	str	r3, [r4, #24]
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	b943      	cbnz	r3, 8003662 <__swsetup_r+0xc6>
 8003650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003654:	d1ba      	bne.n	80035cc <__swsetup_r+0x30>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	0781      	lsls	r1, r0, #30
 800365a:	bf58      	it	pl
 800365c:	6963      	ldrpl	r3, [r4, #20]
 800365e:	60a3      	str	r3, [r4, #8]
 8003660:	e7f4      	b.n	800364c <__swsetup_r+0xb0>
 8003662:	2000      	movs	r0, #0
 8003664:	e7f7      	b.n	8003656 <__swsetup_r+0xba>
 8003666:	bf00      	nop
 8003668:	20000010 	.word	0x20000010
 800366c:	08003b84 	.word	0x08003b84
 8003670:	08003ba4 	.word	0x08003ba4
 8003674:	08003b64 	.word	0x08003b64

08003678 <_close_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d06      	ldr	r5, [pc, #24]	; (8003694 <_close_r+0x1c>)
 800367c:	2300      	movs	r3, #0
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	f7fc ff8c 	bl	80005a0 <_close>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_close_r+0x1a>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	b103      	cbz	r3, 8003692 <_close_r+0x1a>
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	20001070 	.word	0x20001070

08003698 <__sflush_r>:
 8003698:	898a      	ldrh	r2, [r1, #12]
 800369a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369e:	4605      	mov	r5, r0
 80036a0:	0710      	lsls	r0, r2, #28
 80036a2:	460c      	mov	r4, r1
 80036a4:	d458      	bmi.n	8003758 <__sflush_r+0xc0>
 80036a6:	684b      	ldr	r3, [r1, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dc05      	bgt.n	80036b8 <__sflush_r+0x20>
 80036ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dc02      	bgt.n	80036b8 <__sflush_r+0x20>
 80036b2:	2000      	movs	r0, #0
 80036b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ba:	2e00      	cmp	r6, #0
 80036bc:	d0f9      	beq.n	80036b2 <__sflush_r+0x1a>
 80036be:	2300      	movs	r3, #0
 80036c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c4:	682f      	ldr	r7, [r5, #0]
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	d032      	beq.n	8003730 <__sflush_r+0x98>
 80036ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	075a      	lsls	r2, r3, #29
 80036d0:	d505      	bpl.n	80036de <__sflush_r+0x46>
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	1ac0      	subs	r0, r0, r3
 80036d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d8:	b10b      	cbz	r3, 80036de <__sflush_r+0x46>
 80036da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036dc:	1ac0      	subs	r0, r0, r3
 80036de:	2300      	movs	r3, #0
 80036e0:	4602      	mov	r2, r0
 80036e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e4:	6a21      	ldr	r1, [r4, #32]
 80036e6:	4628      	mov	r0, r5
 80036e8:	47b0      	blx	r6
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	d106      	bne.n	80036fe <__sflush_r+0x66>
 80036f0:	6829      	ldr	r1, [r5, #0]
 80036f2:	291d      	cmp	r1, #29
 80036f4:	d82c      	bhi.n	8003750 <__sflush_r+0xb8>
 80036f6:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <__sflush_r+0x108>)
 80036f8:	40ca      	lsrs	r2, r1
 80036fa:	07d6      	lsls	r6, r2, #31
 80036fc:	d528      	bpl.n	8003750 <__sflush_r+0xb8>
 80036fe:	2200      	movs	r2, #0
 8003700:	6062      	str	r2, [r4, #4]
 8003702:	04d9      	lsls	r1, r3, #19
 8003704:	6922      	ldr	r2, [r4, #16]
 8003706:	6022      	str	r2, [r4, #0]
 8003708:	d504      	bpl.n	8003714 <__sflush_r+0x7c>
 800370a:	1c42      	adds	r2, r0, #1
 800370c:	d101      	bne.n	8003712 <__sflush_r+0x7a>
 800370e:	682b      	ldr	r3, [r5, #0]
 8003710:	b903      	cbnz	r3, 8003714 <__sflush_r+0x7c>
 8003712:	6560      	str	r0, [r4, #84]	; 0x54
 8003714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003716:	602f      	str	r7, [r5, #0]
 8003718:	2900      	cmp	r1, #0
 800371a:	d0ca      	beq.n	80036b2 <__sflush_r+0x1a>
 800371c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003720:	4299      	cmp	r1, r3
 8003722:	d002      	beq.n	800372a <__sflush_r+0x92>
 8003724:	4628      	mov	r0, r5
 8003726:	f000 f8fd 	bl	8003924 <_free_r>
 800372a:	2000      	movs	r0, #0
 800372c:	6360      	str	r0, [r4, #52]	; 0x34
 800372e:	e7c1      	b.n	80036b4 <__sflush_r+0x1c>
 8003730:	6a21      	ldr	r1, [r4, #32]
 8003732:	2301      	movs	r3, #1
 8003734:	4628      	mov	r0, r5
 8003736:	47b0      	blx	r6
 8003738:	1c41      	adds	r1, r0, #1
 800373a:	d1c7      	bne.n	80036cc <__sflush_r+0x34>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0c4      	beq.n	80036cc <__sflush_r+0x34>
 8003742:	2b1d      	cmp	r3, #29
 8003744:	d001      	beq.n	800374a <__sflush_r+0xb2>
 8003746:	2b16      	cmp	r3, #22
 8003748:	d101      	bne.n	800374e <__sflush_r+0xb6>
 800374a:	602f      	str	r7, [r5, #0]
 800374c:	e7b1      	b.n	80036b2 <__sflush_r+0x1a>
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	e7ad      	b.n	80036b4 <__sflush_r+0x1c>
 8003758:	690f      	ldr	r7, [r1, #16]
 800375a:	2f00      	cmp	r7, #0
 800375c:	d0a9      	beq.n	80036b2 <__sflush_r+0x1a>
 800375e:	0793      	lsls	r3, r2, #30
 8003760:	680e      	ldr	r6, [r1, #0]
 8003762:	bf08      	it	eq
 8003764:	694b      	ldreq	r3, [r1, #20]
 8003766:	600f      	str	r7, [r1, #0]
 8003768:	bf18      	it	ne
 800376a:	2300      	movne	r3, #0
 800376c:	eba6 0807 	sub.w	r8, r6, r7
 8003770:	608b      	str	r3, [r1, #8]
 8003772:	f1b8 0f00 	cmp.w	r8, #0
 8003776:	dd9c      	ble.n	80036b2 <__sflush_r+0x1a>
 8003778:	6a21      	ldr	r1, [r4, #32]
 800377a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800377c:	4643      	mov	r3, r8
 800377e:	463a      	mov	r2, r7
 8003780:	4628      	mov	r0, r5
 8003782:	47b0      	blx	r6
 8003784:	2800      	cmp	r0, #0
 8003786:	dc06      	bgt.n	8003796 <__sflush_r+0xfe>
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	e78e      	b.n	80036b4 <__sflush_r+0x1c>
 8003796:	4407      	add	r7, r0
 8003798:	eba8 0800 	sub.w	r8, r8, r0
 800379c:	e7e9      	b.n	8003772 <__sflush_r+0xda>
 800379e:	bf00      	nop
 80037a0:	20400001 	.word	0x20400001

080037a4 <_fflush_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	690b      	ldr	r3, [r1, #16]
 80037a8:	4605      	mov	r5, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	b913      	cbnz	r3, 80037b4 <_fflush_r+0x10>
 80037ae:	2500      	movs	r5, #0
 80037b0:	4628      	mov	r0, r5
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	b118      	cbz	r0, 80037be <_fflush_r+0x1a>
 80037b6:	6983      	ldr	r3, [r0, #24]
 80037b8:	b90b      	cbnz	r3, 80037be <_fflush_r+0x1a>
 80037ba:	f7ff fbf5 	bl	8002fa8 <__sinit>
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <_fflush_r+0x6c>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d11b      	bne.n	80037fc <_fflush_r+0x58>
 80037c4:	686c      	ldr	r4, [r5, #4]
 80037c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <_fflush_r+0xa>
 80037ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037d0:	07d0      	lsls	r0, r2, #31
 80037d2:	d404      	bmi.n	80037de <_fflush_r+0x3a>
 80037d4:	0599      	lsls	r1, r3, #22
 80037d6:	d402      	bmi.n	80037de <_fflush_r+0x3a>
 80037d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037da:	f7ff fca8 	bl	800312e <__retarget_lock_acquire_recursive>
 80037de:	4628      	mov	r0, r5
 80037e0:	4621      	mov	r1, r4
 80037e2:	f7ff ff59 	bl	8003698 <__sflush_r>
 80037e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e8:	07da      	lsls	r2, r3, #31
 80037ea:	4605      	mov	r5, r0
 80037ec:	d4e0      	bmi.n	80037b0 <_fflush_r+0xc>
 80037ee:	89a3      	ldrh	r3, [r4, #12]
 80037f0:	059b      	lsls	r3, r3, #22
 80037f2:	d4dd      	bmi.n	80037b0 <_fflush_r+0xc>
 80037f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037f6:	f7ff fc9b 	bl	8003130 <__retarget_lock_release_recursive>
 80037fa:	e7d9      	b.n	80037b0 <_fflush_r+0xc>
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <_fflush_r+0x70>)
 80037fe:	429c      	cmp	r4, r3
 8003800:	d101      	bne.n	8003806 <_fflush_r+0x62>
 8003802:	68ac      	ldr	r4, [r5, #8]
 8003804:	e7df      	b.n	80037c6 <_fflush_r+0x22>
 8003806:	4b04      	ldr	r3, [pc, #16]	; (8003818 <_fflush_r+0x74>)
 8003808:	429c      	cmp	r4, r3
 800380a:	bf08      	it	eq
 800380c:	68ec      	ldreq	r4, [r5, #12]
 800380e:	e7da      	b.n	80037c6 <_fflush_r+0x22>
 8003810:	08003b84 	.word	0x08003b84
 8003814:	08003ba4 	.word	0x08003ba4
 8003818:	08003b64 	.word	0x08003b64

0800381c <_lseek_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4d07      	ldr	r5, [pc, #28]	; (800383c <_lseek_r+0x20>)
 8003820:	4604      	mov	r4, r0
 8003822:	4608      	mov	r0, r1
 8003824:	4611      	mov	r1, r2
 8003826:	2200      	movs	r2, #0
 8003828:	602a      	str	r2, [r5, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f7fc fedf 	bl	80005ee <_lseek>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d102      	bne.n	800383a <_lseek_r+0x1e>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	b103      	cbz	r3, 800383a <_lseek_r+0x1e>
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	bd38      	pop	{r3, r4, r5, pc}
 800383c:	20001070 	.word	0x20001070

08003840 <__swhatbuf_r>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	460e      	mov	r6, r1
 8003844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003848:	2900      	cmp	r1, #0
 800384a:	b096      	sub	sp, #88	; 0x58
 800384c:	4614      	mov	r4, r2
 800384e:	461d      	mov	r5, r3
 8003850:	da08      	bge.n	8003864 <__swhatbuf_r+0x24>
 8003852:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	602a      	str	r2, [r5, #0]
 800385a:	061a      	lsls	r2, r3, #24
 800385c:	d410      	bmi.n	8003880 <__swhatbuf_r+0x40>
 800385e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003862:	e00e      	b.n	8003882 <__swhatbuf_r+0x42>
 8003864:	466a      	mov	r2, sp
 8003866:	f000 f8bb 	bl	80039e0 <_fstat_r>
 800386a:	2800      	cmp	r0, #0
 800386c:	dbf1      	blt.n	8003852 <__swhatbuf_r+0x12>
 800386e:	9a01      	ldr	r2, [sp, #4]
 8003870:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003874:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003878:	425a      	negs	r2, r3
 800387a:	415a      	adcs	r2, r3
 800387c:	602a      	str	r2, [r5, #0]
 800387e:	e7ee      	b.n	800385e <__swhatbuf_r+0x1e>
 8003880:	2340      	movs	r3, #64	; 0x40
 8003882:	2000      	movs	r0, #0
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	b016      	add	sp, #88	; 0x58
 8003888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800388c <__smakebuf_r>:
 800388c:	898b      	ldrh	r3, [r1, #12]
 800388e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003890:	079d      	lsls	r5, r3, #30
 8003892:	4606      	mov	r6, r0
 8003894:	460c      	mov	r4, r1
 8003896:	d507      	bpl.n	80038a8 <__smakebuf_r+0x1c>
 8003898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	6123      	str	r3, [r4, #16]
 80038a0:	2301      	movs	r3, #1
 80038a2:	6163      	str	r3, [r4, #20]
 80038a4:	b002      	add	sp, #8
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	ab01      	add	r3, sp, #4
 80038aa:	466a      	mov	r2, sp
 80038ac:	f7ff ffc8 	bl	8003840 <__swhatbuf_r>
 80038b0:	9900      	ldr	r1, [sp, #0]
 80038b2:	4605      	mov	r5, r0
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7ff fc65 	bl	8003184 <_malloc_r>
 80038ba:	b948      	cbnz	r0, 80038d0 <__smakebuf_r+0x44>
 80038bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c0:	059a      	lsls	r2, r3, #22
 80038c2:	d4ef      	bmi.n	80038a4 <__smakebuf_r+0x18>
 80038c4:	f023 0303 	bic.w	r3, r3, #3
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	81a3      	strh	r3, [r4, #12]
 80038ce:	e7e3      	b.n	8003898 <__smakebuf_r+0xc>
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <__smakebuf_r+0x7c>)
 80038d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	6020      	str	r0, [r4, #0]
 80038d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	9b00      	ldr	r3, [sp, #0]
 80038e0:	6163      	str	r3, [r4, #20]
 80038e2:	9b01      	ldr	r3, [sp, #4]
 80038e4:	6120      	str	r0, [r4, #16]
 80038e6:	b15b      	cbz	r3, 8003900 <__smakebuf_r+0x74>
 80038e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f889 	bl	8003a04 <_isatty_r>
 80038f2:	b128      	cbz	r0, 8003900 <__smakebuf_r+0x74>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	89a0      	ldrh	r0, [r4, #12]
 8003902:	4305      	orrs	r5, r0
 8003904:	81a5      	strh	r5, [r4, #12]
 8003906:	e7cd      	b.n	80038a4 <__smakebuf_r+0x18>
 8003908:	08002f41 	.word	0x08002f41

0800390c <__malloc_lock>:
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <__malloc_lock+0x8>)
 800390e:	f7ff bc0e 	b.w	800312e <__retarget_lock_acquire_recursive>
 8003912:	bf00      	nop
 8003914:	20001064 	.word	0x20001064

08003918 <__malloc_unlock>:
 8003918:	4801      	ldr	r0, [pc, #4]	; (8003920 <__malloc_unlock+0x8>)
 800391a:	f7ff bc09 	b.w	8003130 <__retarget_lock_release_recursive>
 800391e:	bf00      	nop
 8003920:	20001064 	.word	0x20001064

08003924 <_free_r>:
 8003924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003926:	2900      	cmp	r1, #0
 8003928:	d044      	beq.n	80039b4 <_free_r+0x90>
 800392a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800392e:	9001      	str	r0, [sp, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f1a1 0404 	sub.w	r4, r1, #4
 8003936:	bfb8      	it	lt
 8003938:	18e4      	addlt	r4, r4, r3
 800393a:	f7ff ffe7 	bl	800390c <__malloc_lock>
 800393e:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <_free_r+0x94>)
 8003940:	9801      	ldr	r0, [sp, #4]
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	b933      	cbnz	r3, 8003954 <_free_r+0x30>
 8003946:	6063      	str	r3, [r4, #4]
 8003948:	6014      	str	r4, [r2, #0]
 800394a:	b003      	add	sp, #12
 800394c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003950:	f7ff bfe2 	b.w	8003918 <__malloc_unlock>
 8003954:	42a3      	cmp	r3, r4
 8003956:	d908      	bls.n	800396a <_free_r+0x46>
 8003958:	6825      	ldr	r5, [r4, #0]
 800395a:	1961      	adds	r1, r4, r5
 800395c:	428b      	cmp	r3, r1
 800395e:	bf01      	itttt	eq
 8003960:	6819      	ldreq	r1, [r3, #0]
 8003962:	685b      	ldreq	r3, [r3, #4]
 8003964:	1949      	addeq	r1, r1, r5
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	e7ed      	b.n	8003946 <_free_r+0x22>
 800396a:	461a      	mov	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	b10b      	cbz	r3, 8003974 <_free_r+0x50>
 8003970:	42a3      	cmp	r3, r4
 8003972:	d9fa      	bls.n	800396a <_free_r+0x46>
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	1855      	adds	r5, r2, r1
 8003978:	42a5      	cmp	r5, r4
 800397a:	d10b      	bne.n	8003994 <_free_r+0x70>
 800397c:	6824      	ldr	r4, [r4, #0]
 800397e:	4421      	add	r1, r4
 8003980:	1854      	adds	r4, r2, r1
 8003982:	42a3      	cmp	r3, r4
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	d1e0      	bne.n	800394a <_free_r+0x26>
 8003988:	681c      	ldr	r4, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	6053      	str	r3, [r2, #4]
 800398e:	4421      	add	r1, r4
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	e7da      	b.n	800394a <_free_r+0x26>
 8003994:	d902      	bls.n	800399c <_free_r+0x78>
 8003996:	230c      	movs	r3, #12
 8003998:	6003      	str	r3, [r0, #0]
 800399a:	e7d6      	b.n	800394a <_free_r+0x26>
 800399c:	6825      	ldr	r5, [r4, #0]
 800399e:	1961      	adds	r1, r4, r5
 80039a0:	428b      	cmp	r3, r1
 80039a2:	bf04      	itt	eq
 80039a4:	6819      	ldreq	r1, [r3, #0]
 80039a6:	685b      	ldreq	r3, [r3, #4]
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	bf04      	itt	eq
 80039ac:	1949      	addeq	r1, r1, r5
 80039ae:	6021      	streq	r1, [r4, #0]
 80039b0:	6054      	str	r4, [r2, #4]
 80039b2:	e7ca      	b.n	800394a <_free_r+0x26>
 80039b4:	b003      	add	sp, #12
 80039b6:	bd30      	pop	{r4, r5, pc}
 80039b8:	20001068 	.word	0x20001068

080039bc <_read_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	4d07      	ldr	r5, [pc, #28]	; (80039dc <_read_r+0x20>)
 80039c0:	4604      	mov	r4, r0
 80039c2:	4608      	mov	r0, r1
 80039c4:	4611      	mov	r1, r2
 80039c6:	2200      	movs	r2, #0
 80039c8:	602a      	str	r2, [r5, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f7fc fdcb 	bl	8000566 <_read>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_read_r+0x1e>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_read_r+0x1e>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20001070 	.word	0x20001070

080039e0 <_fstat_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4d07      	ldr	r5, [pc, #28]	; (8003a00 <_fstat_r+0x20>)
 80039e4:	2300      	movs	r3, #0
 80039e6:	4604      	mov	r4, r0
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	f7fc fde3 	bl	80005b8 <_fstat>
 80039f2:	1c43      	adds	r3, r0, #1
 80039f4:	d102      	bne.n	80039fc <_fstat_r+0x1c>
 80039f6:	682b      	ldr	r3, [r5, #0]
 80039f8:	b103      	cbz	r3, 80039fc <_fstat_r+0x1c>
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	20001070 	.word	0x20001070

08003a04 <_isatty_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d06      	ldr	r5, [pc, #24]	; (8003a20 <_isatty_r+0x1c>)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	f7fc fde2 	bl	80005d8 <_isatty>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	d102      	bne.n	8003a1e <_isatty_r+0x1a>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b103      	cbz	r3, 8003a1e <_isatty_r+0x1a>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	20001070 	.word	0x20001070

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
