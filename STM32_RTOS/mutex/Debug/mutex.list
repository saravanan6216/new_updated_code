
mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c0  080050c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080050c0  080050c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050c0  080050c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  20000074  0800513c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001060  0800513c  00021060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f1d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cca  00000000  00000000  00031fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00034c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a16  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129af  00000000  00000000  0005f8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f71a3  00000000  00000000  000722ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169450  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb4  00000000  00000000  001694a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f18 	.word	0x08004f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004f18 	.word	0x08004f18

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	200000e4 	.word	0x200000e4

08000204 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800020c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000210:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d013      	beq.n	8000244 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800021c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000220:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000224:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00b      	beq.n	8000244 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800022c:	e000      	b.n	8000230 <ITM_SendChar+0x2c>
    {
      __NOP();
 800022e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000230:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800023a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000244:	687b      	ldr	r3, [r7, #4]
}
 8000246:	4618      	mov	r0, r3
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <_write>:
#include "cmsis_os.h"
#include "stdio.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
int _write(int file,char *ptr,int len)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b086      	sub	sp, #24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
    int i=0;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	e009      	b.n	800027c <_write+0x2a>
    	ITM_SendChar((*ptr++));
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	1c5a      	adds	r2, r3, #1
 800026c:	60ba      	str	r2, [r7, #8]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ffc7 	bl	8000204 <ITM_SendChar>
    for(i=0;i<len;i++)
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	3301      	adds	r3, #1
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	dbf1      	blt.n	8000268 <_write+0x16>
    return len;
 8000284:	687b      	ldr	r3, [r7, #4]
}
 8000286:	4618      	mov	r0, r3
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b090      	sub	sp, #64	; 0x40
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fad9 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f83f 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f88f 	bl	80003c0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 80002a2:	2300      	movs	r3, #0
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80002a6:	2300      	movs	r3, #0
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  mutexHandle = osMutexCreate(osMutex(mutex));
 80002aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 ffb3 	bl	800221a <osMutexCreate>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a14      	ldr	r2, [pc, #80]	; (8000308 <main+0x78>)
 80002b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTASK */
  osThreadDef(buttonTASK, pushbutton, 1, 0, 128);
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <main+0x7c>)
 80002bc:	f107 041c 	add.w	r4, r7, #28
 80002c0:	461d      	mov	r5, r3
 80002c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTASKHandle = osThreadCreate(osThread(buttonTASK), NULL);
 80002ce:	f107 031c 	add.w	r3, r7, #28
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 ff40 	bl	800215a <osThreadCreate>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <main+0x80>)
 80002de:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledtask */
  osThreadDef(ledtask, led, osPriorityNormal, 0, 128);
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <main+0x84>)
 80002e2:	463c      	mov	r4, r7
 80002e4:	461d      	mov	r5, r3
 80002e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledtaskHandle = osThreadCreate(osThread(ledtask), NULL);
 80002f2:	463b      	mov	r3, r7
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 ff2f 	bl	800215a <osThreadCreate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a06      	ldr	r2, [pc, #24]	; (8000318 <main+0x88>)
 8000300:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000302:	f001 ff23 	bl	800214c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000306:	e7fe      	b.n	8000306 <main+0x76>
 8000308:	200002ec 	.word	0x200002ec
 800030c:	08004f44 	.word	0x08004f44
 8000310:	200002e4 	.word	0x200002e4
 8000314:	08004f60 	.word	0x08004f60
 8000318:	200002e8 	.word	0x200002e8

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b096      	sub	sp, #88	; 0x58
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	2244      	movs	r2, #68	; 0x44
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 f8ee 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	463b      	mov	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800033e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000342:	f000 fda7 	bl	8000e94 <HAL_PWREx_ControlVoltageScaling>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800034c:	f000 f8fe 	bl	800054c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000350:	2302      	movs	r3, #2
 8000352:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000366:	2301      	movs	r3, #1
 8000368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800036a:	230a      	movs	r3, #10
 800036c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800036e:	2307      	movs	r3, #7
 8000370:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000372:	2302      	movs	r3, #2
 8000374:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000376:	2302      	movs	r3, #2
 8000378:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fdde 	bl	8000f40 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800038a:	f000 f8df 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2303      	movs	r3, #3
 8000394:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003a2:	463b      	mov	r3, r7
 80003a4:	2104      	movs	r1, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 f9a6 	bl	80016f8 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003b2:	f000 f8cb 	bl	800054c <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3758      	adds	r7, #88	; 0x58
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_GPIO_Init+0xac>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a24      	ldr	r2, [pc, #144]	; (800046c <MX_GPIO_Init+0xac>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_GPIO_Init+0xac>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0304 	and.w	r3, r3, #4
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_GPIO_Init+0xac>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <MX_GPIO_Init+0xac>)
 80003f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_GPIO_Init+0xac>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_GPIO_Init+0xac>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <MX_GPIO_Init+0xac>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_GPIO_Init+0xac>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2120      	movs	r1, #32
 8000422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000426:	f000 fcf5 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4619      	mov	r1, r3
 800043e:	480c      	ldr	r0, [pc, #48]	; (8000470 <MX_GPIO_Init+0xb0>)
 8000440:	f000 fb26 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000444:	2320      	movs	r3, #32
 8000446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 030c 	add.w	r3, r7, #12
 8000458:	4619      	mov	r1, r3
 800045a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045e:	f000 fb17 	bl	8000a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000462:	bf00      	nop
 8000464:	3720      	adds	r7, #32
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000
 8000470:	48000800 	.word	0x48000800

08000474 <pushbutton>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_pushbutton */
void pushbutton(void const * argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(mutexHandle,10);
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <pushbutton+0x4c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	210a      	movs	r1, #10
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fa1a 	bl	80028bc <xQueueSemaphoreTake>
	  printf("push button aquire the mutex\n");
 8000488:	480e      	ldr	r0, [pc, #56]	; (80004c4 <pushbutton+0x50>)
 800048a:	f004 f8b5 	bl	80045f8 <puts>
	  while((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))==1)
 800048e:	e006      	b.n	800049e <pushbutton+0x2a>
	  {
	  xSemaphoreGive(mutexHandle);
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <pushbutton+0x4c>)
 8000492:	6818      	ldr	r0, [r3, #0]
 8000494:	2300      	movs	r3, #0
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	f002 f911 	bl	80026c0 <xQueueGenericSend>
	  while((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))==1)
 800049e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a2:	4809      	ldr	r0, [pc, #36]	; (80004c8 <pushbutton+0x54>)
 80004a4:	f000 fc9e 	bl	8000de4 <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d0f0      	beq.n	8000490 <pushbutton+0x1c>
	  }
	  printf("push button release the mutex\n");
 80004ae:	4807      	ldr	r0, [pc, #28]	; (80004cc <pushbutton+0x58>)
 80004b0:	f004 f8a2 	bl	80045f8 <puts>
	  osDelay(1000);
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f001 fe9b 	bl	80021f2 <osDelay>
	  xSemaphoreTake(mutexHandle,10);
 80004bc:	e7de      	b.n	800047c <pushbutton+0x8>
 80004be:	bf00      	nop
 80004c0:	200002ec 	.word	0x200002ec
 80004c4:	08004f7c 	.word	0x08004f7c
 80004c8:	48000800 	.word	0x48000800
 80004cc:	08004f9c 	.word	0x08004f9c

080004d0 <led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led */
void led(void const * argument)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(mutexHandle,10);
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <led+0x48>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	210a      	movs	r1, #10
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 f9ec 	bl	80028bc <xQueueSemaphoreTake>
	 	  printf("led aquire the mutex\n");
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <led+0x4c>)
 80004e6:	f004 f887 	bl	80045f8 <puts>
	 	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004ea:	2120      	movs	r1, #32
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f000 fca8 	bl	8000e44 <HAL_GPIO_TogglePin>
	 	  osDelay(1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	f001 fe7b 	bl	80021f2 <osDelay>
	 	 printf("try to led release the mutex\n");
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <led+0x50>)
 80004fe:	f004 f87b 	bl	80045f8 <puts>

	 	  printf("led release the mutex\n");
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <led+0x54>)
 8000504:	f004 f878 	bl	80045f8 <puts>
	 	  //osDelay(1000);
	 	  xSemaphoreGive(mutexHandle);
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <led+0x48>)
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	2300      	movs	r3, #0
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	f002 f8d5 	bl	80026c0 <xQueueGenericSend>
	  xSemaphoreTake(mutexHandle,10);
 8000516:	e7df      	b.n	80004d8 <led+0x8>
 8000518:	200002ec 	.word	0x200002ec
 800051c:	08004fbc 	.word	0x08004fbc
 8000520:	08004fd4 	.word	0x08004fd4
 8000524:	08004ff4 	.word	0x08004ff4

08000528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d101      	bne.n	800053e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800053a:	f000 f9a7 	bl	800088c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40012c00 	.word	0x40012c00

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_MspInit+0x4c>)
 8000560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <HAL_MspInit+0x4c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6613      	str	r3, [r2, #96]	; 0x60
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_MspInit+0x4c>)
 800056c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_MspInit+0x4c>)
 8000578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_MspInit+0x4c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	6593      	str	r3, [r2, #88]	; 0x58
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_MspInit+0x4c>)
 8000584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	210f      	movs	r1, #15
 8000592:	f06f 0001 	mvn.w	r0, #1
 8000596:	f000 fa51 	bl	8000a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <HAL_InitTick+0xc8>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <HAL_InitTick+0xc8>)
 80005bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c0:	6613      	str	r3, [r2, #96]	; 0x60
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <HAL_InitTick+0xc8>)
 80005c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fa3b 	bl	8001a54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005de:	f001 fa23 	bl	8001a28 <HAL_RCC_GetPCLK2Freq>
 80005e2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	4a23      	ldr	r2, [pc, #140]	; (8000674 <HAL_InitTick+0xcc>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	0c9b      	lsrs	r3, r3, #18
 80005ee:	3b01      	subs	r3, #1
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <HAL_InitTick+0xd0>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <HAL_InitTick+0xd4>)
 80005f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <HAL_InitTick+0xd0>)
 80005fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <HAL_InitTick+0xd0>)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <HAL_InitTick+0xd0>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_InitTick+0xd0>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <HAL_InitTick+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <HAL_InitTick+0xd0>)
 800061a:	f001 faad 	bl	8001b78 <HAL_TIM_Base_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000628:	2b00      	cmp	r3, #0
 800062a:	d11b      	bne.n	8000664 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <HAL_InitTick+0xd0>)
 800062e:	f001 fb05 	bl	8001c3c <HAL_TIM_Base_Start_IT>
 8000632:	4603      	mov	r3, r0
 8000634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800063c:	2b00      	cmp	r3, #0
 800063e:	d111      	bne.n	8000664 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000640:	2019      	movs	r0, #25
 8000642:	f000 fa17 	bl	8000a74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d808      	bhi.n	800065e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	2019      	movs	r0, #25
 8000652:	f000 f9f3 	bl	8000a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <HAL_InitTick+0xd8>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	e002      	b.n	8000664 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000668:	4618      	mov	r0, r3
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	431bde83 	.word	0x431bde83
 8000678:	200002f0 	.word	0x200002f0
 800067c:	40012c00 	.word	0x40012c00
 8000680:	20000004 	.word	0x20000004

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006b6:	f001 fb31 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200002f0 	.word	0x200002f0

080006c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e00a      	b.n	80006ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006d6:	f3af 8000 	nop.w
 80006da:	4601      	mov	r1, r0
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	b2ca      	uxtb	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf0      	blt.n	80006d6 <_read+0x12>
  }

  return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000726:	605a      	str	r2, [r3, #4]
  return 0;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <_isatty>:

int _isatty(int file)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <_sbrk+0x5c>)
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <_sbrk+0x60>)
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <_sbrk+0x64>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <_sbrk+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	429a      	cmp	r2, r3
 8000796:	d207      	bcs.n	80007a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000798:	f003 fe80 	bl	800449c <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	e009      	b.n	80007bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <_sbrk+0x64>)
 80007b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20018000 	.word	0x20018000
 80007c8:	00000400 	.word	0x00000400
 80007cc:	2000033c 	.word	0x2000033c
 80007d0:	20001060 	.word	0x20001060

080007d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff ffea 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f003 fe3f 	bl	80044a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082a:	f7ff fd31 	bl	8000290 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000830:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800083c:	080050c8 	.word	0x080050c8
  ldr r2, =_sbss
 8000840:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000844:	20001060 	.word	0x20001060

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_Init+0x3c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <HAL_Init+0x3c>)
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000862:	2003      	movs	r0, #3
 8000864:	f000 f8df 	bl	8000a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000868:	200f      	movs	r0, #15
 800086a:	f7ff fe9d 	bl	80005a8 <HAL_InitTick>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	e001      	b.n	800087e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087a:	f7ff fe6d 	bl	8000558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087e:	79fb      	ldrb	r3, [r7, #7]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000340 	.word	0x20000340

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000340 	.word	0x20000340

080008cc <__NVIC_SetPriorityGrouping>:
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <__NVIC_EnableIRQ+0x38>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff4c 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4e:	f7ff ff61 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	6978      	ldr	r0, [r7, #20]
 8000a5a:	f7ff ffb1 	bl	80009c0 <NVIC_EncodePriority>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff80 	bl	800096c <__NVIC_SetPriority>
}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff54 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e17f      	b.n	8000da0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 8171 	beq.w	8000d9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d130      	bne.n	8000b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b06:	2201      	movs	r2, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	f003 0201 	and.w	r2, r3, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d118      	bne.n	8000b70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b44:	2201      	movs	r2, #1
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	f003 0201 	and.w	r2, r3, #1
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d017      	beq.n	8000bac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d123      	bne.n	8000c00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	6939      	ldr	r1, [r7, #16]
 8000bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0203 	and.w	r2, r3, #3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 80ac 	beq.w	8000d9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a5e      	ldr	r2, [pc, #376]	; (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <HAL_GPIO_Init+0x330>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c84:	d025      	beq.n	8000cd2 <HAL_GPIO_Init+0x242>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_GPIO_Init+0x338>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01f      	beq.n	8000cce <HAL_GPIO_Init+0x23e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4e      	ldr	r2, [pc, #312]	; (8000dcc <HAL_GPIO_Init+0x33c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d019      	beq.n	8000cca <HAL_GPIO_Init+0x23a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x340>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0x236>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <HAL_GPIO_Init+0x344>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00d      	beq.n	8000cc2 <HAL_GPIO_Init+0x232>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <HAL_GPIO_Init+0x348>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d007      	beq.n	8000cbe <HAL_GPIO_Init+0x22e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4a      	ldr	r2, [pc, #296]	; (8000ddc <HAL_GPIO_Init+0x34c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_GPIO_Init+0x22a>
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e00c      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cba:	2307      	movs	r3, #7
 8000cbc:	e00a      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	e008      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e004      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x244>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	f002 0203 	and.w	r2, r2, #3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4093      	lsls	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce4:	4937      	ldr	r1, [pc, #220]	; (8000dc4 <HAL_GPIO_Init+0x334>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d40:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_GPIO_Init+0x350>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f47f ae78 	bne.w	8000aa0 <HAL_GPIO_Init+0x10>
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000c00 	.word	0x48000c00
 8000dd4:	48001000 	.word	0x48001000
 8000dd8:	48001400 	.word	0x48001400
 8000ddc:	48001800 	.word	0x48001800
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691a      	ldr	r2, [r3, #16]
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e001      	b.n	8000e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	041a      	lsls	r2, r3, #16
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43d9      	mvns	r1, r3
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	400b      	ands	r3, r1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	619a      	str	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40007000 	.word	0x40007000

08000e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ea2:	d130      	bne.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb0:	d038      	beq.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2232      	movs	r2, #50	; 0x32
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ed8:	e002      	b.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eec:	d102      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f2      	bne.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f00:	d110      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e00f      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f12:	d007      	beq.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40007000 	.word	0x40007000
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	431bde83 	.word	0x431bde83

08000f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e3ca      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f52:	4b97      	ldr	r3, [pc, #604]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5c:	4b94      	ldr	r3, [pc, #592]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80e4 	beq.w	800113c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <HAL_RCC_OscConfig+0x4a>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b0c      	cmp	r3, #12
 8000f7e:	f040 808b 	bne.w	8001098 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	f040 8087 	bne.w	8001098 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8a:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x62>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e3a2      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1a      	ldr	r2, [r3, #32]
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <HAL_RCC_OscConfig+0x7c>
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fba:	e005      	b.n	8000fc8 <HAL_RCC_OscConfig+0x88>
 8000fbc:	4b7c      	ldr	r3, [pc, #496]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d223      	bcs.n	8001014 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fd71 	bl	8001ab8 <RCC_SetFlashLatencyFromMSIRange>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e383      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a72      	ldr	r2, [pc, #456]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	496d      	ldr	r1, [pc, #436]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffe:	4b6c      	ldr	r3, [pc, #432]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	4968      	ldr	r1, [pc, #416]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
 8001012:	e025      	b.n	8001060 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001014:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4960      	ldr	r1, [pc, #384]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001032:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	495b      	ldr	r1, [pc, #364]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001042:	4313      	orrs	r3, r2
 8001044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fd31 	bl	8001ab8 <RCC_SetFlashLatencyFromMSIRange>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e343      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001060:	f000 fc4a 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 8001064:	4602      	mov	r2, r0
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	4950      	ldr	r1, [pc, #320]	; (80011b4 <HAL_RCC_OscConfig+0x274>)
 8001072:	5ccb      	ldrb	r3, [r1, r3]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_RCC_OscConfig+0x278>)
 800107e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001080:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <HAL_RCC_OscConfig+0x27c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa8f 	bl	80005a8 <HAL_InitTick>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d052      	beq.n	800113a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	e327      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d032      	beq.n	8001106 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010a0:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a42      	ldr	r2, [pc, #264]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc02 	bl	80008b4 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010b4:	f7ff fbfe 	bl	80008b4 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e310      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a36      	ldr	r2, [pc, #216]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4931      	ldr	r1, [pc, #196]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	492c      	ldr	r1, [pc, #176]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	e01a      	b.n	800113c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001112:	f7ff fbcf 	bl	80008b4 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111a:	f7ff fbcb 	bl	80008b4 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e2dd      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x1da>
 8001138:	e000      	b.n	800113c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800113a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d074      	beq.n	8001232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x21a>
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b0c      	cmp	r3, #12
 8001152:	d10e      	bne.n	8001172 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d10b      	bne.n	8001172 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d064      	beq.n	8001230 <HAL_RCC_OscConfig+0x2f0>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d160      	bne.n	8001230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e2ba      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x24a>
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e026      	b.n	80011d8 <HAL_RCC_OscConfig+0x298>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001192:	d115      	bne.n	80011c0 <HAL_RCC_OscConfig+0x280>
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 800119a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a02      	ldr	r2, [pc, #8]	; (80011b0 <HAL_RCC_OscConfig+0x270>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e014      	b.n	80011d8 <HAL_RCC_OscConfig+0x298>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08005014 	.word	0x08005014
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004
 80011c0:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a9f      	ldr	r2, [pc, #636]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b9d      	ldr	r3, [pc, #628]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a9c      	ldr	r2, [pc, #624]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb68 	bl	80008b4 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fb64 	bl	80008b4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e276      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fa:	4b92      	ldr	r3, [pc, #584]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2a8>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fb54 	bl	80008b4 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fb50 	bl	80008b4 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e262      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x2d0>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d060      	beq.n	8001300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x310>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	d119      	bne.n	800127e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d116      	bne.n	800127e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	4b7c      	ldr	r3, [pc, #496]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_OscConfig+0x328>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e23f      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	4973      	ldr	r1, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	e040      	b.n	8001300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d023      	beq.n	80012ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001286:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6e      	ldr	r2, [pc, #440]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff fb0f 	bl	80008b4 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129a:	f7ff fb0b 	bl	80008b4 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e21d      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ac:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	4b62      	ldr	r3, [pc, #392]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	495f      	ldr	r1, [pc, #380]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e018      	b.n	8001300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5c      	ldr	r2, [pc, #368]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80012d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff faeb 	bl	80008b4 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fae7 	bl	80008b4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1f9      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d03c      	beq.n	8001386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01c      	beq.n	800134e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001314:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131a:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff fac6 	bl	80008b4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fac2 	bl	80008b4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1d4      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0ef      	beq.n	800132c <HAL_RCC_OscConfig+0x3ec>
 800134c:	e01b      	b.n	8001386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001354:	4a3b      	ldr	r2, [pc, #236]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff faa9 	bl	80008b4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff faa5 	bl	80008b4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1b7      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 800137a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ef      	bne.n	8001366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80a6 	beq.w	80014e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10d      	bne.n	80013c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	4a26      	ldr	r2, [pc, #152]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ae:	6593      	str	r3, [r2, #88]	; 0x58
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_RCC_OscConfig+0x508>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d118      	bne.n	80013fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_RCC_OscConfig+0x508>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_RCC_OscConfig+0x508>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fa6c 	bl	80008b4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e0:	f7ff fa68 	bl	80008b4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e17a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x508>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_RCC_OscConfig+0x4d8>
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001416:	e029      	b.n	800146c <HAL_RCC_OscConfig+0x52c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d115      	bne.n	800144c <HAL_RCC_OscConfig+0x50c>
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_RCC_OscConfig+0x504>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x52c>
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	40007000 	.word	0x40007000
 800144c:	4b9c      	ldr	r3, [pc, #624]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	4a9b      	ldr	r2, [pc, #620]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145c:	4b98      	ldr	r3, [pc, #608]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a97      	ldr	r2, [pc, #604]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d016      	beq.n	80014a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fa1e 	bl	80008b4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff fa1a 	bl	80008b4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	; 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e12a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ed      	beq.n	800147c <HAL_RCC_OscConfig+0x53c>
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa07 	bl	80008b4 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fa03 	bl	80008b4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e113      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c0:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ed      	bne.n	80014aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	4a79      	ldr	r2, [pc, #484]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80fe 	beq.w	80016e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 80d0 	bne.w	8001694 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014f4:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	429a      	cmp	r2, r3
 8001506:	d130      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	3b01      	subs	r3, #1
 8001514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d127      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001524:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d11f      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001534:	2a07      	cmp	r2, #7
 8001536:	bf14      	ite	ne
 8001538:	2201      	movne	r2, #1
 800153a:	2200      	moveq	r2, #0
 800153c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153e:	4293      	cmp	r3, r2
 8001540:	d113      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d109      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	3b01      	subs	r3, #1
 8001564:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d06e      	beq.n	8001648 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d069      	beq.n	8001644 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0ad      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800158c:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001598:	f7ff f98c 	bl	80008b4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f988 	bl	80008b4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e09a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <HAL_RCC_OscConfig+0x784>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015ce:	3a01      	subs	r2, #1
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d8:	0212      	lsls	r2, r2, #8
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015e0:	0852      	lsrs	r2, r2, #1
 80015e2:	3a01      	subs	r2, #1
 80015e4:	0552      	lsls	r2, r2, #21
 80015e6:	4311      	orrs	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015ec:	0852      	lsrs	r2, r2, #1
 80015ee:	3a01      	subs	r2, #1
 80015f0:	0652      	lsls	r2, r2, #25
 80015f2:	4311      	orrs	r1, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015f8:	0912      	lsrs	r2, r2, #4
 80015fa:	0452      	lsls	r2, r2, #17
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4930      	ldr	r1, [pc, #192]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001604:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800161c:	f7ff f94a 	bl	80008b4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f946 	bl	80008b4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e058      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001642:	e050      	b.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e04f      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d148      	bne.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800166c:	f7ff f922 	bl	80008b4 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f91e 	bl	80008b4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e030      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x734>
 8001692:	e028      	b.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d023      	beq.n	80016e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x780>)
 80016a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff f905 	bl	80008b4 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ac:	e00c      	b.n	80016c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff f901 	bl	80008b4 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d905      	bls.n	80016c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e013      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_OscConfig+0x7b0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ec      	bne.n	80016ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x7b0>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4905      	ldr	r1, [pc, #20]	; (80016f0 <HAL_RCC_OscConfig+0x7b0>)
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_OscConfig+0x7b4>)
 80016dc:	4013      	ands	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e001      	b.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	feeefffc 	.word	0xfeeefffc

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0e7      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b75      	ldr	r3, [pc, #468]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d910      	bls.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b72      	ldr	r3, [pc, #456]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4970      	ldr	r1, [pc, #448]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b6e      	ldr	r3, [pc, #440]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cf      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d010      	beq.n	800176a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001754:	429a      	cmp	r2, r3
 8001756:	d908      	bls.n	800176a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4960      	ldr	r1, [pc, #384]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d04c      	beq.n	8001810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d121      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0a6      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e09a      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ae:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e08e      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e086      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4943      	ldr	r1, [pc, #268]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e0:	f7ff f868 	bl	80008b4 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff f864 	bl	80008b4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e06e      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001828:	429a      	cmp	r2, r3
 800182a:	d208      	bcs.n	800183e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	492b      	ldr	r1, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d210      	bcs.n	800186e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0207 	bic.w	r2, r3, #7
 8001854:	4923      	ldr	r1, [pc, #140]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185c:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e036      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4918      	ldr	r1, [pc, #96]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4910      	ldr	r1, [pc, #64]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ac:	f000 f824 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	490b      	ldr	r1, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1fc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe69 	bl	80005a8 <HAL_InitTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018da:	7afb      	ldrb	r3, [r7, #11]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40022000 	.word	0x40022000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	08005014 	.word	0x08005014
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d121      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d11e      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e005      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d102      	bne.n	8001976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	e004      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d101      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800197e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d134      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0xa6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xac>
 800199c:	e005      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80019a0:	617b      	str	r3, [r7, #20]
      break;
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80019a6:	617b      	str	r3, [r7, #20]
      break;
 80019a8:	e002      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	617b      	str	r3, [r7, #20]
      break;
 80019ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	fb03 f202 	mul.w	r2, r3, r2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	0e5b      	lsrs	r3, r3, #25
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019f0:	69bb      	ldr	r3, [r7, #24]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	0800502c 	.word	0x0800502c
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0adb      	lsrs	r3, r3, #11
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4904      	ldr	r1, [pc, #16]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08005024 	.word	0x08005024

08001a54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220f      	movs	r2, #15
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_RCC_GetClockConfig+0x60>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ad0:	f7ff f9d2 	bl	8000e78 <HAL_PWREx_GetVoltageRange>
 8001ad4:	6178      	str	r0, [r7, #20]
 8001ad6:	e014      	b.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001af0:	f7ff f9c2 	bl	8000e78 <HAL_PWREx_GetVoltageRange>
 8001af4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b08:	d10b      	bne.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d919      	bls.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2ba0      	cmp	r3, #160	; 0xa0
 8001b14:	d902      	bls.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	e013      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e010      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b80      	cmp	r3, #128	; 0x80
 8001b26:	d902      	bls.n	8001b2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b28:	2303      	movs	r3, #3
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e00a      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	d102      	bne.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b34:	2302      	movs	r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	e004      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b70      	cmp	r3, #112	; 0x70
 8001b3e:	d101      	bne.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b40:	2301      	movs	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 0207 	bic.w	r2, r3, #7
 8001b4c:	4909      	ldr	r1, [pc, #36]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e049      	b.n	8001c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f841 	bl	8001c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 f9f8 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e04f      	b.n	8001cf4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01d      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x76>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d018      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x76>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x76>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00e      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x76>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d009      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x76>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_TIM_Base_Start_IT+0x76>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d115      	bne.n	8001cde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d015      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d011      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cdc:	e008      	b.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e000      	b.n	8001cf2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40013400 	.word	0x40013400
 8001d14:	40014000 	.word	0x40014000
 8001d18:	00010007 	.word	0x00010007

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0202 	mvn.w	r2, #2
 8001d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f905 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8f7 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f908 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8db 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8cd 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8de 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0208 	mvn.w	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b1 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8a3 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8b4 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0210 	mvn.w	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f887 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f879 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f88a 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fb44 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f914 	bl	80020f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eda:	d10e      	bne.n	8001efa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d107      	bne.n	8001efa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f907 	bl	8002108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d10e      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d107      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f838 	bl	8001f96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d10e      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d107      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0220 	mvn.w	r2, #32
 8001f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8c7 	bl	80020e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d01b      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d017      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00f      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00b      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <TIM_Base_SetConfig+0x128>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <TIM_Base_SetConfig+0x9a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d108      	bne.n	8002058 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00f      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <TIM_Base_SetConfig+0x128>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <TIM_Base_SetConfig+0x130>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40013400 	.word	0x40013400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800

080020e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800212a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212e:	2b84      	cmp	r3, #132	; 0x84
 8002130:	d005      	beq.n	800213e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002132:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	3303      	adds	r3, #3
 800213c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002150:	f000 ff8a 	bl	8003068 <vTaskStartScheduler>
  
  return osOK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}

0800215a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800215a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215c:	b089      	sub	sp, #36	; 0x24
 800215e:	af04      	add	r7, sp, #16
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <osThreadCreate+0x54>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01c      	beq.n	80021ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685c      	ldr	r4, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681d      	ldr	r5, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691e      	ldr	r6, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ffc8 	bl	800211c <makeFreeRtosPriority>
 800218c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002196:	9202      	str	r2, [sp, #8]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	9100      	str	r1, [sp, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4632      	mov	r2, r6
 80021a0:	4629      	mov	r1, r5
 80021a2:	4620      	mov	r0, r4
 80021a4:	f000 fd98 	bl	8002cd8 <xTaskCreateStatic>
 80021a8:	4603      	mov	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e01c      	b.n	80021e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685c      	ldr	r4, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021ba:	b29e      	uxth	r6, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ffaa 	bl	800211c <makeFreeRtosPriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	4632      	mov	r2, r6
 80021d6:	4629      	mov	r1, r5
 80021d8:	4620      	mov	r0, r4
 80021da:	f000 fdda 	bl	8002d92 <xTaskCreate>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d001      	beq.n	80021e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <osDelay+0x16>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	e000      	b.n	800220a <osDelay+0x18>
 8002208:	2301      	movs	r3, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fef8 	bl	8003000 <vTaskDelay>
  
  return osOK;
 8002210:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4619      	mov	r1, r3
 8002230:	2001      	movs	r0, #1
 8002232:	f000 fa2a 	bl	800268a <xQueueCreateMutexStatic>
 8002236:	4603      	mov	r3, r0
 8002238:	e003      	b.n	8002242 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800223a:	2001      	movs	r0, #1
 800223c:	f000 fa0d 	bl	800265a <xQueueCreateMutex>
 8002240:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f103 0208 	add.w	r2, r3, #8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0208 	add.w	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 0208 	add.w	r2, r3, #8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d103      	bne.n	800230c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	e00c      	b.n	8002326 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3308      	adds	r3, #8
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e002      	b.n	800231a <vListInsert+0x2e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	429a      	cmp	r2, r3
 8002324:	d2f6      	bcs.n	8002314 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6892      	ldr	r2, [r2, #8]
 8002374:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6852      	ldr	r2, [r2, #4]
 800237e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	d103      	bne.n	8002392 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1e5a      	subs	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023de:	f001 fd91 	bl	8003f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	441a      	add	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	3b01      	subs	r3, #1
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	441a      	add	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01a      	beq.n	8002472 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3310      	adds	r3, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f001 f853 	bl	80034ec <xTaskRemoveFromEventList>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <xQueueGenericReset+0xcc>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	e009      	b.n	8002472 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fef1 	bl	800224a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3324      	adds	r3, #36	; 0x24
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff feec 	bl	800224a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002472:	f001 fd77 	bl	8003f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e000ed04 	.word	0xe000ed04

08002484 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08e      	sub	sp, #56	; 0x38
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <xQueueGenericCreateStatic+0x52>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <xQueueGenericCreateStatic+0x56>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueGenericCreateStatic+0x58>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	623b      	str	r3, [r7, #32]
}
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <xQueueGenericCreateStatic+0x7e>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <xQueueGenericCreateStatic+0x82>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <xQueueGenericCreateStatic+0x84>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	61fb      	str	r3, [r7, #28]
}
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002522:	2348      	movs	r3, #72	; 0x48
 8002524:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b48      	cmp	r3, #72	; 0x48
 800252a:	d00a      	beq.n	8002542 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	61bb      	str	r3, [r7, #24]
}
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002542:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002556:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f83f 	bl	80025e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800256c:	4618      	mov	r0, r3
 800256e:	3730      	adds	r7, #48	; 0x30
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	613b      	str	r3, [r7, #16]
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	3348      	adds	r3, #72	; 0x48
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fd8b 	bl	80040c8 <pvPortMalloc>
 80025b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3348      	adds	r3, #72	; 0x48
 80025c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025cc:	79fa      	ldrb	r2, [r7, #7]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f805 	bl	80025e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025de:	69bb      	ldr	r3, [r7, #24]
	}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e002      	b.n	800260a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002616:	2101      	movs	r1, #1
 8002618:	69b8      	ldr	r0, [r7, #24]
 800261a:	f7ff fecb 	bl	80023b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002646:	2300      	movs	r3, #0
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f837 	bl	80026c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002664:	2301      	movs	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	461a      	mov	r2, r3
 8002670:	6939      	ldr	r1, [r7, #16]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff7e 	bl	8002574 <xQueueGenericCreate>
 8002678:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff ffd3 	bl	8002626 <prvInitialiseMutex>

		return xNewQueue;
 8002680:	68fb      	ldr	r3, [r7, #12]
	}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800268a:	b580      	push	{r7, lr}
 800268c:	b088      	sub	sp, #32
 800268e:	af02      	add	r7, sp, #8
 8002690:	4603      	mov	r3, r0
 8002692:	6039      	str	r1, [r7, #0]
 8002694:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002696:	2301      	movs	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f7ff feeb 	bl	8002484 <xQueueGenericCreateStatic>
 80026ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ffb8 	bl	8002626 <prvInitialiseMutex>

		return xNewQueue;
 80026b6:	68fb      	ldr	r3, [r7, #12]
	}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <xQueueGenericSend+0x32>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <xQueueGenericSend+0x40>
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <xQueueGenericSend+0x44>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <xQueueGenericSend+0x46>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <xQueueGenericSend+0x60>
	__asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800271c:	bf00      	nop
 800271e:	e7fe      	b.n	800271e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d103      	bne.n	800272e <xQueueGenericSend+0x6e>
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <xQueueGenericSend+0x72>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueGenericSend+0x74>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <xQueueGenericSend+0x8e>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	623b      	str	r3, [r7, #32]
}
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800274e:	f001 f889 	bl	8003864 <xTaskGetSchedulerState>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <xQueueGenericSend+0x9e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <xQueueGenericSend+0xa2>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <xQueueGenericSend+0xa4>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericSend+0xbe>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61fb      	str	r3, [r7, #28]
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800277e:	f001 fbc1 	bl	8003f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <xQueueGenericSend+0xd4>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d129      	bne.n	80027e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800279a:	f000 f9b3 	bl	8002b04 <prvCopyDataToQueue>
 800279e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	3324      	adds	r3, #36	; 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fe9d 	bl	80034ec <xTaskRemoveFromEventList>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <xQueueGenericSend+0x1f8>)
 80027ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	e00a      	b.n	80027e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <xQueueGenericSend+0x1f8>)
 80027d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027e0:	f001 fbc0 	bl	8003f64 <vPortExitCritical>
				return pdPASS;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e063      	b.n	80028b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ee:	f001 fbb9 	bl	8003f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e05c      	b.n	80028b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fed5 	bl	80035b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002806:	2301      	movs	r3, #1
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800280a:	f001 fbab 	bl	8003f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800280e:	f000 fc8b 	bl	8003128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002812:	f001 fb77 	bl	8003f04 <vPortEnterCritical>
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281c:	b25b      	sxtb	r3, r3
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d103      	bne.n	800282c <xQueueGenericSend+0x16c>
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <xQueueGenericSend+0x182>
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002842:	f001 fb8f 	bl	8003f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002846:	1d3a      	adds	r2, r7, #4
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fec4 	bl	80035dc <xTaskCheckForTimeOut>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d124      	bne.n	80028a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800285a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800285c:	f000 fa24 	bl	8002ca8 <prvIsQueueFull>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	3310      	adds	r3, #16
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fe18 	bl	80034a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002876:	f000 f9af 	bl	8002bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800287a:	f000 fc63 	bl	8003144 <xTaskResumeAll>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f af7c 	bne.w	800277e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <xQueueGenericSend+0x1f8>)
 8002888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	e772      	b.n	800277e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800289a:	f000 f99d 	bl	8002bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800289e:	f000 fc51 	bl	8003144 <xTaskResumeAll>
 80028a2:	e76c      	b.n	800277e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a6:	f000 f997 	bl	8002bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028aa:	f000 fc4b 	bl	8003144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	623b      	str	r3, [r7, #32]
}
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61fb      	str	r3, [r7, #28]
}
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800290c:	f000 ffaa 	bl	8003864 <xTaskGetSchedulerState>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <xQueueSemaphoreTake+0x60>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <xQueueSemaphoreTake+0x64>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <xQueueSemaphoreTake+0x66>
 8002920:	2300      	movs	r3, #0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	61bb      	str	r3, [r7, #24]
}
 8002938:	bf00      	nop
 800293a:	e7fe      	b.n	800293a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800293c:	f001 fae2 	bl	8003f04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d024      	beq.n	8002996 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800295c:	f001 f92a 	bl	8003bb4 <pvTaskIncrementMutexHeldCount>
 8002960:	4602      	mov	r2, r0
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00f      	beq.n	800298e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	3310      	adds	r3, #16
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fdba 	bl	80034ec <xTaskRemoveFromEventList>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800297e:	4b54      	ldr	r3, [pc, #336]	; (8002ad0 <xQueueSemaphoreTake+0x214>)
 8002980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800298e:	f001 fae9 	bl	8003f64 <vPortExitCritical>
				return pdPASS;
 8002992:	2301      	movs	r3, #1
 8002994:	e097      	b.n	8002ac6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	617b      	str	r3, [r7, #20]
}
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80029b8:	f001 fad4 	bl	8003f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029bc:	2300      	movs	r3, #0
 80029be:	e082      	b.n	8002ac6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fdf0 	bl	80035b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029d4:	f001 fac6 	bl	8003f64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029d8:	f000 fba6 	bl	8003128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029dc:	f001 fa92 	bl	8003f04 <vPortEnterCritical>
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <xQueueSemaphoreTake+0x13a>
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d103      	bne.n	8002a0c <xQueueSemaphoreTake+0x150>
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a0c:	f001 faaa 	bl	8003f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a10:	463a      	mov	r2, r7
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fddf 	bl	80035dc <xTaskCheckForTimeOut>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d132      	bne.n	8002a8a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a26:	f000 f929 	bl	8002c7c <prvIsQueueEmpty>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d026      	beq.n	8002a7e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002a38:	f001 fa64 	bl	8003f04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 ff2d 	bl	80038a0 <xTaskPriorityInherit>
 8002a46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002a48:	f001 fa8c 	bl	8003f64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fd25 	bl	80034a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a5c:	f000 f8bc 	bl	8002bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a60:	f000 fb70 	bl	8003144 <xTaskResumeAll>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f47f af68 	bne.w	800293c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <xQueueSemaphoreTake+0x214>)
 8002a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	e75e      	b.n	800293c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a80:	f000 f8aa 	bl	8002bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a84:	f000 fb5e 	bl	8003144 <xTaskResumeAll>
 8002a88:	e758      	b.n	800293c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a8c:	f000 f8a4 	bl	8002bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a90:	f000 fb58 	bl	8003144 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a96:	f000 f8f1 	bl	8002c7c <prvIsQueueEmpty>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f43f af4d 	beq.w	800293c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002aa8:	f001 fa2c 	bl	8003f04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aae:	f000 f811 	bl	8002ad4 <prvGetDisinheritPriorityAfterTimeout>
 8002ab2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 ffec 	bl	8003a98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002ac0:	f001 fa50 	bl	8003f64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3738      	adds	r7, #56	; 0x38
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000ed04 	.word	0xe000ed04

08002ad4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e001      	b.n	8002af6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002af6:	68fb      	ldr	r3, [r7, #12]
	}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14d      	bne.n	8002bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 ff2c 	bl	800398c <xTaskPriorityDisinherit>
 8002b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	e043      	b.n	8002bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d119      	bne.n	8002b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6858      	ldr	r0, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	f001 fcce 	bl	80044f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	441a      	add	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d32b      	bcc.n	8002bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e026      	b.n	8002bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68d8      	ldr	r0, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	461a      	mov	r2, r3
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	f001 fcb4 	bl	80044f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	425b      	negs	r3, r3
 8002b92:	441a      	add	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	425b      	negs	r3, r3
 8002bae:	441a      	add	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d105      	bne.n	8002bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bce:	697b      	ldr	r3, [r7, #20]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002be0:	f001 f990 	bl	8003f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bec:	e011      	b.n	8002c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fc76 	bl	80034ec <xTaskRemoveFromEventList>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c06:	f000 fd4b 	bl	80036a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dce9      	bgt.n	8002bee <prvUnlockQueue+0x16>
 8002c1a:	e000      	b.n	8002c1e <prvUnlockQueue+0x46>
					break;
 8002c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	22ff      	movs	r2, #255	; 0xff
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c26:	f001 f99d 	bl	8003f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c2a:	f001 f96b 	bl	8003f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c36:	e011      	b.n	8002c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3310      	adds	r3, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fc51 	bl	80034ec <xTaskRemoveFromEventList>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c50:	f000 fd26 	bl	80036a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	dce9      	bgt.n	8002c38 <prvUnlockQueue+0x60>
 8002c64:	e000      	b.n	8002c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c70:	f001 f978 	bl	8003f64 <vPortExitCritical>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c84:	f001 f93e 	bl	8003f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e001      	b.n	8002c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c9a:	f001 f963 	bl	8003f64 <vPortExitCritical>

	return xReturn;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cb0:	f001 f928 	bl	8003f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d102      	bne.n	8002cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e001      	b.n	8002cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cca:	f001 f94b 	bl	8003f64 <vPortExitCritical>

	return xReturn;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af04      	add	r7, sp, #16
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	623b      	str	r3, [r7, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <xTaskCreateStatic+0x46>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	61fb      	str	r3, [r7, #28]
}
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d1e:	2354      	movs	r3, #84	; 0x54
 8002d20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b54      	cmp	r3, #84	; 0x54
 8002d26:	d00a      	beq.n	8002d3e <xTaskCreateStatic+0x66>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	61bb      	str	r3, [r7, #24]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01e      	beq.n	8002d84 <xTaskCreateStatic+0xac>
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9303      	str	r3, [sp, #12]
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f850 	bl	8002e1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d7e:	f000 f8d5 	bl	8002f2c <prvAddNewTaskToReadyList>
 8002d82:	e001      	b.n	8002d88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d88:	697b      	ldr	r3, [r7, #20]
	}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3728      	adds	r7, #40	; 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b08c      	sub	sp, #48	; 0x30
 8002d96:	af04      	add	r7, sp, #16
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 f98e 	bl	80040c8 <pvPortMalloc>
 8002dac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002db4:	2054      	movs	r0, #84	; 0x54
 8002db6:	f001 f987 	bl	80040c8 <pvPortMalloc>
 8002dba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc8:	e005      	b.n	8002dd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f001 fa48 	bl	8004260 <vPortFree>
 8002dd0:	e001      	b.n	8002dd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d017      	beq.n	8002e0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f80e 	bl	8002e1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e00:	69f8      	ldr	r0, [r7, #28]
 8002e02:	f000 f893 	bl	8002f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e002      	b.n	8002e12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e12:	69bb      	ldr	r3, [r7, #24]
	}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e34:	3b01      	subs	r3, #1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	617b      	str	r3, [r7, #20]
}
 8002e60:	bf00      	nop
 8002e62:	e7fe      	b.n	8002e62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01f      	beq.n	8002eaa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e012      	b.n	8002e96 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	7819      	ldrb	r1, [r3, #0]
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3334      	adds	r3, #52	; 0x34
 8002e80:	460a      	mov	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3301      	adds	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d9e9      	bls.n	8002e70 <prvInitialiseNewTask+0x54>
 8002e9c:	e000      	b.n	8002ea0 <prvInitialiseNewTask+0x84>
			{
				break;
 8002e9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea8:	e003      	b.n	8002eb2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d901      	bls.n	8002ebc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eb8:	2306      	movs	r3, #6
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	2200      	movs	r2, #0
 8002ecc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f9d9 	bl	800228a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	3318      	adds	r3, #24
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f9d4 	bl	800228a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	f1c3 0207 	rsb	r2, r3, #7
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	2200      	movs	r2, #0
 8002efc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	69b8      	ldr	r0, [r7, #24]
 8002f0c:	f000 fecc 	bl	8003ca8 <pxPortInitialiseStack>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f34:	f000 ffe6 	bl	8003f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f38:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <prvAddNewTaskToReadyList+0xb8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <prvAddNewTaskToReadyList+0xb8>)
 8002f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <prvAddNewTaskToReadyList+0xbc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f4a:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <prvAddNewTaskToReadyList+0xbc>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <prvAddNewTaskToReadyList+0xb8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d110      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f58:	f000 fbc6 	bl	80036e8 <prvInitialiseTaskLists>
 8002f5c:	e00d      	b.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <prvAddNewTaskToReadyList+0xc0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <prvAddNewTaskToReadyList+0xbc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d802      	bhi.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <prvAddNewTaskToReadyList+0xbc>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <prvAddNewTaskToReadyList+0xc4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <prvAddNewTaskToReadyList+0xc4>)
 8002f82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <prvAddNewTaskToReadyList+0xcc>)
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f7ff f979 	bl	80022a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fb2:	f000 ffd7 	bl	8003f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <prvAddNewTaskToReadyList+0xc0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <prvAddNewTaskToReadyList+0xbc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d207      	bcs.n	8002fdc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <prvAddNewTaskToReadyList+0xd0>)
 8002fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000444 	.word	0x20000444
 8002fe8:	20000344 	.word	0x20000344
 8002fec:	20000450 	.word	0x20000450
 8002ff0:	20000460 	.word	0x20000460
 8002ff4:	2000044c 	.word	0x2000044c
 8002ff8:	20000348 	.word	0x20000348
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <vTaskDelay+0x60>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <vTaskDelay+0x30>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	60bb      	str	r3, [r7, #8]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003030:	f000 f87a 	bl	8003128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003034:	2100      	movs	r1, #0
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fdd0 	bl	8003bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800303c:	f000 f882 	bl	8003144 <xTaskResumeAll>
 8003040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <vTaskDelay+0x64>)
 800304a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	2000046c 	.word	0x2000046c
 8003064:	e000ed04 	.word	0xe000ed04

08003068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003076:	463a      	mov	r2, r7
 8003078:	1d39      	adds	r1, r7, #4
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd f8a6 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	460a      	mov	r2, r1
 8003096:	491e      	ldr	r1, [pc, #120]	; (8003110 <vTaskStartScheduler+0xa8>)
 8003098:	481e      	ldr	r0, [pc, #120]	; (8003114 <vTaskStartScheduler+0xac>)
 800309a:	f7ff fe1d 	bl	8002cd8 <xTaskCreateStatic>
 800309e:	4603      	mov	r3, r0
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <vTaskStartScheduler+0xb0>)
 80030a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <vTaskStartScheduler+0xb0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e001      	b.n	80030b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d116      	bne.n	80030ea <vTaskStartScheduler+0x82>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	613b      	str	r3, [r7, #16]
}
 80030ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <vTaskStartScheduler+0xb4>)
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <vTaskStartScheduler+0xb8>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <vTaskStartScheduler+0xbc>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030e4:	f000 fe6c 	bl	8003dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030e8:	e00e      	b.n	8003108 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d10a      	bne.n	8003108 <vTaskStartScheduler+0xa0>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60fb      	str	r3, [r7, #12]
}
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <vTaskStartScheduler+0x9e>
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	0800500c 	.word	0x0800500c
 8003114:	080036b9 	.word	0x080036b9
 8003118:	20000468 	.word	0x20000468
 800311c:	20000464 	.word	0x20000464
 8003120:	20000450 	.word	0x20000450
 8003124:	20000448 	.word	0x20000448

08003128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <vTaskSuspendAll+0x18>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	4a03      	ldr	r2, [pc, #12]	; (8003140 <vTaskSuspendAll+0x18>)
 8003134:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	2000046c 	.word	0x2000046c

08003144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <xTaskResumeAll+0x114>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <xTaskResumeAll+0x2c>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	603b      	str	r3, [r7, #0]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003170:	f000 fec8 	bl	8003f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003174:	4b38      	ldr	r3, [pc, #224]	; (8003258 <xTaskResumeAll+0x114>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3b01      	subs	r3, #1
 800317a:	4a37      	ldr	r2, [pc, #220]	; (8003258 <xTaskResumeAll+0x114>)
 800317c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <xTaskResumeAll+0x114>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d161      	bne.n	800324a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003186:	4b35      	ldr	r3, [pc, #212]	; (800325c <xTaskResumeAll+0x118>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d05d      	beq.n	800324a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800318e:	e02e      	b.n	80031ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b33      	ldr	r3, [pc, #204]	; (8003260 <xTaskResumeAll+0x11c>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3318      	adds	r3, #24
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff f8de 	bl	800235e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f8d9 	bl	800235e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2201      	movs	r2, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <xTaskResumeAll+0x120>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <xTaskResumeAll+0x120>)
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a27      	ldr	r2, [pc, #156]	; (8003268 <xTaskResumeAll+0x124>)
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3304      	adds	r3, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f7ff f865 	bl	80022a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031de:	4b23      	ldr	r3, [pc, #140]	; (800326c <xTaskResumeAll+0x128>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d302      	bcc.n	80031ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <xTaskResumeAll+0x12c>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <xTaskResumeAll+0x11c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1cc      	bne.n	8003190 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031fc:	f000 fb12 	bl	8003824 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <xTaskResumeAll+0x130>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800320c:	f000 f836 	bl	800327c <xTaskIncrementTick>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <xTaskResumeAll+0x12c>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f1      	bne.n	800320c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <xTaskResumeAll+0x130>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <xTaskResumeAll+0x12c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003236:	2301      	movs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <xTaskResumeAll+0x134>)
 800323c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800324a:	f000 fe8b 	bl	8003f64 <vPortExitCritical>

	return xAlreadyYielded;
 800324e:	68bb      	ldr	r3, [r7, #8]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000046c 	.word	0x2000046c
 800325c:	20000444 	.word	0x20000444
 8003260:	20000404 	.word	0x20000404
 8003264:	2000044c 	.word	0x2000044c
 8003268:	20000348 	.word	0x20000348
 800326c:	20000344 	.word	0x20000344
 8003270:	20000458 	.word	0x20000458
 8003274:	20000454 	.word	0x20000454
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <xTaskIncrementTick+0x144>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 808e 	bne.w	80033ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003290:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <xTaskIncrementTick+0x148>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003298:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <xTaskIncrementTick+0x148>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d120      	bne.n	80032e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032a4:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <xTaskIncrementTick+0x14c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	603b      	str	r3, [r7, #0]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <xTaskIncrementTick+0x46>
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <xTaskIncrementTick+0x14c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b40      	ldr	r3, [pc, #256]	; (80033cc <xTaskIncrementTick+0x150>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3e      	ldr	r2, [pc, #248]	; (80033c8 <xTaskIncrementTick+0x14c>)
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4a3e      	ldr	r2, [pc, #248]	; (80033cc <xTaskIncrementTick+0x150>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <xTaskIncrementTick+0x154>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <xTaskIncrementTick+0x154>)
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	f000 fa9f 	bl	8003824 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <xTaskIncrementTick+0x158>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d348      	bcc.n	8003382 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f0:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <xTaskIncrementTick+0x14c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <xTaskIncrementTick+0x158>)
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	601a      	str	r2, [r3, #0]
					break;
 8003302:	e03e      	b.n	8003382 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003304:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <xTaskIncrementTick+0x14c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d203      	bcs.n	8003324 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800331c:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <xTaskIncrementTick+0x158>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003322:	e02e      	b.n	8003382 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3304      	adds	r3, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f818 	bl	800235e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3318      	adds	r3, #24
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f80f 	bl	800235e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <xTaskIncrementTick+0x15c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <xTaskIncrementTick+0x15c>)
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <xTaskIncrementTick+0x160>)
 8003360:	441a      	add	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7fe ff9b 	bl	80022a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <xTaskIncrementTick+0x164>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d3b9      	bcc.n	80032f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003380:	e7b6      	b.n	80032f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <xTaskIncrementTick+0x164>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	4914      	ldr	r1, [pc, #80]	; (80033dc <xTaskIncrementTick+0x160>)
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d901      	bls.n	800339e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800339a:	2301      	movs	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <xTaskIncrementTick+0x168>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e004      	b.n	80033b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <xTaskIncrementTick+0x16c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <xTaskIncrementTick+0x16c>)
 80033b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033b6:	697b      	ldr	r3, [r7, #20]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	2000046c 	.word	0x2000046c
 80033c4:	20000448 	.word	0x20000448
 80033c8:	200003fc 	.word	0x200003fc
 80033cc:	20000400 	.word	0x20000400
 80033d0:	2000045c 	.word	0x2000045c
 80033d4:	20000464 	.word	0x20000464
 80033d8:	2000044c 	.word	0x2000044c
 80033dc:	20000348 	.word	0x20000348
 80033e0:	20000344 	.word	0x20000344
 80033e4:	20000458 	.word	0x20000458
 80033e8:	20000454 	.word	0x20000454

080033ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <vTaskSwitchContext+0xa4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <vTaskSwitchContext+0xa8>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003400:	e03f      	b.n	8003482 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <vTaskSwitchContext+0xa8>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <vTaskSwitchContext+0xac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003416:	7afb      	ldrb	r3, [r7, #11]
 8003418:	f1c3 031f 	rsb	r3, r3, #31
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	491f      	ldr	r1, [pc, #124]	; (800349c <vTaskSwitchContext+0xb0>)
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	607b      	str	r3, [r7, #4]
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <vTaskSwitchContext+0x5a>
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <vTaskSwitchContext+0xb0>)
 8003454:	4413      	add	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3308      	adds	r3, #8
 800346a:	429a      	cmp	r2, r3
 800346c:	d104      	bne.n	8003478 <vTaskSwitchContext+0x8c>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <vTaskSwitchContext+0xb4>)
 8003480:	6013      	str	r3, [r2, #0]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	2000046c 	.word	0x2000046c
 8003494:	20000458 	.word	0x20000458
 8003498:	2000044c 	.word	0x2000044c
 800349c:	20000348 	.word	0x20000348
 80034a0:	20000344 	.word	0x20000344

080034a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	60fb      	str	r3, [r7, #12]
}
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <vTaskPlaceOnEventList+0x44>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3318      	adds	r3, #24
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe ff0a 	bl	80022ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034d8:	2101      	movs	r1, #1
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	f000 fb7e 	bl	8003bdc <prvAddCurrentTaskToDelayedList>
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000344 	.word	0x20000344

080034ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3318      	adds	r3, #24
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe ff1e 	bl	800235e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <xTaskRemoveFromEventList+0xac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11c      	bne.n	8003564 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe ff15 	bl	800235e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <xTaskRemoveFromEventList+0xb0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4313      	orrs	r3, r2
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <xTaskRemoveFromEventList+0xb0>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <xTaskRemoveFromEventList+0xb4>)
 8003554:	441a      	add	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3304      	adds	r3, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe fea1 	bl	80022a4 <vListInsertEnd>
 8003562:	e005      	b.n	8003570 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3318      	adds	r3, #24
 8003568:	4619      	mov	r1, r3
 800356a:	480e      	ldr	r0, [pc, #56]	; (80035a4 <xTaskRemoveFromEventList+0xb8>)
 800356c:	f7fe fe9a 	bl	80022a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <xTaskRemoveFromEventList+0xbc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	429a      	cmp	r2, r3
 800357c:	d905      	bls.n	800358a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800357e:	2301      	movs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <xTaskRemoveFromEventList+0xc0>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e001      	b.n	800358e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800358e:	697b      	ldr	r3, [r7, #20]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	2000046c 	.word	0x2000046c
 800359c:	2000044c 	.word	0x2000044c
 80035a0:	20000348 	.word	0x20000348
 80035a4:	20000404 	.word	0x20000404
 80035a8:	20000344 	.word	0x20000344
 80035ac:	20000458 	.word	0x20000458

080035b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <vTaskInternalSetTimeOutState+0x24>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <vTaskInternalSetTimeOutState+0x28>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	605a      	str	r2, [r3, #4]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	2000045c 	.word	0x2000045c
 80035d8:	20000448 	.word	0x20000448

080035dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800361e:	f000 fc71 	bl	8003f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <xTaskCheckForTimeOut+0xbc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d102      	bne.n	8003642 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	e023      	b.n	800368a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <xTaskCheckForTimeOut+0xc0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d007      	beq.n	800365e <xTaskCheckForTimeOut+0x82>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e015      	b.n	800368a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	d20b      	bcs.n	8003680 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad2      	subs	r2, r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff9b 	bl	80035b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e004      	b.n	800368a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800368a:	f000 fc6b 	bl	8003f64 <vPortExitCritical>

	return xReturn;
 800368e:	69fb      	ldr	r3, [r7, #28]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000448 	.word	0x20000448
 800369c:	2000045c 	.word	0x2000045c

080036a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <vTaskMissedYield+0x14>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	20000458 	.word	0x20000458

080036b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036c0:	f000 f852 	bl	8003768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <prvIdleTask+0x28>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d9f9      	bls.n	80036c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <prvIdleTask+0x2c>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036dc:	e7f0      	b.n	80036c0 <prvIdleTask+0x8>
 80036de:	bf00      	nop
 80036e0:	20000348 	.word	0x20000348
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	e00c      	b.n	800370e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <prvInitialiseTaskLists+0x60>)
 8003700:	4413      	add	r3, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fda1 	bl	800224a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3301      	adds	r3, #1
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d9ef      	bls.n	80036f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003714:	480d      	ldr	r0, [pc, #52]	; (800374c <prvInitialiseTaskLists+0x64>)
 8003716:	f7fe fd98 	bl	800224a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800371a:	480d      	ldr	r0, [pc, #52]	; (8003750 <prvInitialiseTaskLists+0x68>)
 800371c:	f7fe fd95 	bl	800224a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003720:	480c      	ldr	r0, [pc, #48]	; (8003754 <prvInitialiseTaskLists+0x6c>)
 8003722:	f7fe fd92 	bl	800224a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003726:	480c      	ldr	r0, [pc, #48]	; (8003758 <prvInitialiseTaskLists+0x70>)
 8003728:	f7fe fd8f 	bl	800224a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800372c:	480b      	ldr	r0, [pc, #44]	; (800375c <prvInitialiseTaskLists+0x74>)
 800372e:	f7fe fd8c 	bl	800224a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <prvInitialiseTaskLists+0x78>)
 8003734:	4a05      	ldr	r2, [pc, #20]	; (800374c <prvInitialiseTaskLists+0x64>)
 8003736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <prvInitialiseTaskLists+0x7c>)
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <prvInitialiseTaskLists+0x68>)
 800373c:	601a      	str	r2, [r3, #0]
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000348 	.word	0x20000348
 800374c:	200003d4 	.word	0x200003d4
 8003750:	200003e8 	.word	0x200003e8
 8003754:	20000404 	.word	0x20000404
 8003758:	20000418 	.word	0x20000418
 800375c:	20000430 	.word	0x20000430
 8003760:	200003fc 	.word	0x200003fc
 8003764:	20000400 	.word	0x20000400

08003768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800376e:	e019      	b.n	80037a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003770:	f000 fbc8 	bl	8003f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <prvCheckTasksWaitingTermination+0x50>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fdec 	bl	800235e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <prvCheckTasksWaitingTermination+0x54>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3b01      	subs	r3, #1
 800378c:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <prvCheckTasksWaitingTermination+0x54>)
 800378e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <prvCheckTasksWaitingTermination+0x58>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3b01      	subs	r3, #1
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <prvCheckTasksWaitingTermination+0x58>)
 8003798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800379a:	f000 fbe3 	bl	8003f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f810 	bl	80037c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <prvCheckTasksWaitingTermination+0x58>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e1      	bne.n	8003770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000418 	.word	0x20000418
 80037bc:	20000444 	.word	0x20000444
 80037c0:	2000042c 	.word	0x2000042c

080037c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fd40 	bl	8004260 <vPortFree>
				vPortFree( pxTCB );
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fd3d 	bl	8004260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037e6:	e018      	b.n	800381a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d103      	bne.n	80037fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fd34 	bl	8004260 <vPortFree>
	}
 80037f8:	e00f      	b.n	800381a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003800:	2b02      	cmp	r3, #2
 8003802:	d00a      	beq.n	800381a <prvDeleteTCB+0x56>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	60fb      	str	r3, [r7, #12]
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <prvDeleteTCB+0x54>
	}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <prvResetNextTaskUnblockTime+0x38>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <prvResetNextTaskUnblockTime+0x3c>)
 8003836:	f04f 32ff 	mov.w	r2, #4294967295
 800383a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800383c:	e008      	b.n	8003850 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <prvResetNextTaskUnblockTime+0x38>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <prvResetNextTaskUnblockTime+0x3c>)
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	200003fc 	.word	0x200003fc
 8003860:	20000464 	.word	0x20000464

08003864 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <xTaskGetSchedulerState+0x34>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003872:	2301      	movs	r3, #1
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e008      	b.n	800388a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <xTaskGetSchedulerState+0x38>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003880:	2302      	movs	r3, #2
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e001      	b.n	800388a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800388a:	687b      	ldr	r3, [r7, #4]
	}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000450 	.word	0x20000450
 800389c:	2000046c 	.word	0x2000046c

080038a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d05e      	beq.n	8003974 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <xTaskPriorityInherit+0xe0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d24e      	bcs.n	8003962 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db06      	blt.n	80038da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038cc:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <xTaskPriorityInherit+0xe0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f1c3 0207 	rsb	r2, r3, #7
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6959      	ldr	r1, [r3, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a26      	ldr	r2, [pc, #152]	; (8003984 <xTaskPriorityInherit+0xe4>)
 80038ec:	4413      	add	r3, r2
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d12f      	bne.n	8003952 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fd31 	bl	800235e <uxListRemove>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	2201      	movs	r2, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43da      	mvns	r2, r3
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <xTaskPriorityInherit+0xe8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4013      	ands	r3, r2
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <xTaskPriorityInherit+0xe8>)
 8003916:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <xTaskPriorityInherit+0xe0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <xTaskPriorityInherit+0xe8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <xTaskPriorityInherit+0xe8>)
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a10      	ldr	r2, [pc, #64]	; (8003984 <xTaskPriorityInherit+0xe4>)
 8003942:	441a      	add	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7fe fcaa 	bl	80022a4 <vListInsertEnd>
 8003950:	e004      	b.n	800395c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <xTaskPriorityInherit+0xe0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e008      	b.n	8003974 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <xTaskPriorityInherit+0xe0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	429a      	cmp	r2, r3
 800396e:	d201      	bcs.n	8003974 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003974:	68fb      	ldr	r3, [r7, #12]
	}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000344 	.word	0x20000344
 8003984:	20000348 	.word	0x20000348
 8003988:	2000044c 	.word	0x2000044c

0800398c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06e      	beq.n	8003a80 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039a2:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <xTaskPriorityDisinherit+0x100>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d00a      	beq.n	80039c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60fb      	str	r3, [r7, #12]
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60bb      	str	r3, [r7, #8]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d044      	beq.n	8003a80 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d140      	bne.n	8003a80 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fcab 	bl	800235e <uxListRemove>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	491f      	ldr	r1, [pc, #124]	; (8003a90 <xTaskPriorityDisinherit+0x104>)
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xTaskPriorityDisinherit+0xae>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <xTaskPriorityDisinherit+0x108>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4013      	ands	r3, r2
 8003a36:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <xTaskPriorityDisinherit+0x108>)
 8003a38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f1c3 0207 	rsb	r2, r3, #7
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	2201      	movs	r2, #1
 8003a54:	409a      	lsls	r2, r3
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <xTaskPriorityDisinherit+0x108>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <xTaskPriorityDisinherit+0x108>)
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <xTaskPriorityDisinherit+0x104>)
 8003a6e:	441a      	add	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7fe fc14 	bl	80022a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a80:	697b      	ldr	r3, [r7, #20]
	}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000344 	.word	0x20000344
 8003a90:	20000348 	.word	0x20000348
 8003a94:	2000044c 	.word	0x2000044c

08003a98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d077      	beq.n	8003ba0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	60fb      	str	r3, [r7, #12]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d902      	bls.n	8003ade <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e002      	b.n	8003ae4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d058      	beq.n	8003ba0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d153      	bne.n	8003ba0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10a      	bne.n	8003b18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60bb      	str	r3, [r7, #8]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	db04      	blt.n	8003b36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0207 	rsb	r2, r3, #7
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	6959      	ldr	r1, [r3, #20]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003b46:	4413      	add	r3, r2
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	d129      	bne.n	8003ba0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fc04 	bl	800235e <uxListRemove>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43da      	mvns	r2, r3
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003b70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a06      	ldr	r2, [pc, #24]	; (8003bac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003b92:	441a      	add	r2, r3
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f7fe fb82 	bl	80022a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ba0:	bf00      	nop
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000344 	.word	0x20000344
 8003bac:	20000348 	.word	0x20000348
 8003bb0:	2000044c 	.word	0x2000044c

08003bb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc6:	3201      	adds	r2, #1
 8003bc8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003bca:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
	}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	20000344 	.word	0x20000344

08003bdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fbb3 	bl	800235e <uxListRemove>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	2201      	movs	r2, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4013      	ands	r3, r2
 8003c12:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d10a      	bne.n	8003c34 <prvAddCurrentTaskToDelayedList+0x58>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	481a      	ldr	r0, [pc, #104]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c2e:	f7fe fb39 	bl	80022a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c32:	e026      	b.n	8003c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d209      	bcs.n	8003c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7fe fb47 	bl	80022ec <vListInsert>
}
 8003c5e:	e010      	b.n	8003c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7fe fb3d 	bl	80022ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d202      	bcs.n	8003c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c7c:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000448 	.word	0x20000448
 8003c90:	20000344 	.word	0x20000344
 8003c94:	2000044c 	.word	0x2000044c
 8003c98:	20000430 	.word	0x20000430
 8003c9c:	20000400 	.word	0x20000400
 8003ca0:	200003fc 	.word	0x200003fc
 8003ca4:	20000464 	.word	0x20000464

08003ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3b04      	subs	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3b04      	subs	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <pxPortInitialiseStack+0x64>)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3b14      	subs	r3, #20
 8003ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f06f 0202 	mvn.w	r2, #2
 8003cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b20      	subs	r3, #32
 8003cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	08003d11 	.word	0x08003d11

08003d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <prvTaskExitError+0x54>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d00a      	beq.n	8003d3a <prvTaskExitError+0x2a>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	60fb      	str	r3, [r7, #12]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <prvTaskExitError+0x28>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60bb      	str	r3, [r7, #8]
}
 8003d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d4e:	bf00      	nop
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0fc      	beq.n	8003d50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	2000000c 	.word	0x2000000c
	...

08003d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <pxCurrentTCBConst2>)
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	6808      	ldr	r0, [r1, #0]
 8003d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	f380 8809 	msr	PSP, r0
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8811 	msr	BASEPRI, r0
 8003d8a:	4770      	bx	lr
 8003d8c:	f3af 8000 	nop.w

08003d90 <pxCurrentTCBConst2>:
 8003d90:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop

08003d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <prvPortStartFirstTask+0x24>)
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	f380 8808 	msr	MSP, r0
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f380 8814 	msr	CONTROL, r0
 8003daa:	b662      	cpsie	i
 8003dac:	b661      	cpsie	f
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	df00      	svc	0
 8003db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dba:	bf00      	nop
 8003dbc:	e000ed08 	.word	0xe000ed08

08003dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dc6:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <xPortStartScheduler+0x120>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a46      	ldr	r2, [pc, #280]	; (8003ee4 <xPortStartScheduler+0x124>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10a      	bne.n	8003de6 <xPortStartScheduler+0x26>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <xPortStartScheduler+0x120>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3f      	ldr	r2, [pc, #252]	; (8003ee8 <xPortStartScheduler+0x128>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10a      	bne.n	8003e06 <xPortStartScheduler+0x46>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e06:	4b39      	ldr	r3, [pc, #228]	; (8003eec <xPortStartScheduler+0x12c>)
 8003e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <xPortStartScheduler+0x130>)
 8003e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e2e:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e34:	e009      	b.n	8003e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e36:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a2d      	ldr	r2, [pc, #180]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d0ef      	beq.n	8003e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e56:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1c3 0307 	rsb	r3, r3, #7
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00a      	beq.n	8003e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60bb      	str	r3, [r7, #8]
}
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003eae:	f000 f8dd 	bl	800406c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <xPortStartScheduler+0x13c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003eb8:	f000 f8fc 	bl	80040b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <xPortStartScheduler+0x140>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <xPortStartScheduler+0x140>)
 8003ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ec8:	f7ff ff66 	bl	8003d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ecc:	f7ff fa8e 	bl	80033ec <vTaskSwitchContext>
	prvTaskExitError();
 8003ed0:	f7ff ff1e 	bl	8003d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	410fc271 	.word	0x410fc271
 8003ee8:	410fc270 	.word	0x410fc270
 8003eec:	e000e400 	.word	0xe000e400
 8003ef0:	20000470 	.word	0x20000470
 8003ef4:	20000474 	.word	0x20000474
 8003ef8:	e000ed20 	.word	0xe000ed20
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	e000ef34 	.word	0xe000ef34

08003f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	607b      	str	r3, [r7, #4]
}
 8003f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <vPortEnterCritical+0x58>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <vPortEnterCritical+0x58>)
 8003f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <vPortEnterCritical+0x58>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10f      	bne.n	8003f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <vPortEnterCritical+0x5c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	603b      	str	r3, [r7, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <vPortEnterCritical+0x4a>
	}
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <vPortExitCritical+0x24>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	607b      	str	r3, [r7, #4]
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <vPortExitCritical+0x42>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c
	...

08003fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fc0:	f3ef 8009 	mrs	r0, PSP
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <pxCurrentTCBConst>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f01e 0f10 	tst.w	lr, #16
 8003fd0:	bf08      	it	eq
 8003fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fe4:	f380 8811 	msr	BASEPRI, r0
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f7ff f9fc 	bl	80033ec <vTaskSwitchContext>
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f380 8811 	msr	BASEPRI, r0
 8003ffc:	bc09      	pop	{r0, r3}
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004006:	f01e 0f10 	tst.w	lr, #16
 800400a:	bf08      	it	eq
 800400c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004010:	f380 8809 	msr	PSP, r0
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w

08004020 <pxCurrentTCBConst>:
 8004020:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop

08004028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
}
 8004040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004042:	f7ff f91b 	bl	800327c <xTaskIncrementTick>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <SysTick_Handler+0x40>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f383 8811 	msr	BASEPRI, r3
}
 800405e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <vPortSetupTimerInterrupt+0x34>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <vPortSetupTimerInterrupt+0x38>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <vPortSetupTimerInterrupt+0x3c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <vPortSetupTimerInterrupt+0x40>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <vPortSetupTimerInterrupt+0x44>)
 800408a:	3b01      	subs	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <vPortSetupTimerInterrupt+0x34>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e010 	.word	0xe000e010
 80040a4:	e000e018 	.word	0xe000e018
 80040a8:	20000000 	.word	0x20000000
 80040ac:	10624dd3 	.word	0x10624dd3
 80040b0:	e000e014 	.word	0xe000e014

080040b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040c4 <vPortEnableVFP+0x10>
 80040b8:	6801      	ldr	r1, [r0, #0]
 80040ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040be:	6001      	str	r1, [r0, #0]
 80040c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040c2:	bf00      	nop
 80040c4:	e000ed88 	.word	0xe000ed88

080040c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040d4:	f7ff f828 	bl	8003128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040d8:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <pvPortMalloc+0x180>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040e0:	f000 f920 	bl	8004324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <pvPortMalloc+0x184>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 8093 	bne.w	8004218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01d      	beq.n	8004134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80040f8:	2208      	movs	r2, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d014      	beq.n	8004134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f023 0307 	bic.w	r3, r3, #7
 8004110:	3308      	adds	r3, #8
 8004112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <pvPortMalloc+0x6c>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	617b      	str	r3, [r7, #20]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d06e      	beq.n	8004218 <pvPortMalloc+0x150>
 800413a:	4b45      	ldr	r3, [pc, #276]	; (8004250 <pvPortMalloc+0x188>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d869      	bhi.n	8004218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <pvPortMalloc+0x18c>)
 8004146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <pvPortMalloc+0x18c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800414e:	e004      	b.n	800415a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <pvPortMalloc+0xa4>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f1      	bne.n	8004150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800416c:	4b36      	ldr	r3, [pc, #216]	; (8004248 <pvPortMalloc+0x180>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d050      	beq.n	8004218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2208      	movs	r2, #8
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	2308      	movs	r3, #8
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	429a      	cmp	r2, r3
 8004196:	d91f      	bls.n	80041d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <pvPortMalloc+0xf8>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	613b      	str	r3, [r7, #16]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f000 f908 	bl	80043e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <pvPortMalloc+0x188>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <pvPortMalloc+0x188>)
 80041e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <pvPortMalloc+0x188>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <pvPortMalloc+0x190>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d203      	bcs.n	80041fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <pvPortMalloc+0x188>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <pvPortMalloc+0x190>)
 80041f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <pvPortMalloc+0x184>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	431a      	orrs	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <pvPortMalloc+0x194>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <pvPortMalloc+0x194>)
 8004216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004218:	f7fe ff94 	bl	8003144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <pvPortMalloc+0x174>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60fb      	str	r3, [r7, #12]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <pvPortMalloc+0x172>
	return pvReturn;
 800423c:	69fb      	ldr	r3, [r7, #28]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20001038 	.word	0x20001038
 800424c:	2000104c 	.word	0x2000104c
 8004250:	2000103c 	.word	0x2000103c
 8004254:	20001030 	.word	0x20001030
 8004258:	20001040 	.word	0x20001040
 800425c:	20001044 	.word	0x20001044

08004260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04d      	beq.n	800430e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004272:	2308      	movs	r3, #8
 8004274:	425b      	negs	r3, r3
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <vPortFree+0xb8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <vPortFree+0x44>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60fb      	str	r3, [r7, #12]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <vPortFree+0x62>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60bb      	str	r3, [r7, #8]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <vPortFree+0xb8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01e      	beq.n	800430e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <vPortFree+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042e8:	f7fe ff1e 	bl	8003128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <vPortFree+0xbc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <vPortFree+0xbc>)
 80042f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 f874 	bl	80043e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <vPortFree+0xc0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <vPortFree+0xc0>)
 8004308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800430a:	f7fe ff1b 	bl	8003144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	2000104c 	.word	0x2000104c
 800431c:	2000103c 	.word	0x2000103c
 8004320:	20001048 	.word	0x20001048

08004324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800432a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800432e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvHeapInit+0xac>)
 8004332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3307      	adds	r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <prvHeapInit+0xac>)
 8004354:	4413      	add	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <prvHeapInit+0xb0>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <prvHeapInit+0xb0>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004370:	2208      	movs	r2, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <prvHeapInit+0xb4>)
 8004384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <prvHeapInit+0xb4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <prvHeapInit+0xb4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvHeapInit+0xb4>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <prvHeapInit+0xb8>)
 80043b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <prvHeapInit+0xbc>)
 80043ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <prvHeapInit+0xc0>)
 80043be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000478 	.word	0x20000478
 80043d4:	20001030 	.word	0x20001030
 80043d8:	20001038 	.word	0x20001038
 80043dc:	20001040 	.word	0x20001040
 80043e0:	2000103c 	.word	0x2000103c
 80043e4:	2000104c 	.word	0x2000104c

080043e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <prvInsertBlockIntoFreeList+0xac>)
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e002      	b.n	80043fc <prvInsertBlockIntoFreeList+0x14>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d8f7      	bhi.n	80043f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d108      	bne.n	800442a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d118      	bne.n	8004470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d00d      	beq.n	8004466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e008      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e003      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d002      	beq.n	8004486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20001030 	.word	0x20001030
 8004498:	20001038 	.word	0x20001038

0800449c <__errno>:
 800449c:	4b01      	ldr	r3, [pc, #4]	; (80044a4 <__errno+0x8>)
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000010 	.word	0x20000010

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4d0d      	ldr	r5, [pc, #52]	; (80044e0 <__libc_init_array+0x38>)
 80044ac:	4c0d      	ldr	r4, [pc, #52]	; (80044e4 <__libc_init_array+0x3c>)
 80044ae:	1b64      	subs	r4, r4, r5
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	2600      	movs	r6, #0
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	4d0b      	ldr	r5, [pc, #44]	; (80044e8 <__libc_init_array+0x40>)
 80044ba:	4c0c      	ldr	r4, [pc, #48]	; (80044ec <__libc_init_array+0x44>)
 80044bc:	f000 fd2c 	bl	8004f18 <_init>
 80044c0:	1b64      	subs	r4, r4, r5
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	2600      	movs	r6, #0
 80044c6:	42a6      	cmp	r6, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d0:	4798      	blx	r3
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044da:	4798      	blx	r3
 80044dc:	3601      	adds	r6, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	080050c0 	.word	0x080050c0
 80044e4:	080050c0 	.word	0x080050c0
 80044e8:	080050c0 	.word	0x080050c0
 80044ec:	080050c4 	.word	0x080050c4

080044f0 <memcpy>:
 80044f0:	440a      	add	r2, r1
 80044f2:	4291      	cmp	r1, r2
 80044f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f8:	d100      	bne.n	80044fc <memcpy+0xc>
 80044fa:	4770      	bx	lr
 80044fc:	b510      	push	{r4, lr}
 80044fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004506:	4291      	cmp	r1, r2
 8004508:	d1f9      	bne.n	80044fe <memcpy+0xe>
 800450a:	bd10      	pop	{r4, pc}

0800450c <memset>:
 800450c:	4402      	add	r2, r0
 800450e:	4603      	mov	r3, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <_puts_r>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	460e      	mov	r6, r1
 8004520:	4605      	mov	r5, r0
 8004522:	b118      	cbz	r0, 800452c <_puts_r+0x10>
 8004524:	6983      	ldr	r3, [r0, #24]
 8004526:	b90b      	cbnz	r3, 800452c <_puts_r+0x10>
 8004528:	f000 fa48 	bl	80049bc <__sinit>
 800452c:	69ab      	ldr	r3, [r5, #24]
 800452e:	68ac      	ldr	r4, [r5, #8]
 8004530:	b913      	cbnz	r3, 8004538 <_puts_r+0x1c>
 8004532:	4628      	mov	r0, r5
 8004534:	f000 fa42 	bl	80049bc <__sinit>
 8004538:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <_puts_r+0xd0>)
 800453a:	429c      	cmp	r4, r3
 800453c:	d120      	bne.n	8004580 <_puts_r+0x64>
 800453e:	686c      	ldr	r4, [r5, #4]
 8004540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004542:	07db      	lsls	r3, r3, #31
 8004544:	d405      	bmi.n	8004552 <_puts_r+0x36>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	0598      	lsls	r0, r3, #22
 800454a:	d402      	bmi.n	8004552 <_puts_r+0x36>
 800454c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800454e:	f000 fad3 	bl	8004af8 <__retarget_lock_acquire_recursive>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	0719      	lsls	r1, r3, #28
 8004556:	d51d      	bpl.n	8004594 <_puts_r+0x78>
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	b1db      	cbz	r3, 8004594 <_puts_r+0x78>
 800455c:	3e01      	subs	r6, #1
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004564:	3b01      	subs	r3, #1
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	bb39      	cbnz	r1, 80045ba <_puts_r+0x9e>
 800456a:	2b00      	cmp	r3, #0
 800456c:	da38      	bge.n	80045e0 <_puts_r+0xc4>
 800456e:	4622      	mov	r2, r4
 8004570:	210a      	movs	r1, #10
 8004572:	4628      	mov	r0, r5
 8004574:	f000 f848 	bl	8004608 <__swbuf_r>
 8004578:	3001      	adds	r0, #1
 800457a:	d011      	beq.n	80045a0 <_puts_r+0x84>
 800457c:	250a      	movs	r5, #10
 800457e:	e011      	b.n	80045a4 <_puts_r+0x88>
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <_puts_r+0xd4>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d101      	bne.n	800458a <_puts_r+0x6e>
 8004586:	68ac      	ldr	r4, [r5, #8]
 8004588:	e7da      	b.n	8004540 <_puts_r+0x24>
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <_puts_r+0xd8>)
 800458c:	429c      	cmp	r4, r3
 800458e:	bf08      	it	eq
 8004590:	68ec      	ldreq	r4, [r5, #12]
 8004592:	e7d5      	b.n	8004540 <_puts_r+0x24>
 8004594:	4621      	mov	r1, r4
 8004596:	4628      	mov	r0, r5
 8004598:	f000 f888 	bl	80046ac <__swsetup_r>
 800459c:	2800      	cmp	r0, #0
 800459e:	d0dd      	beq.n	800455c <_puts_r+0x40>
 80045a0:	f04f 35ff 	mov.w	r5, #4294967295
 80045a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045a6:	07da      	lsls	r2, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_puts_r+0x9a>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	059b      	lsls	r3, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_puts_r+0x9a>
 80045b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045b2:	f000 faa2 	bl	8004afa <__retarget_lock_release_recursive>
 80045b6:	4628      	mov	r0, r5
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da04      	bge.n	80045c8 <_puts_r+0xac>
 80045be:	69a2      	ldr	r2, [r4, #24]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	dc06      	bgt.n	80045d2 <_puts_r+0xb6>
 80045c4:	290a      	cmp	r1, #10
 80045c6:	d004      	beq.n	80045d2 <_puts_r+0xb6>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	7019      	strb	r1, [r3, #0]
 80045d0:	e7c5      	b.n	800455e <_puts_r+0x42>
 80045d2:	4622      	mov	r2, r4
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 f817 	bl	8004608 <__swbuf_r>
 80045da:	3001      	adds	r0, #1
 80045dc:	d1bf      	bne.n	800455e <_puts_r+0x42>
 80045de:	e7df      	b.n	80045a0 <_puts_r+0x84>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	250a      	movs	r5, #10
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	701d      	strb	r5, [r3, #0]
 80045ea:	e7db      	b.n	80045a4 <_puts_r+0x88>
 80045ec:	08005080 	.word	0x08005080
 80045f0:	080050a0 	.word	0x080050a0
 80045f4:	08005060 	.word	0x08005060

080045f8 <puts>:
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <puts+0xc>)
 80045fa:	4601      	mov	r1, r0
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	f7ff bf8d 	b.w	800451c <_puts_r>
 8004602:	bf00      	nop
 8004604:	20000010 	.word	0x20000010

08004608 <__swbuf_r>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	460e      	mov	r6, r1
 800460c:	4614      	mov	r4, r2
 800460e:	4605      	mov	r5, r0
 8004610:	b118      	cbz	r0, 800461a <__swbuf_r+0x12>
 8004612:	6983      	ldr	r3, [r0, #24]
 8004614:	b90b      	cbnz	r3, 800461a <__swbuf_r+0x12>
 8004616:	f000 f9d1 	bl	80049bc <__sinit>
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <__swbuf_r+0x98>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d12b      	bne.n	8004678 <__swbuf_r+0x70>
 8004620:	686c      	ldr	r4, [r5, #4]
 8004622:	69a3      	ldr	r3, [r4, #24]
 8004624:	60a3      	str	r3, [r4, #8]
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	071a      	lsls	r2, r3, #28
 800462a:	d52f      	bpl.n	800468c <__swbuf_r+0x84>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	b36b      	cbz	r3, 800468c <__swbuf_r+0x84>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	1ac0      	subs	r0, r0, r3
 8004636:	6963      	ldr	r3, [r4, #20]
 8004638:	b2f6      	uxtb	r6, r6
 800463a:	4283      	cmp	r3, r0
 800463c:	4637      	mov	r7, r6
 800463e:	dc04      	bgt.n	800464a <__swbuf_r+0x42>
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f926 	bl	8004894 <_fflush_r>
 8004648:	bb30      	cbnz	r0, 8004698 <__swbuf_r+0x90>
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	3b01      	subs	r3, #1
 800464e:	60a3      	str	r3, [r4, #8]
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	6022      	str	r2, [r4, #0]
 8004656:	701e      	strb	r6, [r3, #0]
 8004658:	6963      	ldr	r3, [r4, #20]
 800465a:	3001      	adds	r0, #1
 800465c:	4283      	cmp	r3, r0
 800465e:	d004      	beq.n	800466a <__swbuf_r+0x62>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	07db      	lsls	r3, r3, #31
 8004664:	d506      	bpl.n	8004674 <__swbuf_r+0x6c>
 8004666:	2e0a      	cmp	r6, #10
 8004668:	d104      	bne.n	8004674 <__swbuf_r+0x6c>
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f911 	bl	8004894 <_fflush_r>
 8004672:	b988      	cbnz	r0, 8004698 <__swbuf_r+0x90>
 8004674:	4638      	mov	r0, r7
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <__swbuf_r+0x9c>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d101      	bne.n	8004682 <__swbuf_r+0x7a>
 800467e:	68ac      	ldr	r4, [r5, #8]
 8004680:	e7cf      	b.n	8004622 <__swbuf_r+0x1a>
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <__swbuf_r+0xa0>)
 8004684:	429c      	cmp	r4, r3
 8004686:	bf08      	it	eq
 8004688:	68ec      	ldreq	r4, [r5, #12]
 800468a:	e7ca      	b.n	8004622 <__swbuf_r+0x1a>
 800468c:	4621      	mov	r1, r4
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f80c 	bl	80046ac <__swsetup_r>
 8004694:	2800      	cmp	r0, #0
 8004696:	d0cb      	beq.n	8004630 <__swbuf_r+0x28>
 8004698:	f04f 37ff 	mov.w	r7, #4294967295
 800469c:	e7ea      	b.n	8004674 <__swbuf_r+0x6c>
 800469e:	bf00      	nop
 80046a0:	08005080 	.word	0x08005080
 80046a4:	080050a0 	.word	0x080050a0
 80046a8:	08005060 	.word	0x08005060

080046ac <__swsetup_r>:
 80046ac:	4b32      	ldr	r3, [pc, #200]	; (8004778 <__swsetup_r+0xcc>)
 80046ae:	b570      	push	{r4, r5, r6, lr}
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	4606      	mov	r6, r0
 80046b4:	460c      	mov	r4, r1
 80046b6:	b125      	cbz	r5, 80046c2 <__swsetup_r+0x16>
 80046b8:	69ab      	ldr	r3, [r5, #24]
 80046ba:	b913      	cbnz	r3, 80046c2 <__swsetup_r+0x16>
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 f97d 	bl	80049bc <__sinit>
 80046c2:	4b2e      	ldr	r3, [pc, #184]	; (800477c <__swsetup_r+0xd0>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d10f      	bne.n	80046e8 <__swsetup_r+0x3c>
 80046c8:	686c      	ldr	r4, [r5, #4]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046d0:	0719      	lsls	r1, r3, #28
 80046d2:	d42c      	bmi.n	800472e <__swsetup_r+0x82>
 80046d4:	06dd      	lsls	r5, r3, #27
 80046d6:	d411      	bmi.n	80046fc <__swsetup_r+0x50>
 80046d8:	2309      	movs	r3, #9
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	e03e      	b.n	8004766 <__swsetup_r+0xba>
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <__swsetup_r+0xd4>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d101      	bne.n	80046f2 <__swsetup_r+0x46>
 80046ee:	68ac      	ldr	r4, [r5, #8]
 80046f0:	e7eb      	b.n	80046ca <__swsetup_r+0x1e>
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <__swsetup_r+0xd8>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	bf08      	it	eq
 80046f8:	68ec      	ldreq	r4, [r5, #12]
 80046fa:	e7e6      	b.n	80046ca <__swsetup_r+0x1e>
 80046fc:	0758      	lsls	r0, r3, #29
 80046fe:	d512      	bpl.n	8004726 <__swsetup_r+0x7a>
 8004700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004702:	b141      	cbz	r1, 8004716 <__swsetup_r+0x6a>
 8004704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004708:	4299      	cmp	r1, r3
 800470a:	d002      	beq.n	8004712 <__swsetup_r+0x66>
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fa5b 	bl	8004bc8 <_free_r>
 8004712:	2300      	movs	r3, #0
 8004714:	6363      	str	r3, [r4, #52]	; 0x34
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	2300      	movs	r3, #0
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	b94b      	cbnz	r3, 8004746 <__swsetup_r+0x9a>
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d003      	beq.n	8004746 <__swsetup_r+0x9a>
 800473e:	4621      	mov	r1, r4
 8004740:	4630      	mov	r0, r6
 8004742:	f000 fa01 	bl	8004b48 <__smakebuf_r>
 8004746:	89a0      	ldrh	r0, [r4, #12]
 8004748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800474c:	f010 0301 	ands.w	r3, r0, #1
 8004750:	d00a      	beq.n	8004768 <__swsetup_r+0xbc>
 8004752:	2300      	movs	r3, #0
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	6963      	ldr	r3, [r4, #20]
 8004758:	425b      	negs	r3, r3
 800475a:	61a3      	str	r3, [r4, #24]
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b943      	cbnz	r3, 8004772 <__swsetup_r+0xc6>
 8004760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004764:	d1ba      	bne.n	80046dc <__swsetup_r+0x30>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	0781      	lsls	r1, r0, #30
 800476a:	bf58      	it	pl
 800476c:	6963      	ldrpl	r3, [r4, #20]
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	e7f4      	b.n	800475c <__swsetup_r+0xb0>
 8004772:	2000      	movs	r0, #0
 8004774:	e7f7      	b.n	8004766 <__swsetup_r+0xba>
 8004776:	bf00      	nop
 8004778:	20000010 	.word	0x20000010
 800477c:	08005080 	.word	0x08005080
 8004780:	080050a0 	.word	0x080050a0
 8004784:	08005060 	.word	0x08005060

08004788 <__sflush_r>:
 8004788:	898a      	ldrh	r2, [r1, #12]
 800478a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478e:	4605      	mov	r5, r0
 8004790:	0710      	lsls	r0, r2, #28
 8004792:	460c      	mov	r4, r1
 8004794:	d458      	bmi.n	8004848 <__sflush_r+0xc0>
 8004796:	684b      	ldr	r3, [r1, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	dc05      	bgt.n	80047a8 <__sflush_r+0x20>
 800479c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dc02      	bgt.n	80047a8 <__sflush_r+0x20>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	d0f9      	beq.n	80047a2 <__sflush_r+0x1a>
 80047ae:	2300      	movs	r3, #0
 80047b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b4:	682f      	ldr	r7, [r5, #0]
 80047b6:	602b      	str	r3, [r5, #0]
 80047b8:	d032      	beq.n	8004820 <__sflush_r+0x98>
 80047ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	075a      	lsls	r2, r3, #29
 80047c0:	d505      	bpl.n	80047ce <__sflush_r+0x46>
 80047c2:	6863      	ldr	r3, [r4, #4]
 80047c4:	1ac0      	subs	r0, r0, r3
 80047c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c8:	b10b      	cbz	r3, 80047ce <__sflush_r+0x46>
 80047ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047cc:	1ac0      	subs	r0, r0, r3
 80047ce:	2300      	movs	r3, #0
 80047d0:	4602      	mov	r2, r0
 80047d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d4:	6a21      	ldr	r1, [r4, #32]
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b0      	blx	r6
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	d106      	bne.n	80047ee <__sflush_r+0x66>
 80047e0:	6829      	ldr	r1, [r5, #0]
 80047e2:	291d      	cmp	r1, #29
 80047e4:	d82c      	bhi.n	8004840 <__sflush_r+0xb8>
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <__sflush_r+0x108>)
 80047e8:	40ca      	lsrs	r2, r1
 80047ea:	07d6      	lsls	r6, r2, #31
 80047ec:	d528      	bpl.n	8004840 <__sflush_r+0xb8>
 80047ee:	2200      	movs	r2, #0
 80047f0:	6062      	str	r2, [r4, #4]
 80047f2:	04d9      	lsls	r1, r3, #19
 80047f4:	6922      	ldr	r2, [r4, #16]
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	d504      	bpl.n	8004804 <__sflush_r+0x7c>
 80047fa:	1c42      	adds	r2, r0, #1
 80047fc:	d101      	bne.n	8004802 <__sflush_r+0x7a>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	b903      	cbnz	r3, 8004804 <__sflush_r+0x7c>
 8004802:	6560      	str	r0, [r4, #84]	; 0x54
 8004804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004806:	602f      	str	r7, [r5, #0]
 8004808:	2900      	cmp	r1, #0
 800480a:	d0ca      	beq.n	80047a2 <__sflush_r+0x1a>
 800480c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004810:	4299      	cmp	r1, r3
 8004812:	d002      	beq.n	800481a <__sflush_r+0x92>
 8004814:	4628      	mov	r0, r5
 8004816:	f000 f9d7 	bl	8004bc8 <_free_r>
 800481a:	2000      	movs	r0, #0
 800481c:	6360      	str	r0, [r4, #52]	; 0x34
 800481e:	e7c1      	b.n	80047a4 <__sflush_r+0x1c>
 8004820:	6a21      	ldr	r1, [r4, #32]
 8004822:	2301      	movs	r3, #1
 8004824:	4628      	mov	r0, r5
 8004826:	47b0      	blx	r6
 8004828:	1c41      	adds	r1, r0, #1
 800482a:	d1c7      	bne.n	80047bc <__sflush_r+0x34>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0c4      	beq.n	80047bc <__sflush_r+0x34>
 8004832:	2b1d      	cmp	r3, #29
 8004834:	d001      	beq.n	800483a <__sflush_r+0xb2>
 8004836:	2b16      	cmp	r3, #22
 8004838:	d101      	bne.n	800483e <__sflush_r+0xb6>
 800483a:	602f      	str	r7, [r5, #0]
 800483c:	e7b1      	b.n	80047a2 <__sflush_r+0x1a>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	e7ad      	b.n	80047a4 <__sflush_r+0x1c>
 8004848:	690f      	ldr	r7, [r1, #16]
 800484a:	2f00      	cmp	r7, #0
 800484c:	d0a9      	beq.n	80047a2 <__sflush_r+0x1a>
 800484e:	0793      	lsls	r3, r2, #30
 8004850:	680e      	ldr	r6, [r1, #0]
 8004852:	bf08      	it	eq
 8004854:	694b      	ldreq	r3, [r1, #20]
 8004856:	600f      	str	r7, [r1, #0]
 8004858:	bf18      	it	ne
 800485a:	2300      	movne	r3, #0
 800485c:	eba6 0807 	sub.w	r8, r6, r7
 8004860:	608b      	str	r3, [r1, #8]
 8004862:	f1b8 0f00 	cmp.w	r8, #0
 8004866:	dd9c      	ble.n	80047a2 <__sflush_r+0x1a>
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800486c:	4643      	mov	r3, r8
 800486e:	463a      	mov	r2, r7
 8004870:	4628      	mov	r0, r5
 8004872:	47b0      	blx	r6
 8004874:	2800      	cmp	r0, #0
 8004876:	dc06      	bgt.n	8004886 <__sflush_r+0xfe>
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e78e      	b.n	80047a4 <__sflush_r+0x1c>
 8004886:	4407      	add	r7, r0
 8004888:	eba8 0800 	sub.w	r8, r8, r0
 800488c:	e7e9      	b.n	8004862 <__sflush_r+0xda>
 800488e:	bf00      	nop
 8004890:	20400001 	.word	0x20400001

08004894 <_fflush_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	4605      	mov	r5, r0
 800489a:	460c      	mov	r4, r1
 800489c:	b913      	cbnz	r3, 80048a4 <_fflush_r+0x10>
 800489e:	2500      	movs	r5, #0
 80048a0:	4628      	mov	r0, r5
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	b118      	cbz	r0, 80048ae <_fflush_r+0x1a>
 80048a6:	6983      	ldr	r3, [r0, #24]
 80048a8:	b90b      	cbnz	r3, 80048ae <_fflush_r+0x1a>
 80048aa:	f000 f887 	bl	80049bc <__sinit>
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <_fflush_r+0x6c>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	d11b      	bne.n	80048ec <_fflush_r+0x58>
 80048b4:	686c      	ldr	r4, [r5, #4]
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ef      	beq.n	800489e <_fflush_r+0xa>
 80048be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c0:	07d0      	lsls	r0, r2, #31
 80048c2:	d404      	bmi.n	80048ce <_fflush_r+0x3a>
 80048c4:	0599      	lsls	r1, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_fflush_r+0x3a>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f000 f915 	bl	8004af8 <__retarget_lock_acquire_recursive>
 80048ce:	4628      	mov	r0, r5
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7ff ff59 	bl	8004788 <__sflush_r>
 80048d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d8:	07da      	lsls	r2, r3, #31
 80048da:	4605      	mov	r5, r0
 80048dc:	d4e0      	bmi.n	80048a0 <_fflush_r+0xc>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	059b      	lsls	r3, r3, #22
 80048e2:	d4dd      	bmi.n	80048a0 <_fflush_r+0xc>
 80048e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e6:	f000 f908 	bl	8004afa <__retarget_lock_release_recursive>
 80048ea:	e7d9      	b.n	80048a0 <_fflush_r+0xc>
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <_fflush_r+0x70>)
 80048ee:	429c      	cmp	r4, r3
 80048f0:	d101      	bne.n	80048f6 <_fflush_r+0x62>
 80048f2:	68ac      	ldr	r4, [r5, #8]
 80048f4:	e7df      	b.n	80048b6 <_fflush_r+0x22>
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <_fflush_r+0x74>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	bf08      	it	eq
 80048fc:	68ec      	ldreq	r4, [r5, #12]
 80048fe:	e7da      	b.n	80048b6 <_fflush_r+0x22>
 8004900:	08005080 	.word	0x08005080
 8004904:	080050a0 	.word	0x080050a0
 8004908:	08005060 	.word	0x08005060

0800490c <std>:
 800490c:	2300      	movs	r3, #0
 800490e:	b510      	push	{r4, lr}
 8004910:	4604      	mov	r4, r0
 8004912:	e9c0 3300 	strd	r3, r3, [r0]
 8004916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800491a:	6083      	str	r3, [r0, #8]
 800491c:	8181      	strh	r1, [r0, #12]
 800491e:	6643      	str	r3, [r0, #100]	; 0x64
 8004920:	81c2      	strh	r2, [r0, #14]
 8004922:	6183      	str	r3, [r0, #24]
 8004924:	4619      	mov	r1, r3
 8004926:	2208      	movs	r2, #8
 8004928:	305c      	adds	r0, #92	; 0x5c
 800492a:	f7ff fdef 	bl	800450c <memset>
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <std+0x38>)
 8004930:	6263      	str	r3, [r4, #36]	; 0x24
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <std+0x3c>)
 8004934:	62a3      	str	r3, [r4, #40]	; 0x28
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <std+0x40>)
 8004938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <std+0x44>)
 800493c:	6224      	str	r4, [r4, #32]
 800493e:	6323      	str	r3, [r4, #48]	; 0x30
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	08004da9 	.word	0x08004da9
 8004948:	08004dcb 	.word	0x08004dcb
 800494c:	08004e03 	.word	0x08004e03
 8004950:	08004e27 	.word	0x08004e27

08004954 <_cleanup_r>:
 8004954:	4901      	ldr	r1, [pc, #4]	; (800495c <_cleanup_r+0x8>)
 8004956:	f000 b8af 	b.w	8004ab8 <_fwalk_reent>
 800495a:	bf00      	nop
 800495c:	08004895 	.word	0x08004895

08004960 <__sfmoreglue>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	2268      	movs	r2, #104	; 0x68
 8004964:	1e4d      	subs	r5, r1, #1
 8004966:	4355      	muls	r5, r2
 8004968:	460e      	mov	r6, r1
 800496a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800496e:	f000 f997 	bl	8004ca0 <_malloc_r>
 8004972:	4604      	mov	r4, r0
 8004974:	b140      	cbz	r0, 8004988 <__sfmoreglue+0x28>
 8004976:	2100      	movs	r1, #0
 8004978:	e9c0 1600 	strd	r1, r6, [r0]
 800497c:	300c      	adds	r0, #12
 800497e:	60a0      	str	r0, [r4, #8]
 8004980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004984:	f7ff fdc2 	bl	800450c <memset>
 8004988:	4620      	mov	r0, r4
 800498a:	bd70      	pop	{r4, r5, r6, pc}

0800498c <__sfp_lock_acquire>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__sfp_lock_acquire+0x8>)
 800498e:	f000 b8b3 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	20001051 	.word	0x20001051

08004998 <__sfp_lock_release>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_release+0x8>)
 800499a:	f000 b8ae 	b.w	8004afa <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	20001051 	.word	0x20001051

080049a4 <__sinit_lock_acquire>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sinit_lock_acquire+0x8>)
 80049a6:	f000 b8a7 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20001052 	.word	0x20001052

080049b0 <__sinit_lock_release>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sinit_lock_release+0x8>)
 80049b2:	f000 b8a2 	b.w	8004afa <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20001052 	.word	0x20001052

080049bc <__sinit>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	4604      	mov	r4, r0
 80049c0:	f7ff fff0 	bl	80049a4 <__sinit_lock_acquire>
 80049c4:	69a3      	ldr	r3, [r4, #24]
 80049c6:	b11b      	cbz	r3, 80049d0 <__sinit+0x14>
 80049c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049cc:	f7ff bff0 	b.w	80049b0 <__sinit_lock_release>
 80049d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049d4:	6523      	str	r3, [r4, #80]	; 0x50
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <__sinit+0x68>)
 80049d8:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <__sinit+0x6c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80049de:	42a3      	cmp	r3, r4
 80049e0:	bf04      	itt	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	61a3      	streq	r3, [r4, #24]
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 f820 	bl	8004a2c <__sfp>
 80049ec:	6060      	str	r0, [r4, #4]
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 f81c 	bl	8004a2c <__sfp>
 80049f4:	60a0      	str	r0, [r4, #8]
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f818 	bl	8004a2c <__sfp>
 80049fc:	2200      	movs	r2, #0
 80049fe:	60e0      	str	r0, [r4, #12]
 8004a00:	2104      	movs	r1, #4
 8004a02:	6860      	ldr	r0, [r4, #4]
 8004a04:	f7ff ff82 	bl	800490c <std>
 8004a08:	68a0      	ldr	r0, [r4, #8]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	2109      	movs	r1, #9
 8004a0e:	f7ff ff7d 	bl	800490c <std>
 8004a12:	68e0      	ldr	r0, [r4, #12]
 8004a14:	2202      	movs	r2, #2
 8004a16:	2112      	movs	r1, #18
 8004a18:	f7ff ff78 	bl	800490c <std>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61a3      	str	r3, [r4, #24]
 8004a20:	e7d2      	b.n	80049c8 <__sinit+0xc>
 8004a22:	bf00      	nop
 8004a24:	0800505c 	.word	0x0800505c
 8004a28:	08004955 	.word	0x08004955

08004a2c <__sfp>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	4607      	mov	r7, r0
 8004a30:	f7ff ffac 	bl	800498c <__sfp_lock_acquire>
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <__sfp+0x84>)
 8004a36:	681e      	ldr	r6, [r3, #0]
 8004a38:	69b3      	ldr	r3, [r6, #24]
 8004a3a:	b913      	cbnz	r3, 8004a42 <__sfp+0x16>
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f7ff ffbd 	bl	80049bc <__sinit>
 8004a42:	3648      	adds	r6, #72	; 0x48
 8004a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	d503      	bpl.n	8004a54 <__sfp+0x28>
 8004a4c:	6833      	ldr	r3, [r6, #0]
 8004a4e:	b30b      	cbz	r3, 8004a94 <__sfp+0x68>
 8004a50:	6836      	ldr	r6, [r6, #0]
 8004a52:	e7f7      	b.n	8004a44 <__sfp+0x18>
 8004a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a58:	b9d5      	cbnz	r5, 8004a90 <__sfp+0x64>
 8004a5a:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <__sfp+0x88>)
 8004a5c:	60e3      	str	r3, [r4, #12]
 8004a5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a62:	6665      	str	r5, [r4, #100]	; 0x64
 8004a64:	f000 f847 	bl	8004af6 <__retarget_lock_init_recursive>
 8004a68:	f7ff ff96 	bl	8004998 <__sfp_lock_release>
 8004a6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a74:	6025      	str	r5, [r4, #0]
 8004a76:	61a5      	str	r5, [r4, #24]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a80:	f7ff fd44 	bl	800450c <memset>
 8004a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a90:	3468      	adds	r4, #104	; 0x68
 8004a92:	e7d9      	b.n	8004a48 <__sfp+0x1c>
 8004a94:	2104      	movs	r1, #4
 8004a96:	4638      	mov	r0, r7
 8004a98:	f7ff ff62 	bl	8004960 <__sfmoreglue>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	6030      	str	r0, [r6, #0]
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d1d5      	bne.n	8004a50 <__sfp+0x24>
 8004aa4:	f7ff ff78 	bl	8004998 <__sfp_lock_release>
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	e7ee      	b.n	8004a8c <__sfp+0x60>
 8004aae:	bf00      	nop
 8004ab0:	0800505c 	.word	0x0800505c
 8004ab4:	ffff0001 	.word	0xffff0001

08004ab8 <_fwalk_reent>:
 8004ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004abc:	4606      	mov	r6, r0
 8004abe:	4688      	mov	r8, r1
 8004ac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ac4:	2700      	movs	r7, #0
 8004ac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aca:	f1b9 0901 	subs.w	r9, r9, #1
 8004ace:	d505      	bpl.n	8004adc <_fwalk_reent+0x24>
 8004ad0:	6824      	ldr	r4, [r4, #0]
 8004ad2:	2c00      	cmp	r4, #0
 8004ad4:	d1f7      	bne.n	8004ac6 <_fwalk_reent+0xe>
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004adc:	89ab      	ldrh	r3, [r5, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d907      	bls.n	8004af2 <_fwalk_reent+0x3a>
 8004ae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	d003      	beq.n	8004af2 <_fwalk_reent+0x3a>
 8004aea:	4629      	mov	r1, r5
 8004aec:	4630      	mov	r0, r6
 8004aee:	47c0      	blx	r8
 8004af0:	4307      	orrs	r7, r0
 8004af2:	3568      	adds	r5, #104	; 0x68
 8004af4:	e7e9      	b.n	8004aca <_fwalk_reent+0x12>

08004af6 <__retarget_lock_init_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <__retarget_lock_acquire_recursive>:
 8004af8:	4770      	bx	lr

08004afa <__retarget_lock_release_recursive>:
 8004afa:	4770      	bx	lr

08004afc <__swhatbuf_r>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	460e      	mov	r6, r1
 8004b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b04:	2900      	cmp	r1, #0
 8004b06:	b096      	sub	sp, #88	; 0x58
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	da08      	bge.n	8004b20 <__swhatbuf_r+0x24>
 8004b0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	061a      	lsls	r2, r3, #24
 8004b18:	d410      	bmi.n	8004b3c <__swhatbuf_r+0x40>
 8004b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b1e:	e00e      	b.n	8004b3e <__swhatbuf_r+0x42>
 8004b20:	466a      	mov	r2, sp
 8004b22:	f000 f9a7 	bl	8004e74 <_fstat_r>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	dbf1      	blt.n	8004b0e <__swhatbuf_r+0x12>
 8004b2a:	9a01      	ldr	r2, [sp, #4]
 8004b2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b34:	425a      	negs	r2, r3
 8004b36:	415a      	adcs	r2, r3
 8004b38:	602a      	str	r2, [r5, #0]
 8004b3a:	e7ee      	b.n	8004b1a <__swhatbuf_r+0x1e>
 8004b3c:	2340      	movs	r3, #64	; 0x40
 8004b3e:	2000      	movs	r0, #0
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	b016      	add	sp, #88	; 0x58
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b48 <__smakebuf_r>:
 8004b48:	898b      	ldrh	r3, [r1, #12]
 8004b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b4c:	079d      	lsls	r5, r3, #30
 8004b4e:	4606      	mov	r6, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	d507      	bpl.n	8004b64 <__smakebuf_r+0x1c>
 8004b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	6163      	str	r3, [r4, #20]
 8004b60:	b002      	add	sp, #8
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	ab01      	add	r3, sp, #4
 8004b66:	466a      	mov	r2, sp
 8004b68:	f7ff ffc8 	bl	8004afc <__swhatbuf_r>
 8004b6c:	9900      	ldr	r1, [sp, #0]
 8004b6e:	4605      	mov	r5, r0
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f895 	bl	8004ca0 <_malloc_r>
 8004b76:	b948      	cbnz	r0, 8004b8c <__smakebuf_r+0x44>
 8004b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7c:	059a      	lsls	r2, r3, #22
 8004b7e:	d4ef      	bmi.n	8004b60 <__smakebuf_r+0x18>
 8004b80:	f023 0303 	bic.w	r3, r3, #3
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	e7e3      	b.n	8004b54 <__smakebuf_r+0xc>
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <__smakebuf_r+0x7c>)
 8004b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	6020      	str	r0, [r4, #0]
 8004b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	9b00      	ldr	r3, [sp, #0]
 8004b9c:	6163      	str	r3, [r4, #20]
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	6120      	str	r0, [r4, #16]
 8004ba2:	b15b      	cbz	r3, 8004bbc <__smakebuf_r+0x74>
 8004ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f975 	bl	8004e98 <_isatty_r>
 8004bae:	b128      	cbz	r0, 8004bbc <__smakebuf_r+0x74>
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	89a0      	ldrh	r0, [r4, #12]
 8004bbe:	4305      	orrs	r5, r0
 8004bc0:	81a5      	strh	r5, [r4, #12]
 8004bc2:	e7cd      	b.n	8004b60 <__smakebuf_r+0x18>
 8004bc4:	08004955 	.word	0x08004955

08004bc8 <_free_r>:
 8004bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bca:	2900      	cmp	r1, #0
 8004bcc:	d044      	beq.n	8004c58 <_free_r+0x90>
 8004bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd2:	9001      	str	r0, [sp, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8004bda:	bfb8      	it	lt
 8004bdc:	18e4      	addlt	r4, r4, r3
 8004bde:	f000 f97d 	bl	8004edc <__malloc_lock>
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <_free_r+0x94>)
 8004be4:	9801      	ldr	r0, [sp, #4]
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	b933      	cbnz	r3, 8004bf8 <_free_r+0x30>
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	6014      	str	r4, [r2, #0]
 8004bee:	b003      	add	sp, #12
 8004bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bf4:	f000 b978 	b.w	8004ee8 <__malloc_unlock>
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d908      	bls.n	8004c0e <_free_r+0x46>
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	1961      	adds	r1, r4, r5
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf01      	itttt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	1949      	addeq	r1, r1, r5
 8004c0a:	6021      	streq	r1, [r4, #0]
 8004c0c:	e7ed      	b.n	8004bea <_free_r+0x22>
 8004c0e:	461a      	mov	r2, r3
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b10b      	cbz	r3, 8004c18 <_free_r+0x50>
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	d9fa      	bls.n	8004c0e <_free_r+0x46>
 8004c18:	6811      	ldr	r1, [r2, #0]
 8004c1a:	1855      	adds	r5, r2, r1
 8004c1c:	42a5      	cmp	r5, r4
 8004c1e:	d10b      	bne.n	8004c38 <_free_r+0x70>
 8004c20:	6824      	ldr	r4, [r4, #0]
 8004c22:	4421      	add	r1, r4
 8004c24:	1854      	adds	r4, r2, r1
 8004c26:	42a3      	cmp	r3, r4
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	d1e0      	bne.n	8004bee <_free_r+0x26>
 8004c2c:	681c      	ldr	r4, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	6053      	str	r3, [r2, #4]
 8004c32:	4421      	add	r1, r4
 8004c34:	6011      	str	r1, [r2, #0]
 8004c36:	e7da      	b.n	8004bee <_free_r+0x26>
 8004c38:	d902      	bls.n	8004c40 <_free_r+0x78>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	6003      	str	r3, [r0, #0]
 8004c3e:	e7d6      	b.n	8004bee <_free_r+0x26>
 8004c40:	6825      	ldr	r5, [r4, #0]
 8004c42:	1961      	adds	r1, r4, r5
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf04      	itt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	bf04      	itt	eq
 8004c50:	1949      	addeq	r1, r1, r5
 8004c52:	6021      	streq	r1, [r4, #0]
 8004c54:	6054      	str	r4, [r2, #4]
 8004c56:	e7ca      	b.n	8004bee <_free_r+0x26>
 8004c58:	b003      	add	sp, #12
 8004c5a:	bd30      	pop	{r4, r5, pc}
 8004c5c:	20001054 	.word	0x20001054

08004c60 <sbrk_aligned>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4e0e      	ldr	r6, [pc, #56]	; (8004c9c <sbrk_aligned+0x3c>)
 8004c64:	460c      	mov	r4, r1
 8004c66:	6831      	ldr	r1, [r6, #0]
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b911      	cbnz	r1, 8004c72 <sbrk_aligned+0x12>
 8004c6c:	f000 f88c 	bl	8004d88 <_sbrk_r>
 8004c70:	6030      	str	r0, [r6, #0]
 8004c72:	4621      	mov	r1, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f887 	bl	8004d88 <_sbrk_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d00a      	beq.n	8004c94 <sbrk_aligned+0x34>
 8004c7e:	1cc4      	adds	r4, r0, #3
 8004c80:	f024 0403 	bic.w	r4, r4, #3
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d007      	beq.n	8004c98 <sbrk_aligned+0x38>
 8004c88:	1a21      	subs	r1, r4, r0
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 f87c 	bl	8004d88 <_sbrk_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d101      	bne.n	8004c98 <sbrk_aligned+0x38>
 8004c94:	f04f 34ff 	mov.w	r4, #4294967295
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	20001058 	.word	0x20001058

08004ca0 <_malloc_r>:
 8004ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca4:	1ccd      	adds	r5, r1, #3
 8004ca6:	f025 0503 	bic.w	r5, r5, #3
 8004caa:	3508      	adds	r5, #8
 8004cac:	2d0c      	cmp	r5, #12
 8004cae:	bf38      	it	cc
 8004cb0:	250c      	movcc	r5, #12
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	db01      	blt.n	8004cbc <_malloc_r+0x1c>
 8004cb8:	42a9      	cmp	r1, r5
 8004cba:	d905      	bls.n	8004cc8 <_malloc_r+0x28>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc8:	4e2e      	ldr	r6, [pc, #184]	; (8004d84 <_malloc_r+0xe4>)
 8004cca:	f000 f907 	bl	8004edc <__malloc_lock>
 8004cce:	6833      	ldr	r3, [r6, #0]
 8004cd0:	461c      	mov	r4, r3
 8004cd2:	bb34      	cbnz	r4, 8004d22 <_malloc_r+0x82>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f7ff ffc2 	bl	8004c60 <sbrk_aligned>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	4604      	mov	r4, r0
 8004ce0:	d14d      	bne.n	8004d7e <_malloc_r+0xde>
 8004ce2:	6834      	ldr	r4, [r6, #0]
 8004ce4:	4626      	mov	r6, r4
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	d140      	bne.n	8004d6c <_malloc_r+0xcc>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	4631      	mov	r1, r6
 8004cee:	4638      	mov	r0, r7
 8004cf0:	eb04 0803 	add.w	r8, r4, r3
 8004cf4:	f000 f848 	bl	8004d88 <_sbrk_r>
 8004cf8:	4580      	cmp	r8, r0
 8004cfa:	d13a      	bne.n	8004d72 <_malloc_r+0xd2>
 8004cfc:	6821      	ldr	r1, [r4, #0]
 8004cfe:	3503      	adds	r5, #3
 8004d00:	1a6d      	subs	r5, r5, r1
 8004d02:	f025 0503 	bic.w	r5, r5, #3
 8004d06:	3508      	adds	r5, #8
 8004d08:	2d0c      	cmp	r5, #12
 8004d0a:	bf38      	it	cc
 8004d0c:	250c      	movcc	r5, #12
 8004d0e:	4629      	mov	r1, r5
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff ffa5 	bl	8004c60 <sbrk_aligned>
 8004d16:	3001      	adds	r0, #1
 8004d18:	d02b      	beq.n	8004d72 <_malloc_r+0xd2>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	442b      	add	r3, r5
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	e00e      	b.n	8004d40 <_malloc_r+0xa0>
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	1b52      	subs	r2, r2, r5
 8004d26:	d41e      	bmi.n	8004d66 <_malloc_r+0xc6>
 8004d28:	2a0b      	cmp	r2, #11
 8004d2a:	d916      	bls.n	8004d5a <_malloc_r+0xba>
 8004d2c:	1961      	adds	r1, r4, r5
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	6025      	str	r5, [r4, #0]
 8004d32:	bf18      	it	ne
 8004d34:	6059      	strne	r1, [r3, #4]
 8004d36:	6863      	ldr	r3, [r4, #4]
 8004d38:	bf08      	it	eq
 8004d3a:	6031      	streq	r1, [r6, #0]
 8004d3c:	5162      	str	r2, [r4, r5]
 8004d3e:	604b      	str	r3, [r1, #4]
 8004d40:	4638      	mov	r0, r7
 8004d42:	f104 060b 	add.w	r6, r4, #11
 8004d46:	f000 f8cf 	bl	8004ee8 <__malloc_unlock>
 8004d4a:	f026 0607 	bic.w	r6, r6, #7
 8004d4e:	1d23      	adds	r3, r4, #4
 8004d50:	1af2      	subs	r2, r6, r3
 8004d52:	d0b6      	beq.n	8004cc2 <_malloc_r+0x22>
 8004d54:	1b9b      	subs	r3, r3, r6
 8004d56:	50a3      	str	r3, [r4, r2]
 8004d58:	e7b3      	b.n	8004cc2 <_malloc_r+0x22>
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	bf0c      	ite	eq
 8004d60:	6032      	streq	r2, [r6, #0]
 8004d62:	605a      	strne	r2, [r3, #4]
 8004d64:	e7ec      	b.n	8004d40 <_malloc_r+0xa0>
 8004d66:	4623      	mov	r3, r4
 8004d68:	6864      	ldr	r4, [r4, #4]
 8004d6a:	e7b2      	b.n	8004cd2 <_malloc_r+0x32>
 8004d6c:	4634      	mov	r4, r6
 8004d6e:	6876      	ldr	r6, [r6, #4]
 8004d70:	e7b9      	b.n	8004ce6 <_malloc_r+0x46>
 8004d72:	230c      	movs	r3, #12
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4638      	mov	r0, r7
 8004d78:	f000 f8b6 	bl	8004ee8 <__malloc_unlock>
 8004d7c:	e7a1      	b.n	8004cc2 <_malloc_r+0x22>
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	e7de      	b.n	8004d40 <_malloc_r+0xa0>
 8004d82:	bf00      	nop
 8004d84:	20001054 	.word	0x20001054

08004d88 <_sbrk_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <_sbrk_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fb fce8 	bl	8000768 <_sbrk>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_sbrk_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_sbrk_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	2000105c 	.word	0x2000105c

08004da8 <__sread>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	460c      	mov	r4, r1
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	f000 f8a0 	bl	8004ef4 <_read_r>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	bfab      	itete	ge
 8004db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dba:	89a3      	ldrhlt	r3, [r4, #12]
 8004dbc:	181b      	addge	r3, r3, r0
 8004dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dc2:	bfac      	ite	ge
 8004dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dc6:	81a3      	strhlt	r3, [r4, #12]
 8004dc8:	bd10      	pop	{r4, pc}

08004dca <__swrite>:
 8004dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	461f      	mov	r7, r3
 8004dd0:	898b      	ldrh	r3, [r1, #12]
 8004dd2:	05db      	lsls	r3, r3, #23
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	4616      	mov	r6, r2
 8004dda:	d505      	bpl.n	8004de8 <__swrite+0x1e>
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	2302      	movs	r3, #2
 8004de2:	2200      	movs	r2, #0
 8004de4:	f000 f868 	bl	8004eb8 <_lseek_r>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	4628      	mov	r0, r5
 8004dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	f000 b817 	b.w	8004e30 <_write_r>

08004e02 <__sseek>:
 8004e02:	b510      	push	{r4, lr}
 8004e04:	460c      	mov	r4, r1
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 f855 	bl	8004eb8 <_lseek_r>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	bf15      	itete	ne
 8004e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e1e:	81a3      	strheq	r3, [r4, #12]
 8004e20:	bf18      	it	ne
 8004e22:	81a3      	strhne	r3, [r4, #12]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <__sclose>:
 8004e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2a:	f000 b813 	b.w	8004e54 <_close_r>
	...

08004e30 <_write_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d07      	ldr	r5, [pc, #28]	; (8004e50 <_write_r+0x20>)
 8004e34:	4604      	mov	r4, r0
 8004e36:	4608      	mov	r0, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fb fa07 	bl	8000252 <_write>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_write_r+0x1e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_write_r+0x1e>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	2000105c 	.word	0x2000105c

08004e54 <_close_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d06      	ldr	r5, [pc, #24]	; (8004e70 <_close_r+0x1c>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f7fb fc4d 	bl	80006fe <_close>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_close_r+0x1a>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_close_r+0x1a>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	2000105c 	.word	0x2000105c

08004e74 <_fstat_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4d07      	ldr	r5, [pc, #28]	; (8004e94 <_fstat_r+0x20>)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	f7fb fc48 	bl	8000716 <_fstat>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	d102      	bne.n	8004e90 <_fstat_r+0x1c>
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	b103      	cbz	r3, 8004e90 <_fstat_r+0x1c>
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	bf00      	nop
 8004e94:	2000105c 	.word	0x2000105c

08004e98 <_isatty_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_isatty_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fb fc47 	bl	8000736 <_isatty>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_isatty_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_isatty_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	2000105c 	.word	0x2000105c

08004eb8 <_lseek_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	; (8004ed8 <_lseek_r+0x20>)
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fb fc40 	bl	800074c <_lseek>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_lseek_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_lseek_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	2000105c 	.word	0x2000105c

08004edc <__malloc_lock>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__malloc_lock+0x8>)
 8004ede:	f7ff be0b 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	20001050 	.word	0x20001050

08004ee8 <__malloc_unlock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__malloc_unlock+0x8>)
 8004eea:	f7ff be06 	b.w	8004afa <__retarget_lock_release_recursive>
 8004eee:	bf00      	nop
 8004ef0:	20001050 	.word	0x20001050

08004ef4 <_read_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d07      	ldr	r5, [pc, #28]	; (8004f14 <_read_r+0x20>)
 8004ef8:	4604      	mov	r4, r0
 8004efa:	4608      	mov	r0, r1
 8004efc:	4611      	mov	r1, r2
 8004efe:	2200      	movs	r2, #0
 8004f00:	602a      	str	r2, [r5, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fb fbde 	bl	80006c4 <_read>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_read_r+0x1e>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_read_r+0x1e>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	2000105c 	.word	0x2000105c

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
