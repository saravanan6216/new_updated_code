
soft_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d0  080058d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080058d0  080058d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058d0  080058d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001640  20000074  0800594c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800594c  000216b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015716  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031eb  00000000  00000000  000357ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000389a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00039c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e84  00000000  00000000  0003add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a92  00000000  00000000  00063c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b35  00000000  00000000  000776e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f21b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  0016f26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056e0 	.word	0x080056e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080056e0 	.word	0x080056e0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000144 	.word	0x20000144

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000222:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	20000344 	.word	0x20000344
 8000234:	200003f8 	.word	0x200003f8

08000238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00b      	beq.n	8000278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	e000      	b.n	8000264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	b2d2      	uxtb	r2, r2
 8000276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000278:	687b      	ldr	r3, [r7, #4]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <_write>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"
int _write(int file,char *ptr,int len)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	60b9      	str	r1, [r7, #8]
 8000290:	607a      	str	r2, [r7, #4]
	int i=0;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e009      	b.n	80002b0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffc7 	bl	8000238 <ITM_SendChar>
	for(i=0;i<len;i++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf1      	blt.n	800029c <_write+0x16>
	return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ca:	f000 fb09 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ce:	f000 f853 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d2:	f000 f8a3 	bl	800041c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of printftask */
  osThreadDef(printftask, printfun, osPriorityAboveNormal, 0, 128);
 80002d6:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <main+0x90>)
 80002d8:	f107 041c 	add.w	r4, r7, #28
 80002dc:	461d      	mov	r5, r3
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printftaskHandle = osThreadCreate(osThread(printftask), NULL);
 80002ea:	f107 031c 	add.w	r3, r7, #28
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 ff62 	bl	80021ba <osThreadCreate>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <main+0x94>)
 80002fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledtask */
  osThreadDef(ledtask, led, osPriorityAboveNormal, 0, 128);
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <main+0x98>)
 80002fe:	463c      	mov	r4, r7
 8000300:	461d      	mov	r5, r3
 8000302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000306:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledtaskHandle = osThreadCreate(osThread(ledtask), NULL);
 800030e:	463b      	mov	r3, r7
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 ff51 	bl	80021ba <osThreadCreate>
 8000318:	4603      	mov	r3, r0
 800031a:	4a11      	ldr	r2, [pc, #68]	; (8000360 <main+0x9c>)
 800031c:	6013      	str	r3, [r2, #0]
  PTHandle = xTimerCreate("timer1", pdMS_TO_TICKS(4000), pdTRUE, (void *) 1, TimerCallback);
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <main+0xa0>)
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2301      	movs	r3, #1
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <main+0xa4>)
 800032c:	f003 fcb2 	bl	8003c94 <xTimerCreate>
 8000330:	4603      	mov	r3, r0
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <main+0xa8>)
 8000334:	6013      	str	r3, [r2, #0]
  OTHandle = xTimerCreate("timer2", pdMS_TO_TICKS(1000), pdFALSE, (void *) 2, TimerCallback);
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <main+0xa0>)
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2302      	movs	r3, #2
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <main+0xac>)
 8000344:	f003 fca6 	bl	8003c94 <xTimerCreate>
 8000348:	4603      	mov	r3, r0
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <main+0xb0>)
 800034c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800034e:	f001 ff2d 	bl	80021ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000352:	e7fe      	b.n	8000352 <main+0x8e>
 8000354:	0800571c 	.word	0x0800571c
 8000358:	20000800 	.word	0x20000800
 800035c:	08005738 	.word	0x08005738
 8000360:	20000804 	.word	0x20000804
 8000364:	08000561 	.word	0x08000561
 8000368:	0800570c 	.word	0x0800570c
 800036c:	200007f8 	.word	0x200007f8
 8000370:	08005714 	.word	0x08005714
 8000374:	200007fc 	.word	0x200007fc

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b096      	sub	sp, #88	; 0x58
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	2244      	movs	r2, #68	; 0x44
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f004 fd31 	bl	8004dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800039e:	f000 fda9 	bl	8000ef4 <HAL_PWREx_ControlVoltageScaling>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003a8:	f000 f911 	bl	80005ce <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ac:	2302      	movs	r3, #2
 80003ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b6:	2310      	movs	r3, #16
 80003b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003c6:	230a      	movs	r3, #10
 80003c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003ca:	2307      	movs	r3, #7
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fde0 	bl	8000fa0 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003e6:	f000 f8f2 	bl	80005ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2303      	movs	r3, #3
 80003f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003fe:	463b      	mov	r3, r7
 8000400:	2104      	movs	r1, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f9a8 	bl	8001758 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800040e:	f000 f8de 	bl	80005ce <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3758      	adds	r7, #88	; 0x58
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_GPIO_Init+0x94>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x94>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046a:	f000 fd1d 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800046e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047c:	f107 030c 	add.w	r3, r7, #12
 8000480:	4619      	mov	r1, r3
 8000482:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_GPIO_Init+0x98>)
 8000484:	f000 fb4e 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000488:	2320      	movs	r3, #32
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	4619      	mov	r1, r3
 800049e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a2:	f000 fb3f 	bl	8000b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000800 	.word	0x48000800

080004b8 <printfun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_printfun */
void printfun(void const * argument)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af02      	add	r7, sp, #8
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	printf("timer start PTHandle\n");
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <printfun+0x38>)
 80004c2:	f004 fd9f 	bl	8005004 <puts>
	xTimerStart(PTHandle, 2000);
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <printfun+0x3c>)
 80004c8:	681c      	ldr	r4, [r3, #0]
 80004ca:	f002 ff57 	bl	800337c <xTaskGetTickCount>
 80004ce:	4602      	mov	r2, r0
 80004d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2300      	movs	r3, #0
 80004d8:	2101      	movs	r1, #1
 80004da:	4620      	mov	r0, r4
 80004dc:	f003 fc36 	bl	8003d4c <xTimerGenericCommand>
  for(;;)
  {
    printf("printf function executed\n");
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <printfun+0x40>)
 80004e2:	f004 fd8f 	bl	8005004 <puts>
    vTaskDelay(pdMS_TO_TICKS(2000));
 80004e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004ea:	f002 fdf9 	bl	80030e0 <vTaskDelay>
    printf("printf function executed\n");
 80004ee:	e7f7      	b.n	80004e0 <printfun+0x28>
 80004f0:	08005754 	.word	0x08005754
 80004f4:	200007f8 	.word	0x200007f8
 80004f8:	0800576c 	.word	0x0800576c

080004fc <led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led */
void led(void const * argument)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b085      	sub	sp, #20
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led */
  /* Infinite loop */
  for(;;)
  {
	  printf("led function will executed\n");
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <led+0x54>)
 8000506:	f004 fd7d 	bl	8005004 <puts>
	  if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))  // if the button is pressed
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <led+0x58>)
 8000510:	f000 fcb2 	bl	8000e78 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d114      	bne.n	8000544 <led+0x48>
	  		{
	  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);  // Turn On the LED
 800051a:	2201      	movs	r2, #1
 800051c:	2120      	movs	r1, #32
 800051e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000522:	f000 fcc1 	bl	8000ea8 <HAL_GPIO_WritePin>
	  			printf("timer start OTHandle\n");
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <led+0x5c>)
 8000528:	f004 fd6c 	bl	8005004 <puts>
	  			xTimerStart(OTHandle, 100);
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <led+0x60>)
 800052e:	681c      	ldr	r4, [r3, #0]
 8000530:	f002 ff24 	bl	800337c <xTaskGetTickCount>
 8000534:	4602      	mov	r2, r0
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2101      	movs	r1, #1
 800053e:	4620      	mov	r0, r4
 8000540:	f003 fc04 	bl	8003d4c <xTimerGenericCommand>
	  		}

	  		vTaskDelay(pdMS_TO_TICKS(2000));
 8000544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000548:	f002 fdca 	bl	80030e0 <vTaskDelay>
	  printf("led function will executed\n");
 800054c:	e7da      	b.n	8000504 <led+0x8>
 800054e:	bf00      	nop
 8000550:	08005788 	.word	0x08005788
 8000554:	48000800 	.word	0x48000800
 8000558:	080057a4 	.word	0x080057a4
 800055c:	200007fc 	.word	0x200007fc

08000560 <TimerCallback>:
  }
  /* USER CODE END led */
}
void TimerCallback (xTimerHandle xTimer)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if (xTimer == PTHandle)
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <TimerCallback+0x40>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	429a      	cmp	r2, r3
 8000570:	d103      	bne.n	800057a <TimerCallback+0x1a>
	{
		printf("print from TIMER CALLBACK with PTHandle\n");
 8000572:	480c      	ldr	r0, [pc, #48]	; (80005a4 <TimerCallback+0x44>)
 8000574:	f004 fd46 	bl	8005004 <puts>
	else if (xTimer == OTHandle)
	{
		printf("print from TIMER CALLBACK with OTHandle\n");
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	}
}
 8000578:	e00d      	b.n	8000596 <TimerCallback+0x36>
	else if (xTimer == OTHandle)
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <TimerCallback+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	d108      	bne.n	8000596 <TimerCallback+0x36>
		printf("print from TIMER CALLBACK with OTHandle\n");
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <TimerCallback+0x4c>)
 8000586:	f004 fd3d 	bl	8005004 <puts>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fc89 	bl	8000ea8 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200007f8 	.word	0x200007f8
 80005a4:	080057bc 	.word	0x080057bc
 80005a8:	200007fc 	.word	0x200007fc
 80005ac:	080057e4 	.word	0x080057e4

080005b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c0:	d101      	bne.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005c2:	f000 f9ad 	bl	8000920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
}
 80005d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <Error_Handler+0x8>

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_MspInit+0x4c>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_MspInit+0x4c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_MspInit+0x4c>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_MspInit+0x4c>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_MspInit+0x4c>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_MspInit+0x4c>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	210f      	movs	r1, #15
 8000612:	f06f 0001 	mvn.w	r0, #1
 8000616:	f000 fa5b 	bl	8000ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08e      	sub	sp, #56	; 0x38
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <HAL_InitTick+0xe0>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a33      	ldr	r2, [pc, #204]	; (8000708 <HAL_InitTick+0xe0>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b31      	ldr	r3, [pc, #196]	; (8000708 <HAL_InitTick+0xe0>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800064e:	f107 0210 	add.w	r2, r7, #16
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fa2b 	bl	8001ab4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	2b00      	cmp	r3, #0
 8000666:	d103      	bne.n	8000670 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000668:	f001 fa0e 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 800066c:	6378      	str	r0, [r7, #52]	; 0x34
 800066e:	e004      	b.n	800067a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000670:	f001 fa0a 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8000674:	4603      	mov	r3, r0
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <HAL_InitTick+0xe4>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	0c9b      	lsrs	r3, r3, #18
 8000684:	3b01      	subs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <HAL_InitTick+0xe8>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <HAL_InitTick+0xe8>)
 8000692:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000696:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000698:	4a1d      	ldr	r2, [pc, #116]	; (8000710 <HAL_InitTick+0xe8>)
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <HAL_InitTick+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_InitTick+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_InitTick+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80006b0:	4817      	ldr	r0, [pc, #92]	; (8000710 <HAL_InitTick+0xe8>)
 80006b2:	f001 fa91 	bl	8001bd8 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11b      	bne.n	80006fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80006c4:	4812      	ldr	r0, [pc, #72]	; (8000710 <HAL_InitTick+0xe8>)
 80006c6:	f001 fae9 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d111      	bne.n	80006fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006d8:	201c      	movs	r0, #28
 80006da:	f000 fa15 	bl	8000b08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d808      	bhi.n	80006f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	201c      	movs	r0, #28
 80006ea:	f000 f9f1 	bl	8000ad0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_InitTick+0xec>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e002      	b.n	80006fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000700:	4618      	mov	r0, r3
 8000702:	3738      	adds	r7, #56	; 0x38
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	431bde83 	.word	0x431bde83
 8000710:	20000808 	.word	0x20000808
 8000714:	20000004 	.word	0x20000004

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <TIM2_IRQHandler+0x10>)
 800074a:	f001 fb17 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000808 	.word	0x20000808

08000758 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	e00a      	b.n	8000780 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800076a:	f3af 8000 	nop.w
 800076e:	4601      	mov	r1, r0
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	b2ca      	uxtb	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf0      	blt.n	800076a <_read+0x12>
  }

  return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ba:	605a      	str	r2, [r3, #4]
  return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <_isatty>:

int _isatty(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f004 f9ae 	bl	8004b8c <__errno>
 8000830:	4603      	mov	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20018000 	.word	0x20018000
 800085c:	00000400 	.word	0x00000400
 8000860:	20000854 	.word	0x20000854
 8000864:	200016b8 	.word	0x200016b8

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000890:	f7ff ffea 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f004 fa63 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff fd01 	bl	80002c4 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008d0:	080058d8 	.word	0x080058d8
  ldr r2, =_sbss
 80008d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008d8:	200016b4 	.word	0x200016b4

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_Init+0x3c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <HAL_Init+0x3c>)
 80008f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f6:	2003      	movs	r0, #3
 80008f8:	f000 f8df 	bl	8000aba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fc:	200f      	movs	r0, #15
 80008fe:	f7ff fe93 	bl	8000628 <HAL_InitTick>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	e001      	b.n	8000912 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800090e:	f7ff fe63 	bl	80005d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000912:	79fb      	ldrb	r3, [r7, #7]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	20000858 	.word	0x20000858

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000858 	.word	0x20000858

08000960 <__NVIC_SetPriorityGrouping>:
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff4c 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae2:	f7ff ff61 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000ae6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	6978      	ldr	r0, [r7, #20]
 8000aee:	f7ff ffb1 	bl	8000a54 <NVIC_EncodePriority>
 8000af2:	4602      	mov	r2, r0
 8000af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff80 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff54 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	e17f      	b.n	8000e34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8171 	beq.w	8000e2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d005      	beq.n	8000b64 <HAL_GPIO_Init+0x40>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d130      	bne.n	8000bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2203      	movs	r2, #3
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	f003 0201 	and.w	r2, r3, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d118      	bne.n	8000c04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	f003 0201 	and.w	r2, r3, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d017      	beq.n	8000c40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d123      	bne.n	8000c94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	6939      	ldr	r1, [r7, #16]
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0203 	and.w	r2, r3, #3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80ac 	beq.w	8000e2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b5f      	ldr	r3, [pc, #380]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	4a5e      	ldr	r2, [pc, #376]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce2:	4b5c      	ldr	r3, [pc, #368]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cee:	4a5a      	ldr	r2, [pc, #360]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d18:	d025      	beq.n	8000d66 <HAL_GPIO_Init+0x242>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4f      	ldr	r2, [pc, #316]	; (8000e5c <HAL_GPIO_Init+0x338>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d01f      	beq.n	8000d62 <HAL_GPIO_Init+0x23e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4e      	ldr	r2, [pc, #312]	; (8000e60 <HAL_GPIO_Init+0x33c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x23a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4d      	ldr	r2, [pc, #308]	; (8000e64 <HAL_GPIO_Init+0x340>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x236>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_GPIO_Init+0x344>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x232>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_GPIO_Init+0x348>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x22e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4a      	ldr	r2, [pc, #296]	; (8000e70 <HAL_GPIO_Init+0x34c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x22a>
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	e00c      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e00a      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d52:	2305      	movs	r3, #5
 8000d54:	e008      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d56:	2304      	movs	r3, #4
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e004      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_Init+0x244>
 8000d66:	2300      	movs	r3, #0
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	f002 0203 	and.w	r2, r2, #3
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4093      	lsls	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d78:	4937      	ldr	r1, [pc, #220]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d86:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000db0:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dd4:	4a27      	ldr	r2, [pc, #156]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <HAL_GPIO_Init+0x350>)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f ae78 	bne.w	8000b34 <HAL_GPIO_Init+0x10>
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	48000800 	.word	0x48000800
 8000e64:	48000c00 	.word	0x48000c00
 8000e68:	48001000 	.word	0x48001000
 8000e6c:	48001400 	.word	0x48001400
 8000e70:	48001800 	.word	0x48001800
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e001      	b.n	8000e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f02:	d130      	bne.n	8000f66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f10:	d038      	beq.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2232      	movs	r2, #50	; 0x32
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	0c9b      	lsrs	r3, r3, #18
 8000f34:	3301      	adds	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f38:	e002      	b.n	8000f40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4c:	d102      	bne.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f2      	bne.n	8000f3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f60:	d110      	bne.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e00f      	b.n	8000f86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f72:	d007      	beq.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40007000 	.word	0x40007000
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e3ca      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb2:	4b97      	ldr	r3, [pc, #604]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fbc:	4b94      	ldr	r3, [pc, #592]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 80e4 	beq.w	800119c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <HAL_RCC_OscConfig+0x4a>
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2b0c      	cmp	r3, #12
 8000fde:	f040 808b 	bne.w	80010f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	f040 8087 	bne.w	80010f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fea:	4b89      	ldr	r3, [pc, #548]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x62>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e3a2      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	4b82      	ldr	r3, [pc, #520]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <HAL_RCC_OscConfig+0x7c>
 8001012:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800101a:	e005      	b.n	8001028 <HAL_RCC_OscConfig+0x88>
 800101c:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800101e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001028:	4293      	cmp	r3, r2
 800102a:	d223      	bcs.n	8001074 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fd71 	bl	8001b18 <RCC_SetFlashLatencyFromMSIRange>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e383      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001040:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b70      	ldr	r3, [pc, #448]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	496d      	ldr	r1, [pc, #436]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800105e:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	4968      	ldr	r1, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800106e:	4313      	orrs	r3, r2
 8001070:	604b      	str	r3, [r1, #4]
 8001072:	e025      	b.n	80010c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001074:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a65      	ldr	r2, [pc, #404]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4960      	ldr	r1, [pc, #384]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	495b      	ldr	r1, [pc, #364]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d109      	bne.n	80010c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fd31 	bl	8001b18 <RCC_SetFlashLatencyFromMSIRange>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e343      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010c0:	f000 fc4a 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b52      	ldr	r3, [pc, #328]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	4950      	ldr	r1, [pc, #320]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80010de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010e0:	4b4e      	ldr	r3, [pc, #312]	; (800121c <HAL_RCC_OscConfig+0x27c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa9f 	bl	8000628 <HAL_InitTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d052      	beq.n	800119a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	e327      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d032      	beq.n	8001166 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a42      	ldr	r2, [pc, #264]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc1c 	bl	8000948 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001114:	f7ff fc18 	bl	8000948 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e310      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a36      	ldr	r2, [pc, #216]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4931      	ldr	r1, [pc, #196]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	492c      	ldr	r1, [pc, #176]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e01a      	b.n	800119c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a29      	ldr	r2, [pc, #164]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001172:	f7ff fbe9 	bl	8000948 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800117a:	f7ff fbe5 	bl	8000948 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e2dd      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x1da>
 8001198:	e000      	b.n	800119c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800119a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d074      	beq.n	8001292 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x21a>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	d10e      	bne.n	80011d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d064      	beq.n	8001290 <HAL_RCC_OscConfig+0x2f0>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d160      	bne.n	8001290 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e2ba      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x24a>
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e026      	b.n	8001238 <HAL_RCC_OscConfig+0x298>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f2:	d115      	bne.n	8001220 <HAL_RCC_OscConfig+0x280>
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a02      	ldr	r2, [pc, #8]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	e014      	b.n	8001238 <HAL_RCC_OscConfig+0x298>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	08005824 	.word	0x08005824
 8001218:	20000000 	.word	0x20000000
 800121c:	20000004 	.word	0x20000004
 8001220:	4ba0      	ldr	r3, [pc, #640]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a9f      	ldr	r2, [pc, #636]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b9d      	ldr	r3, [pc, #628]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a9c      	ldr	r2, [pc, #624]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fb82 	bl	8000948 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fb7e 	bl	8000948 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e276      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125a:	4b92      	ldr	r3, [pc, #584]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x2a8>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fb6e 	bl	8000948 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fb6a 	bl	8000948 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e262      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001282:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x2d0>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d060      	beq.n	8001360 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_OscConfig+0x310>
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d119      	bne.n	80012de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d116      	bne.n	80012de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b0:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x328>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e23f      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	4973      	ldr	r1, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012dc:	e040      	b.n	8001360 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d023      	beq.n	800132e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e6:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6e      	ldr	r2, [pc, #440]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb29 	bl	8000948 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fb25 	bl	8000948 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e21d      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130c:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	061b      	lsls	r3, r3, #24
 8001326:	495f      	ldr	r1, [pc, #380]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	e018      	b.n	8001360 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a5c      	ldr	r2, [pc, #368]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fb05 	bl	8000948 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fb01 	bl	8000948 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1f9      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d03c      	beq.n	80013e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01c      	beq.n	80013ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137a:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fae0 	bl	8000948 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fadc 	bl	8000948 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1d4      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80013a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0ef      	beq.n	800138c <HAL_RCC_OscConfig+0x3ec>
 80013ac:	e01b      	b.n	80013e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80013b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b4:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff fac3 	bl	8000948 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff fabf 	bl	8000948 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1b7      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80013da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ef      	bne.n	80013c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80a6 	beq.w	8001540 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10d      	bne.n	8001420 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140e:	6593      	str	r3, [r2, #88]	; 0x58
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141c:	2301      	movs	r3, #1
 800141e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_RCC_OscConfig+0x508>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d118      	bne.n	800145e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_RCC_OscConfig+0x508>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x508>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001438:	f7ff fa86 	bl	8000948 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001440:	f7ff fa82 	bl	8000948 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e17a      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x508>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <HAL_RCC_OscConfig+0x4d8>
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001476:	e029      	b.n	80014cc <HAL_RCC_OscConfig+0x52c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d115      	bne.n	80014ac <HAL_RCC_OscConfig+0x50c>
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_RCC_OscConfig+0x504>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a0:	e014      	b.n	80014cc <HAL_RCC_OscConfig+0x52c>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40007000 	.word	0x40007000
 80014ac:	4b9c      	ldr	r3, [pc, #624]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80014ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b2:	4a9b      	ldr	r2, [pc, #620]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014bc:	4b98      	ldr	r3, [pc, #608]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a97      	ldr	r2, [pc, #604]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d016      	beq.n	8001502 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fa38 	bl	8000948 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff fa34 	bl	8000948 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e12a      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f2:	4b8b      	ldr	r3, [pc, #556]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ed      	beq.n	80014dc <HAL_RCC_OscConfig+0x53c>
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fa21 	bl	8000948 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fa1d 	bl	8000948 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e113      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001520:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ed      	bne.n	800150a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152e:	7ffb      	ldrb	r3, [r7, #31]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001534:	4b7a      	ldr	r3, [pc, #488]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	4a79      	ldr	r2, [pc, #484]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 800153a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80fe 	beq.w	8001746 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	2b02      	cmp	r3, #2
 8001550:	f040 80d0 	bne.w	80016f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001554:	4b72      	ldr	r3, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	429a      	cmp	r2, r3
 8001566:	d130      	bne.n	80015ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	3b01      	subs	r3, #1
 8001574:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d127      	bne.n	80015ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d11f      	bne.n	80015ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001594:	2a07      	cmp	r2, #7
 8001596:	bf14      	ite	ne
 8001598:	2201      	movne	r2, #1
 800159a:	2200      	moveq	r2, #0
 800159c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800159e:	4293      	cmp	r3, r2
 80015a0:	d113      	bne.n	80015ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d109      	bne.n	80015ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	3b01      	subs	r3, #1
 80015c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d06e      	beq.n	80016a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d069      	beq.n	80016a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0ad      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015ec:	4b4c      	ldr	r3, [pc, #304]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80015f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015f8:	f7ff f9a6 	bl	8000948 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff f9a2 	bl	8000948 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e09a      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <HAL_RCC_OscConfig+0x784>)
 8001624:	4013      	ands	r3, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800162e:	3a01      	subs	r2, #1
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	4311      	orrs	r1, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001638:	0212      	lsls	r2, r2, #8
 800163a:	4311      	orrs	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001640:	0852      	lsrs	r2, r2, #1
 8001642:	3a01      	subs	r2, #1
 8001644:	0552      	lsls	r2, r2, #21
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800164c:	0852      	lsrs	r2, r2, #1
 800164e:	3a01      	subs	r2, #1
 8001650:	0652      	lsls	r2, r2, #25
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001658:	0912      	lsrs	r2, r2, #4
 800165a:	0452      	lsls	r2, r2, #17
 800165c:	430a      	orrs	r2, r1
 800165e:	4930      	ldr	r1, [pc, #192]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 800166a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800167c:	f7ff f964 	bl	8000948 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f960 	bl	8000948 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e058      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a2:	e050      	b.n	8001746 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e04f      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d148      	bne.n	8001746 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016cc:	f7ff f93c 	bl	8000948 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f938 	bl	8000948 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e030      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x734>
 80016f2:	e028      	b.n	8001746 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d023      	beq.n	8001742 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_RCC_OscConfig+0x780>)
 8001700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff f91f 	bl	8000948 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170c:	e00c      	b.n	8001728 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff f91b 	bl	8000948 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d905      	bls.n	8001728 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e013      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
 8001720:	40021000 	.word	0x40021000
 8001724:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_OscConfig+0x7b0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ec      	bne.n	800170e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_OscConfig+0x7b0>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4905      	ldr	r1, [pc, #20]	; (8001750 <HAL_RCC_OscConfig+0x7b0>)
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_OscConfig+0x7b4>)
 800173c:	4013      	ands	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
 8001740:	e001      	b.n	8001746 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	feeefffc 	.word	0xfeeefffc

08001758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0e7      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b75      	ldr	r3, [pc, #468]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d910      	bls.n	800179c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 0207 	bic.w	r2, r3, #7
 8001782:	4970      	ldr	r1, [pc, #448]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b6e      	ldr	r3, [pc, #440]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0cf      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d010      	beq.n	80017ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d908      	bls.n	80017ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4960      	ldr	r1, [pc, #384]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d04c      	beq.n	8001870 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d121      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0a6      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d115      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e09a      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e08e      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e086      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b46      	ldr	r3, [pc, #280]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4943      	ldr	r1, [pc, #268]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001840:	f7ff f882 	bl	8000948 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff f87e 	bl	8000948 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e06e      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001888:	429a      	cmp	r2, r3
 800188a:	d208      	bcs.n	800189e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	492b      	ldr	r1, [pc, #172]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d210      	bcs.n	80018ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 0207 	bic.w	r2, r3, #7
 80018b4:	4923      	ldr	r1, [pc, #140]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_ClockConfig+0x1ec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e036      	b.n	800193c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d009      	beq.n	800190c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4910      	ldr	r1, [pc, #64]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190c:	f000 f824 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	490b      	ldr	r1, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1f4>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1f8>)
 800192a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1fc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe79 	bl	8000628 <HAL_InitTick>
 8001936:	4603      	mov	r3, r0
 8001938:	72fb      	strb	r3, [r7, #11]

  return status;
 800193a:	7afb      	ldrb	r3, [r7, #11]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	08005824 	.word	0x08005824
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001970:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x34>
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d121      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d11e      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800198c:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001998:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e005      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x110>)
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	e004      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x114>)
 80019de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d134      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0xa6>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d003      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0xac>
 80019fc:	e005      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a00:	617b      	str	r3, [r7, #20]
      break;
 8001a02:	e005      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a06:	617b      	str	r3, [r7, #20]
      break;
 8001a08:	e002      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	617b      	str	r3, [r7, #20]
      break;
 8001a0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	fb03 f202 	mul.w	r2, r3, r2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	0e5b      	lsrs	r3, r3, #25
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	3301      	adds	r3, #1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a50:	69bb      	ldr	r3, [r7, #24]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	0800583c 	.word	0x0800583c
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08005834 	.word	0x08005834

08001ab4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_RCC_GetClockConfig+0x60>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0207 	and.w	r2, r3, #7
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	601a      	str	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40022000 	.word	0x40022000

08001b18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b30:	f7ff f9d2 	bl	8000ed8 <HAL_PWREx_GetVoltageRange>
 8001b34:	6178      	str	r0, [r7, #20]
 8001b36:	e014      	b.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b50:	f7ff f9c2 	bl	8000ed8 <HAL_PWREx_GetVoltageRange>
 8001b54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b68:	d10b      	bne.n	8001b82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b80      	cmp	r3, #128	; 0x80
 8001b6e:	d919      	bls.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2ba0      	cmp	r3, #160	; 0xa0
 8001b74:	d902      	bls.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e013      	b.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	e010      	b.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b80      	cmp	r3, #128	; 0x80
 8001b86:	d902      	bls.n	8001b8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b88:	2303      	movs	r3, #3
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	e00a      	b.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b80      	cmp	r3, #128	; 0x80
 8001b92:	d102      	bne.n	8001b9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	e004      	b.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b70      	cmp	r3, #112	; 0x70
 8001b9e:	d101      	bne.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 0207 	bic.w	r2, r3, #7
 8001bac:	4909      	ldr	r1, [pc, #36]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e049      	b.n	8001c7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f841 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4610      	mov	r0, r2
 8001c18:	f000 f9f8 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04f      	b.n	8001d54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01d      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0x76>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d018      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0x76>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0x76>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00e      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0x76>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0x76>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0x76>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d115      	bne.n	8001d3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d015      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d011      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3c:	e008      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e000      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40013400 	.word	0x40013400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	00010007 	.word	0x00010007

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f905 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8f7 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f908 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8db 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8cd 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8de 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8b1 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8a3 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8b4 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f887 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f879 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f88a 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fb58 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f914 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3a:	d10e      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d107      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f907 	bl	8002168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d10e      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d107      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f838 	bl	8001ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d10e      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0220 	mvn.w	r2, #32
 8001faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8c7 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <TIM_Base_SetConfig+0x114>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d00f      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <TIM_Base_SetConfig+0x118>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00b      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <TIM_Base_SetConfig+0x11c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3b      	ldr	r2, [pc, #236]	; (800212c <TIM_Base_SetConfig+0x120>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <TIM_Base_SetConfig+0x124>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d108      	bne.n	800205e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <TIM_Base_SetConfig+0x114>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d01b      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <TIM_Base_SetConfig+0x118>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d017      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <TIM_Base_SetConfig+0x11c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <TIM_Base_SetConfig+0x120>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00f      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <TIM_Base_SetConfig+0x124>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00b      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a28      	ldr	r2, [pc, #160]	; (8002134 <TIM_Base_SetConfig+0x128>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d003      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <TIM_Base_SetConfig+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d108      	bne.n	80020b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <TIM_Base_SetConfig+0x114>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00f      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <TIM_Base_SetConfig+0x124>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00b      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a11      	ldr	r2, [pc, #68]	; (8002134 <TIM_Base_SetConfig+0x128>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <TIM_Base_SetConfig+0x130>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d103      	bne.n	800210c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	615a      	str	r2, [r3, #20]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40013400 	.word	0x40013400
 8002134:	40014000 	.word	0x40014000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800218a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218e:	2b84      	cmp	r3, #132	; 0x84
 8002190:	d005      	beq.n	800219e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002192:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	3303      	adds	r3, #3
 800219c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021b0:	f000 ffca 	bl	8003148 <vTaskStartScheduler>
  
  return osOK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}

080021ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021bc:	b089      	sub	sp, #36	; 0x24
 80021be:	af04      	add	r7, sp, #16
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <osThreadCreate+0x54>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01c      	beq.n	800220e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685c      	ldr	r4, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681d      	ldr	r5, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691e      	ldr	r6, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ffc8 	bl	800217c <makeFreeRtosPriority>
 80021ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021f6:	9202      	str	r2, [sp, #8]
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	9100      	str	r1, [sp, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4632      	mov	r2, r6
 8002200:	4629      	mov	r1, r5
 8002202:	4620      	mov	r0, r4
 8002204:	f000 fdc2 	bl	8002d8c <xTaskCreateStatic>
 8002208:	4603      	mov	r3, r0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e01c      	b.n	8002248 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685c      	ldr	r4, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800221a:	b29e      	uxth	r6, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffaa 	bl	800217c <makeFreeRtosPriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	9200      	str	r2, [sp, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4632      	mov	r2, r6
 8002236:	4629      	mov	r1, r5
 8002238:	4620      	mov	r0, r4
 800223a:	f000 fe04 	bl	8002e46 <xTaskCreate>
 800223e:	4603      	mov	r3, r0
 8002240:	2b01      	cmp	r3, #1
 8002242:	d001      	beq.n	8002248 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002252 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f103 0208 	add.w	r2, r3, #8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 32ff 	mov.w	r2, #4294967295
 800226a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 0208 	add.w	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0208 	add.w	r2, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d103      	bne.n	8002314 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e00c      	b.n	800232e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3308      	adds	r3, #8
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e002      	b.n	8002322 <vListInsert+0x2e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d2f6      	bcs.n	800231c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6892      	ldr	r2, [r2, #8]
 800237c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6852      	ldr	r2, [r2, #4]
 8002386:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	d103      	bne.n	800239a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023e6:	f002 f8c5 	bl	8004574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	441a      	add	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	3b01      	subs	r3, #1
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	441a      	add	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	22ff      	movs	r2, #255	; 0xff
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d114      	bne.n	8002466 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01a      	beq.n	800247a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3310      	adds	r3, #16
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f911 	bl	8003670 <xTaskRemoveFromEventList>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <xQueueGenericReset+0xcc>)
 8002456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	e009      	b.n	800247a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3310      	adds	r3, #16
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fef1 	bl	8002252 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3324      	adds	r3, #36	; 0x24
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff feec 	bl	8002252 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800247a:	f002 f8ab 	bl	80045d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08e      	sub	sp, #56	; 0x38
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <xQueueGenericCreateStatic+0x52>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <xQueueGenericCreateStatic+0x56>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <xQueueGenericCreateStatic+0x58>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	623b      	str	r3, [r7, #32]
}
 80024fa:	bf00      	nop
 80024fc:	e7fe      	b.n	80024fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <xQueueGenericCreateStatic+0x7e>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <xQueueGenericCreateStatic+0x82>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <xQueueGenericCreateStatic+0x84>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	61fb      	str	r3, [r7, #28]
}
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800252a:	2348      	movs	r3, #72	; 0x48
 800252c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b48      	cmp	r3, #72	; 0x48
 8002532:	d00a      	beq.n	800254a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	61bb      	str	r3, [r7, #24]
}
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800254a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800255e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f805 	bl	800257c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002574:	4618      	mov	r0, r3
 8002576:	3730      	adds	r7, #48	; 0x30
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e002      	b.n	800259e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025aa:	2101      	movs	r1, #1
 80025ac:	69b8      	ldr	r0, [r7, #24]
 80025ae:	f7ff ff05 	bl	80023bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <xQueueGenericSend+0x32>
	__asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <xQueueGenericSend+0x40>
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <xQueueGenericSend+0x44>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <xQueueGenericSend+0x46>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <xQueueGenericSend+0x60>
	__asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002618:	bf00      	nop
 800261a:	e7fe      	b.n	800261a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d103      	bne.n	800262a <xQueueGenericSend+0x6e>
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <xQueueGenericSend+0x72>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <xQueueGenericSend+0x74>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xQueueGenericSend+0x8e>
	__asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	623b      	str	r3, [r7, #32]
}
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800264a:	f001 f9d1 	bl	80039f0 <xTaskGetSchedulerState>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <xQueueGenericSend+0x9e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <xQueueGenericSend+0xa2>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <xQueueGenericSend+0xa4>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xQueueGenericSend+0xbe>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61fb      	str	r3, [r7, #28]
}
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800267a:	f001 ff7b 	bl	8004574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <xQueueGenericSend+0xd4>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d129      	bne.n	80026e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002696:	f000 fa0b 	bl	8002ab0 <prvCopyDataToQueue>
 800269a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	3324      	adds	r3, #36	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 ffe1 	bl	8003670 <xTaskRemoveFromEventList>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <xQueueGenericSend+0x1f8>)
 80026b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	e00a      	b.n	80026dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <xQueueGenericSend+0x1f8>)
 80026ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026dc:	f001 ff7a 	bl	80045d4 <vPortExitCritical>
				return pdPASS;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e063      	b.n	80027ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026ea:	f001 ff73 	bl	80045d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e05c      	b.n	80027ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 f819 	bl	8003734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002702:	2301      	movs	r3, #1
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002706:	f001 ff65 	bl	80045d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800270a:	f000 fd8d 	bl	8003228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800270e:	f001 ff31 	bl	8004574 <vPortEnterCritical>
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002718:	b25b      	sxtb	r3, r3
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d103      	bne.n	8002728 <xQueueGenericSend+0x16c>
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d103      	bne.n	800273e <xQueueGenericSend+0x182>
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800273e:	f001 ff49 	bl	80045d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002742:	1d3a      	adds	r2, r7, #4
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f001 f808 	bl	8003760 <xTaskCheckForTimeOut>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d124      	bne.n	80027a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002758:	f000 faa2 	bl	8002ca0 <prvIsQueueFull>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d018      	beq.n	8002794 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	3310      	adds	r3, #16
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 ff30 	bl	80035d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002772:	f000 fa2d 	bl	8002bd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002776:	f000 fd65 	bl	8003244 <xTaskResumeAll>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f af7c 	bne.w	800267a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <xQueueGenericSend+0x1f8>)
 8002784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	e772      	b.n	800267a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002796:	f000 fa1b 	bl	8002bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800279a:	f000 fd53 	bl	8003244 <xTaskResumeAll>
 800279e:	e76c      	b.n	800267a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a2:	f000 fa15 	bl	8002bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027a6:	f000 fd4d 	bl	8003244 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3738      	adds	r7, #56	; 0x38
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	e000ed04 	.word	0xe000ed04

080027b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b090      	sub	sp, #64	; 0x40
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <xQueueGenericSendFromISR+0x3c>
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <xQueueGenericSendFromISR+0x40>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <xQueueGenericSendFromISR+0x42>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d103      	bne.n	8002822 <xQueueGenericSendFromISR+0x6a>
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <xQueueGenericSendFromISR+0x6e>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueGenericSendFromISR+0x70>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	623b      	str	r3, [r7, #32]
}
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002842:	f001 ff79 	bl	8004738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002846:	f3ef 8211 	mrs	r2, BASEPRI
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	61fa      	str	r2, [r7, #28]
 800285c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800285e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <xQueueGenericSendFromISR+0xbc>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d12f      	bne.n	80028d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800287a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800288a:	f000 f911 	bl	8002ab0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800288e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d112      	bne.n	80028be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	3324      	adds	r3, #36	; 0x24
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fee3 	bl	8003670 <xTaskRemoveFromEventList>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	b25a      	sxtb	r2, r3
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028ce:	2301      	movs	r3, #1
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80028d2:	e001      	b.n	80028d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3740      	adds	r7, #64	; 0x40
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <xQueueReceive+0x30>
	__asm volatile
 800290a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290e:	f383 8811 	msr	BASEPRI, r3
 8002912:	f3bf 8f6f 	isb	sy
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	623b      	str	r3, [r7, #32]
}
 800291c:	bf00      	nop
 800291e:	e7fe      	b.n	800291e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <xQueueReceive+0x3e>
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <xQueueReceive+0x42>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <xQueueReceive+0x44>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <xQueueReceive+0x5e>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61fb      	str	r3, [r7, #28]
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800294e:	f001 f84f 	bl	80039f0 <xTaskGetSchedulerState>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <xQueueReceive+0x6e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <xQueueReceive+0x72>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <xQueueReceive+0x74>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <xQueueReceive+0x8e>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	61bb      	str	r3, [r7, #24]
}
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800297e:	f001 fdf9 	bl	8004574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01f      	beq.n	80029ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002992:	f000 f8f7 	bl	8002b84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00f      	beq.n	80029c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	3310      	adds	r3, #16
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fe60 	bl	8003670 <xTaskRemoveFromEventList>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <xQueueReceive+0x1bc>)
 80029b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029c6:	f001 fe05 	bl	80045d4 <vPortExitCritical>
				return pdPASS;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e069      	b.n	8002aa2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029d4:	f001 fdfe 	bl	80045d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029d8:	2300      	movs	r3, #0
 80029da:	e062      	b.n	8002aa2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fea4 	bl	8003734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029f0:	f001 fdf0 	bl	80045d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029f4:	f000 fc18 	bl	8003228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029f8:	f001 fdbc 	bl	8004574 <vPortEnterCritical>
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a02:	b25b      	sxtb	r3, r3
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d103      	bne.n	8002a12 <xQueueReceive+0x122>
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d103      	bne.n	8002a28 <xQueueReceive+0x138>
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a28:	f001 fdd4 	bl	80045d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a2c:	1d3a      	adds	r2, r7, #4
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fe93 	bl	8003760 <xTaskCheckForTimeOut>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d123      	bne.n	8002a88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a42:	f000 f917 	bl	8002c74 <prvIsQueueEmpty>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d017      	beq.n	8002a7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fdbb 	bl	80035d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a5c:	f000 f8b8 	bl	8002bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a60:	f000 fbf0 	bl	8003244 <xTaskResumeAll>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d189      	bne.n	800297e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <xQueueReceive+0x1bc>)
 8002a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	e780      	b.n	800297e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7e:	f000 f8a7 	bl	8002bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a82:	f000 fbdf 	bl	8003244 <xTaskResumeAll>
 8002a86:	e77a      	b.n	800297e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8a:	f000 f8a1 	bl	8002bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a8e:	f000 fbd9 	bl	8003244 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a94:	f000 f8ee 	bl	8002c74 <prvIsQueueEmpty>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f43f af6f 	beq.w	800297e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002aa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d14d      	bne.n	8002b72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ffa6 	bl	8003a2c <xTaskPriorityDisinherit>
 8002ae0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e043      	b.n	8002b72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d119      	bne.n	8002b24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6858      	ldr	r0, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	461a      	mov	r2, r3
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	f002 f969 	bl	8004dd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d32b      	bcc.n	8002b72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e026      	b.n	8002b72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68d8      	ldr	r0, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	f002 f94f 	bl	8004dd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	441a      	add	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d207      	bcs.n	8002b60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	425b      	negs	r3, r3
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d105      	bne.n	8002b72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d303      	bcc.n	8002bb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	f002 f905 	bl	8004dd2 <memcpy>
	}
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bd8:	f001 fccc 	bl	8004574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002be2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002be4:	e011      	b.n	8002c0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d012      	beq.n	8002c14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3324      	adds	r3, #36	; 0x24
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fd3c 	bl	8003670 <xTaskRemoveFromEventList>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bfe:	f000 fe11 	bl	8003824 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	dce9      	bgt.n	8002be6 <prvUnlockQueue+0x16>
 8002c12:	e000      	b.n	8002c16 <prvUnlockQueue+0x46>
					break;
 8002c14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	22ff      	movs	r2, #255	; 0xff
 8002c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c1e:	f001 fcd9 	bl	80045d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c22:	f001 fca7 	bl	8004574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c2e:	e011      	b.n	8002c54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3310      	adds	r3, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fd17 	bl	8003670 <xTaskRemoveFromEventList>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c48:	f000 fdec 	bl	8003824 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c4c:	7bbb      	ldrb	r3, [r7, #14]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dce9      	bgt.n	8002c30 <prvUnlockQueue+0x60>
 8002c5c:	e000      	b.n	8002c60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c68:	f001 fcb4 	bl	80045d4 <vPortExitCritical>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c7c:	f001 fc7a 	bl	8004574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e001      	b.n	8002c92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c92:	f001 fc9f 	bl	80045d4 <vPortExitCritical>

	return xReturn;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ca8:	f001 fc64 	bl	8004574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d102      	bne.n	8002cbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e001      	b.n	8002cc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cc2:	f001 fc87 	bl	80045d4 <vPortExitCritical>

	return xReturn;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e014      	b.n	8002d0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <vQueueAddToRegistry+0x50>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cec:	490c      	ldr	r1, [pc, #48]	; (8002d20 <vQueueAddToRegistry+0x50>)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <vQueueAddToRegistry+0x50>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d02:	e006      	b.n	8002d12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b07      	cmp	r3, #7
 8002d0e:	d9e7      	bls.n	8002ce0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000085c 	.word	0x2000085c

08002d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d34:	f001 fc1e 	bl	8004574 <vPortEnterCritical>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d103      	bne.n	8002d4e <vQueueWaitForMessageRestricted+0x2a>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d103      	bne.n	8002d64 <vQueueWaitForMessageRestricted+0x40>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d64:	f001 fc36 	bl	80045d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fc4d 	bl	8003618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7ff ff26 	bl	8002bd0 <prvUnlockQueue>
	}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af04      	add	r7, sp, #16
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	623b      	str	r3, [r7, #32]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61fb      	str	r3, [r7, #28]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dd2:	23b4      	movs	r3, #180	; 0xb4
 8002dd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2bb4      	cmp	r3, #180	; 0xb4
 8002dda:	d00a      	beq.n	8002df2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61bb      	str	r3, [r7, #24]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002df2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01e      	beq.n	8002e38 <xTaskCreateStatic+0xac>
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e12:	2300      	movs	r3, #0
 8002e14:	9303      	str	r3, [sp, #12]
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f850 	bl	8002ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e32:	f000 f8eb 	bl	800300c <prvAddNewTaskToReadyList>
 8002e36:	e001      	b.n	8002e3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e3c:	697b      	ldr	r3, [r7, #20]
	}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08c      	sub	sp, #48	; 0x30
 8002e4a:	af04      	add	r7, sp, #16
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fcac 	bl	80047b8 <pvPortMalloc>
 8002e60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e68:	20b4      	movs	r0, #180	; 0xb4
 8002e6a:	f001 fca5 	bl	80047b8 <pvPortMalloc>
 8002e6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7c:	e005      	b.n	8002e8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f001 fd66 	bl	8004950 <vPortFree>
 8002e84:	e001      	b.n	8002e8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d017      	beq.n	8002ec0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9303      	str	r3, [sp, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	9302      	str	r3, [sp, #8]
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f80e 	bl	8002ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eb4:	69f8      	ldr	r0, [r7, #28]
 8002eb6:	f000 f8a9 	bl	800300c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e002      	b.n	8002ec6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	617b      	str	r3, [r7, #20]
}
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01f      	beq.n	8002f5e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e012      	b.n	8002f4a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	7819      	ldrb	r1, [r3, #0]
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	3334      	adds	r3, #52	; 0x34
 8002f34:	460a      	mov	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d9e9      	bls.n	8002f24 <prvInitialiseNewTask+0x54>
 8002f50:	e000      	b.n	8002f54 <prvInitialiseNewTask+0x84>
			{
				break;
 8002f52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	e003      	b.n	8002f66 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d901      	bls.n	8002f70 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f6c:	2306      	movs	r3, #6
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	3304      	adds	r3, #4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f983 	bl	8002292 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	3318      	adds	r3, #24
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f97e 	bl	8002292 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	f1c3 0207 	rsb	r2, r3, #7
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	334c      	adds	r3, #76	; 0x4c
 8002fc0:	2260      	movs	r2, #96	; 0x60
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 ff12 	bl	8004dee <memset>
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <prvInitialiseNewTask+0x130>)
 8002fce:	651a      	str	r2, [r3, #80]	; 0x50
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <prvInitialiseNewTask+0x134>)
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <prvInitialiseNewTask+0x138>)
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	69b8      	ldr	r0, [r7, #24]
 8002fe2:	f001 f99d 	bl	8004320 <pxPortInitialiseStack>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ff8:	bf00      	nop
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	0800588c 	.word	0x0800588c
 8003004:	080058ac 	.word	0x080058ac
 8003008:	0800586c 	.word	0x0800586c

0800300c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003014:	f001 faae 	bl	8004574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <prvAddNewTaskToReadyList+0xb8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <prvAddNewTaskToReadyList+0xb8>)
 8003020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003022:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <prvAddNewTaskToReadyList+0xbc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800302a:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <prvAddNewTaskToReadyList+0xbc>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <prvAddNewTaskToReadyList+0xb8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d110      	bne.n	800305a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003038:	f000 fc18 	bl	800386c <prvInitialiseTaskLists>
 800303c:	e00d      	b.n	800305a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <prvAddNewTaskToReadyList+0xc0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <prvAddNewTaskToReadyList+0xbc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d802      	bhi.n	800305a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <prvAddNewTaskToReadyList+0xbc>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <prvAddNewTaskToReadyList+0xc4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <prvAddNewTaskToReadyList+0xc4>)
 8003062:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <prvAddNewTaskToReadyList+0xc8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <prvAddNewTaskToReadyList+0xc8>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <prvAddNewTaskToReadyList+0xcc>)
 8003084:	441a      	add	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7ff f90d 	bl	80022ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003092:	f001 fa9f 	bl	80045d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <prvAddNewTaskToReadyList+0xc0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00e      	beq.n	80030bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <prvAddNewTaskToReadyList+0xbc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d207      	bcs.n	80030bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <prvAddNewTaskToReadyList+0xd0>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	2000099c 	.word	0x2000099c
 80030c8:	2000089c 	.word	0x2000089c
 80030cc:	200009a8 	.word	0x200009a8
 80030d0:	200009b8 	.word	0x200009b8
 80030d4:	200009a4 	.word	0x200009a4
 80030d8:	200008a0 	.word	0x200008a0
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <vTaskDelay+0x60>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <vTaskDelay+0x30>
	__asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60bb      	str	r3, [r7, #8]
}
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003110:	f000 f88a 	bl	8003228 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003114:	2100      	movs	r1, #0
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fd0e 	bl	8003b38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800311c:	f000 f892 	bl	8003244 <xTaskResumeAll>
 8003120:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <vTaskDelay+0x64>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200009c4 	.word	0x200009c4
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003156:	463a      	mov	r2, r7
 8003158:	1d39      	adds	r1, r7, #4
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f836 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	9202      	str	r2, [sp, #8]
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	460a      	mov	r2, r1
 8003176:	4924      	ldr	r1, [pc, #144]	; (8003208 <vTaskStartScheduler+0xc0>)
 8003178:	4824      	ldr	r0, [pc, #144]	; (800320c <vTaskStartScheduler+0xc4>)
 800317a:	f7ff fe07 	bl	8002d8c <xTaskCreateStatic>
 800317e:	4603      	mov	r3, r0
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <vTaskStartScheduler+0xc8>)
 8003182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <vTaskStartScheduler+0xc8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800318c:	2301      	movs	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e001      	b.n	8003196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d102      	bne.n	80031a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800319c:	f000 fd32 	bl	8003c04 <xTimerCreateTimerTask>
 80031a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d11b      	bne.n	80031e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	613b      	str	r3, [r7, #16]
}
 80031ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <vTaskStartScheduler+0xcc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	334c      	adds	r3, #76	; 0x4c
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <vTaskStartScheduler+0xd0>)
 80031c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <vTaskStartScheduler+0xd4>)
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <vTaskStartScheduler+0xd8>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <vTaskStartScheduler+0xdc>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031da:	f001 f929 	bl	8004430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031de:	e00e      	b.n	80031fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d10a      	bne.n	80031fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	60fb      	str	r3, [r7, #12]
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <vTaskStartScheduler+0xb4>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	0800580c 	.word	0x0800580c
 800320c:	0800383d 	.word	0x0800383d
 8003210:	200009c0 	.word	0x200009c0
 8003214:	2000089c 	.word	0x2000089c
 8003218:	20000010 	.word	0x20000010
 800321c:	200009bc 	.word	0x200009bc
 8003220:	200009a8 	.word	0x200009a8
 8003224:	200009a0 	.word	0x200009a0

08003228 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <vTaskSuspendAll+0x18>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a03      	ldr	r2, [pc, #12]	; (8003240 <vTaskSuspendAll+0x18>)
 8003234:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	200009c4 	.word	0x200009c4

08003244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <xTaskResumeAll+0x114>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <xTaskResumeAll+0x2c>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	603b      	str	r3, [r7, #0]
}
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003270:	f001 f980 	bl	8004574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003274:	4b38      	ldr	r3, [pc, #224]	; (8003358 <xTaskResumeAll+0x114>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	4a37      	ldr	r2, [pc, #220]	; (8003358 <xTaskResumeAll+0x114>)
 800327c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <xTaskResumeAll+0x114>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d161      	bne.n	800334a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003286:	4b35      	ldr	r3, [pc, #212]	; (800335c <xTaskResumeAll+0x118>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d05d      	beq.n	800334a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800328e:	e02e      	b.n	80032ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003290:	4b33      	ldr	r3, [pc, #204]	; (8003360 <xTaskResumeAll+0x11c>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3318      	adds	r3, #24
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f862 	bl	8002366 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f85d 	bl	8002366 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <xTaskResumeAll+0x120>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <xTaskResumeAll+0x120>)
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4a27      	ldr	r2, [pc, #156]	; (8003368 <xTaskResumeAll+0x124>)
 80032cc:	441a      	add	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fe ffe9 	bl	80022ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	4b23      	ldr	r3, [pc, #140]	; (800336c <xTaskResumeAll+0x128>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <xTaskResumeAll+0x12c>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <xTaskResumeAll+0x11c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cc      	bne.n	8003290 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032fc:	f000 fb58 	bl	80039b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003300:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <xTaskResumeAll+0x130>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800330c:	f000 f846 	bl	800339c <xTaskIncrementTick>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <xTaskResumeAll+0x12c>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f1      	bne.n	800330c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <xTaskResumeAll+0x130>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <xTaskResumeAll+0x12c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003336:	2301      	movs	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <xTaskResumeAll+0x134>)
 800333c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800334a:	f001 f943 	bl	80045d4 <vPortExitCritical>

	return xAlreadyYielded;
 800334e:	68bb      	ldr	r3, [r7, #8]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200009c4 	.word	0x200009c4
 800335c:	2000099c 	.word	0x2000099c
 8003360:	2000095c 	.word	0x2000095c
 8003364:	200009a4 	.word	0x200009a4
 8003368:	200008a0 	.word	0x200008a0
 800336c:	2000089c 	.word	0x2000089c
 8003370:	200009b0 	.word	0x200009b0
 8003374:	200009ac 	.word	0x200009ac
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <xTaskGetTickCount+0x1c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003388:	687b      	ldr	r3, [r7, #4]
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	200009a0 	.word	0x200009a0

0800339c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a6:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <xTaskIncrementTick+0x144>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 808e 	bne.w	80034cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <xTaskIncrementTick+0x148>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <xTaskIncrementTick+0x148>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d120      	bne.n	8003406 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <xTaskIncrementTick+0x14c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	603b      	str	r3, [r7, #0]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xTaskIncrementTick+0x46>
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <xTaskIncrementTick+0x14c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <xTaskIncrementTick+0x150>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <xTaskIncrementTick+0x14c>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <xTaskIncrementTick+0x150>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <xTaskIncrementTick+0x154>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a3c      	ldr	r2, [pc, #240]	; (80034f0 <xTaskIncrementTick+0x154>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	f000 fad5 	bl	80039b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <xTaskIncrementTick+0x158>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d348      	bcc.n	80034a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <xTaskIncrementTick+0x14c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <xTaskIncrementTick+0x158>)
 800341c:	f04f 32ff 	mov.w	r2, #4294967295
 8003420:	601a      	str	r2, [r3, #0]
					break;
 8003422:	e03e      	b.n	80034a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003424:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <xTaskIncrementTick+0x14c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d203      	bcs.n	8003444 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800343c:	4a2d      	ldr	r2, [pc, #180]	; (80034f4 <xTaskIncrementTick+0x158>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003442:	e02e      	b.n	80034a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe ff8c 	bl	8002366 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3318      	adds	r3, #24
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe ff83 	bl	8002366 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	2201      	movs	r2, #1
 8003466:	409a      	lsls	r2, r3
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <xTaskIncrementTick+0x15c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <xTaskIncrementTick+0x15c>)
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <xTaskIncrementTick+0x160>)
 8003480:	441a      	add	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3304      	adds	r3, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe ff0f 	bl	80022ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <xTaskIncrementTick+0x164>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d3b9      	bcc.n	8003410 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a0:	e7b6      	b.n	8003410 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <xTaskIncrementTick+0x164>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4914      	ldr	r1, [pc, #80]	; (80034fc <xTaskIncrementTick+0x160>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d901      	bls.n	80034be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <xTaskIncrementTick+0x168>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e004      	b.n	80034d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <xTaskIncrementTick+0x16c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <xTaskIncrementTick+0x16c>)
 80034d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034d6:	697b      	ldr	r3, [r7, #20]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200009c4 	.word	0x200009c4
 80034e4:	200009a0 	.word	0x200009a0
 80034e8:	20000954 	.word	0x20000954
 80034ec:	20000958 	.word	0x20000958
 80034f0:	200009b4 	.word	0x200009b4
 80034f4:	200009bc 	.word	0x200009bc
 80034f8:	200009a4 	.word	0x200009a4
 80034fc:	200008a0 	.word	0x200008a0
 8003500:	2000089c 	.word	0x2000089c
 8003504:	200009b0 	.word	0x200009b0
 8003508:	200009ac 	.word	0x200009ac

0800350c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <vTaskSwitchContext+0xac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <vTaskSwitchContext+0xb0>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003520:	e044      	b.n	80035ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <vTaskSwitchContext+0xb0>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <vTaskSwitchContext+0xb4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	f1c3 031f 	rsb	r3, r3, #31
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <vTaskSwitchContext+0xb8>)
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	607b      	str	r3, [r7, #4]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <vTaskSwitchContext+0x5a>
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <vTaskSwitchContext+0xb8>)
 8003574:	4413      	add	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	3308      	adds	r3, #8
 800358a:	429a      	cmp	r2, r3
 800358c:	d104      	bne.n	8003598 <vTaskSwitchContext+0x8c>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <vTaskSwitchContext+0xbc>)
 80035a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <vTaskSwitchContext+0xbc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	334c      	adds	r3, #76	; 0x4c
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <vTaskSwitchContext+0xc0>)
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	200009c4 	.word	0x200009c4
 80035bc:	200009b0 	.word	0x200009b0
 80035c0:	200009a4 	.word	0x200009a4
 80035c4:	200008a0 	.word	0x200008a0
 80035c8:	2000089c 	.word	0x2000089c
 80035cc:	20000010 	.word	0x20000010

080035d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60fb      	str	r3, [r7, #12]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <vTaskPlaceOnEventList+0x44>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3318      	adds	r3, #24
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe fe78 	bl	80022f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003604:	2101      	movs	r1, #1
 8003606:	6838      	ldr	r0, [r7, #0]
 8003608:	f000 fa96 	bl	8003b38 <prvAddCurrentTaskToDelayedList>
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000089c 	.word	0x2000089c

08003618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	617b      	str	r3, [r7, #20]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <vTaskPlaceOnEventListRestricted+0x54>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3318      	adds	r3, #24
 8003646:	4619      	mov	r1, r3
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7fe fe2f 	bl	80022ac <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	68b8      	ldr	r0, [r7, #8]
 800365e:	f000 fa6b 	bl	8003b38 <prvAddCurrentTaskToDelayedList>
	}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000089c 	.word	0x2000089c

08003670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	60fb      	str	r3, [r7, #12]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3318      	adds	r3, #24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fe60 	bl	8002366 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <xTaskRemoveFromEventList+0xac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11c      	bne.n	80036e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fe57 	bl	8002366 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	2201      	movs	r2, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <xTaskRemoveFromEventList+0xb0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	4a16      	ldr	r2, [pc, #88]	; (8003720 <xTaskRemoveFromEventList+0xb0>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <xTaskRemoveFromEventList+0xb4>)
 80036d8:	441a      	add	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3304      	adds	r3, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f7fe fde3 	bl	80022ac <vListInsertEnd>
 80036e6:	e005      	b.n	80036f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3318      	adds	r3, #24
 80036ec:	4619      	mov	r1, r3
 80036ee:	480e      	ldr	r0, [pc, #56]	; (8003728 <xTaskRemoveFromEventList+0xb8>)
 80036f0:	f7fe fddc 	bl	80022ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <xTaskRemoveFromEventList+0xbc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d905      	bls.n	800370e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003702:	2301      	movs	r3, #1
 8003704:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <xTaskRemoveFromEventList+0xc0>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e001      	b.n	8003712 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003712:	697b      	ldr	r3, [r7, #20]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200009c4 	.word	0x200009c4
 8003720:	200009a4 	.word	0x200009a4
 8003724:	200008a0 	.word	0x200008a0
 8003728:	2000095c 	.word	0x2000095c
 800372c:	2000089c 	.word	0x2000089c
 8003730:	200009b0 	.word	0x200009b0

08003734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <vTaskInternalSetTimeOutState+0x24>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <vTaskInternalSetTimeOutState+0x28>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	605a      	str	r2, [r3, #4]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	200009b4 	.word	0x200009b4
 800375c:	200009a0 	.word	0x200009a0

08003760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	613b      	str	r3, [r7, #16]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037a2:	f000 fee7 	bl	8004574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <xTaskCheckForTimeOut+0xbc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d102      	bne.n	80037c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	e023      	b.n	800380e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <xTaskCheckForTimeOut+0xc0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d007      	beq.n	80037e2 <xTaskCheckForTimeOut+0x82>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e015      	b.n	800380e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d20b      	bcs.n	8003804 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad2      	subs	r2, r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff9b 	bl	8003734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e004      	b.n	800380e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800380a:	2301      	movs	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800380e:	f000 fee1 	bl	80045d4 <vPortExitCritical>

	return xReturn;
 8003812:	69fb      	ldr	r3, [r7, #28]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200009a0 	.word	0x200009a0
 8003820:	200009b4 	.word	0x200009b4

08003824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <vTaskMissedYield+0x14>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	200009b0 	.word	0x200009b0

0800383c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003844:	f000 f852 	bl	80038ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <prvIdleTask+0x28>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d9f9      	bls.n	8003844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <prvIdleTask+0x2c>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003860:	e7f0      	b.n	8003844 <prvIdleTask+0x8>
 8003862:	bf00      	nop
 8003864:	200008a0 	.word	0x200008a0
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e00c      	b.n	8003892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <prvInitialiseTaskLists+0x60>)
 8003884:	4413      	add	r3, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fce3 	bl	8002252 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3301      	adds	r3, #1
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d9ef      	bls.n	8003878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003898:	480d      	ldr	r0, [pc, #52]	; (80038d0 <prvInitialiseTaskLists+0x64>)
 800389a:	f7fe fcda 	bl	8002252 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <prvInitialiseTaskLists+0x68>)
 80038a0:	f7fe fcd7 	bl	8002252 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038a4:	480c      	ldr	r0, [pc, #48]	; (80038d8 <prvInitialiseTaskLists+0x6c>)
 80038a6:	f7fe fcd4 	bl	8002252 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <prvInitialiseTaskLists+0x70>)
 80038ac:	f7fe fcd1 	bl	8002252 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038b0:	480b      	ldr	r0, [pc, #44]	; (80038e0 <prvInitialiseTaskLists+0x74>)
 80038b2:	f7fe fcce 	bl	8002252 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <prvInitialiseTaskLists+0x78>)
 80038b8:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <prvInitialiseTaskLists+0x64>)
 80038ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvInitialiseTaskLists+0x7c>)
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <prvInitialiseTaskLists+0x68>)
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200008a0 	.word	0x200008a0
 80038d0:	2000092c 	.word	0x2000092c
 80038d4:	20000940 	.word	0x20000940
 80038d8:	2000095c 	.word	0x2000095c
 80038dc:	20000970 	.word	0x20000970
 80038e0:	20000988 	.word	0x20000988
 80038e4:	20000954 	.word	0x20000954
 80038e8:	20000958 	.word	0x20000958

080038ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038f2:	e019      	b.n	8003928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038f4:	f000 fe3e 	bl	8004574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <prvCheckTasksWaitingTermination+0x50>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fd2e 	bl	8002366 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <prvCheckTasksWaitingTermination+0x54>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3b01      	subs	r3, #1
 8003910:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <prvCheckTasksWaitingTermination+0x54>)
 8003912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <prvCheckTasksWaitingTermination+0x58>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3b01      	subs	r3, #1
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <prvCheckTasksWaitingTermination+0x58>)
 800391c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800391e:	f000 fe59 	bl	80045d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f810 	bl	8003948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <prvCheckTasksWaitingTermination+0x58>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e1      	bne.n	80038f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000970 	.word	0x20000970
 8003940:	2000099c 	.word	0x2000099c
 8003944:	20000984 	.word	0x20000984

08003948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	334c      	adds	r3, #76	; 0x4c
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fb6b 	bl	8005030 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fff1 	bl	8004950 <vPortFree>
				vPortFree( pxTCB );
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 ffee 	bl	8004950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003974:	e018      	b.n	80039a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d103      	bne.n	8003988 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 ffe5 	bl	8004950 <vPortFree>
	}
 8003986:	e00f      	b.n	80039a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800398e:	2b02      	cmp	r3, #2
 8003990:	d00a      	beq.n	80039a8 <prvDeleteTCB+0x60>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	60fb      	str	r3, [r7, #12]
}
 80039a4:	bf00      	nop
 80039a6:	e7fe      	b.n	80039a6 <prvDeleteTCB+0x5e>
	}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <prvResetNextTaskUnblockTime+0x38>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <prvResetNextTaskUnblockTime+0x3c>)
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039c8:	e008      	b.n	80039dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <prvResetNextTaskUnblockTime+0x38>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <prvResetNextTaskUnblockTime+0x3c>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20000954 	.word	0x20000954
 80039ec:	200009bc 	.word	0x200009bc

080039f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <xTaskGetSchedulerState+0x34>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039fe:	2301      	movs	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	e008      	b.n	8003a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <xTaskGetSchedulerState+0x38>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	e001      	b.n	8003a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a16:	687b      	ldr	r3, [r7, #4]
	}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	200009a8 	.word	0x200009a8
 8003a28:	200009c4 	.word	0x200009c4

08003a2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d06e      	beq.n	8003b20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <xTaskPriorityDisinherit+0x100>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d00a      	beq.n	8003a62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	60fb      	str	r3, [r7, #12]
}
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60bb      	str	r3, [r7, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	1e5a      	subs	r2, r3, #1
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d044      	beq.n	8003b20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d140      	bne.n	8003b20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fc5f 	bl	8002366 <uxListRemove>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d115      	bne.n	8003ada <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	491f      	ldr	r1, [pc, #124]	; (8003b30 <xTaskPriorityDisinherit+0x104>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <xTaskPriorityDisinherit+0xae>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <xTaskPriorityDisinherit+0x108>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <xTaskPriorityDisinherit+0x108>)
 8003ad8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f1c3 0207 	rsb	r2, r3, #7
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	2201      	movs	r2, #1
 8003af4:	409a      	lsls	r2, r3
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <xTaskPriorityDisinherit+0x108>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <xTaskPriorityDisinherit+0x108>)
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <xTaskPriorityDisinherit+0x104>)
 8003b0e:	441a      	add	r2, r3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f7fe fbc8 	bl	80022ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b20:	697b      	ldr	r3, [r7, #20]
	}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000089c 	.word	0x2000089c
 8003b30:	200008a0 	.word	0x200008a0
 8003b34:	200009a4 	.word	0x200009a4

08003b38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b42:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fc09 	bl	8002366 <uxListRemove>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43da      	mvns	r2, r3
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d10a      	bne.n	8003b90 <prvAddCurrentTaskToDelayedList+0x58>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	481a      	ldr	r0, [pc, #104]	; (8003bf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b8a:	f7fe fb8f 	bl	80022ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b8e:	e026      	b.n	8003bde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d209      	bcs.n	8003bbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7fe fb9d 	bl	80022f4 <vListInsert>
}
 8003bba:	e010      	b.n	8003bde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7fe fb93 	bl	80022f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d202      	bcs.n	8003bde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003bd8:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6013      	str	r3, [r2, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200009a0 	.word	0x200009a0
 8003bec:	2000089c 	.word	0x2000089c
 8003bf0:	200009a4 	.word	0x200009a4
 8003bf4:	20000988 	.word	0x20000988
 8003bf8:	20000958 	.word	0x20000958
 8003bfc:	20000954 	.word	0x20000954
 8003c00:	200009bc 	.word	0x200009bc

08003c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c0e:	f000 fb47 	bl	80042a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <xTimerCreateTimerTask+0x80>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c22:	1d3a      	adds	r2, r7, #4
 8003c24:	f107 0108 	add.w	r1, r7, #8
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fc fae9 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	9202      	str	r2, [sp, #8]
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	460a      	mov	r2, r1
 8003c44:	4910      	ldr	r1, [pc, #64]	; (8003c88 <xTimerCreateTimerTask+0x84>)
 8003c46:	4811      	ldr	r0, [pc, #68]	; (8003c8c <xTimerCreateTimerTask+0x88>)
 8003c48:	f7ff f8a0 	bl	8002d8c <xTaskCreateStatic>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <xTimerCreateTimerTask+0x8c>)
 8003c50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <xTimerCreateTimerTask+0x8c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c7a:	697b      	ldr	r3, [r7, #20]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	200009f8 	.word	0x200009f8
 8003c88:	08005814 	.word	0x08005814
 8003c8c:	08003e81 	.word	0x08003e81
 8003c90:	200009fc 	.word	0x200009fc

08003c94 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003ca2:	2028      	movs	r0, #40	; 0x28
 8003ca4:	f000 fd88 	bl	80047b8 <pvPortMalloc>
 8003ca8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f805 	bl	8003cd6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003ccc:	697b      	ldr	r3, [r7, #20]
	}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	617b      	str	r3, [r7, #20]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01e      	beq.n	8003d44 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003d06:	f000 facb 	bl	80042a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	6a3a      	ldr	r2, [r7, #32]
 8003d20:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fab3 	bl	8002292 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003d44:	bf00      	nop
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	623b      	str	r3, [r7, #32]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02a      	beq.n	8003dd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	dc18      	bgt.n	8003dc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d94:	f7ff fe2c 	bl	80039f0 <xTaskGetSchedulerState>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f107 0114 	add.w	r1, r7, #20
 8003da6:	2300      	movs	r3, #0
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	f7fe fc07 	bl	80025bc <xQueueGenericSend>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24
 8003db0:	e012      	b.n	8003dd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f107 0114 	add.w	r1, r7, #20
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f7fe fbfd 	bl	80025bc <xQueueGenericSend>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8003dc4:	e008      	b.n	8003dd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f107 0114 	add.w	r1, r7, #20
 8003dce:	2300      	movs	r3, #0
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	f7fe fcf1 	bl	80027b8 <xQueueGenericSendFromISR>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200009f8 	.word	0x200009f8

08003de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <prvProcessExpiredTimer+0x94>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fab0 	bl	8002366 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d022      	beq.n	8003e5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	18d1      	adds	r1, r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	6978      	ldr	r0, [r7, #20]
 8003e22:	f000 f8d1 	bl	8003fc8 <prvInsertTimerInActiveList>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01f      	beq.n	8003e6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2300      	movs	r3, #0
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	2100      	movs	r1, #0
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff88 	bl	8003d4c <xTimerGenericCommand>
 8003e3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d113      	bne.n	8003e6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60fb      	str	r3, [r7, #12]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	4798      	blx	r3
}
 8003e74:	bf00      	nop
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	200009f0 	.word	0x200009f0

08003e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e88:	f107 0308 	add.w	r3, r7, #8
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f857 	bl	8003f40 <prvGetNextExpireTime>
 8003e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f803 	bl	8003ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e9e:	f000 f8d5 	bl	800404c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ea2:	e7f1      	b.n	8003e88 <prvTimerTask+0x8>

08003ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003eae:	f7ff f9bb 	bl	8003228 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f866 	bl	8003f88 <prvSampleTimeNow>
 8003ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d130      	bne.n	8003f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <prvProcessTimerOrBlockTask+0x3c>
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d806      	bhi.n	8003ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ed2:	f7ff f9b7 	bl	8003244 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff85 	bl	8003de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ede:	e024      	b.n	8003f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <prvProcessTimerOrBlockTask+0x90>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <prvProcessTimerOrBlockTask+0x50>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <prvProcessTimerOrBlockTask+0x52>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <prvProcessTimerOrBlockTask+0x94>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fe ff0d 	bl	8002d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f0a:	f7ff f99b 	bl	8003244 <xTaskResumeAll>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <prvProcessTimerOrBlockTask+0x98>)
 8003f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	f3bf 8f6f 	isb	sy
}
 8003f24:	e001      	b.n	8003f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f26:	f7ff f98d 	bl	8003244 <xTaskResumeAll>
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200009f4 	.word	0x200009f4
 8003f38:	200009f8 	.word	0x200009f8
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <prvGetNextExpireTime+0x44>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <prvGetNextExpireTime+0x16>
 8003f52:	2201      	movs	r2, #1
 8003f54:	e000      	b.n	8003f58 <prvGetNextExpireTime+0x18>
 8003f56:	2200      	movs	r2, #0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <prvGetNextExpireTime+0x44>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e001      	b.n	8003f74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	200009f0 	.word	0x200009f0

08003f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f90:	f7ff f9f4 	bl	800337c <xTaskGetTickCount>
 8003f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <prvSampleTimeNow+0x3c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d205      	bcs.n	8003fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fa0:	f000 f91a 	bl	80041d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e002      	b.n	8003fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fb2:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <prvSampleTimeNow+0x3c>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000a00 	.word	0x20000a00

08003fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d812      	bhi.n	8004014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad2      	subs	r2, r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e01b      	b.n	800403a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <prvInsertTimerInActiveList+0x7c>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7fe f971 	bl	80022f4 <vListInsert>
 8004012:	e012      	b.n	800403a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d206      	bcs.n	800402a <prvInsertTimerInActiveList+0x62>
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e007      	b.n	800403a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <prvInsertTimerInActiveList+0x80>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe f95d 	bl	80022f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800403a:	697b      	ldr	r3, [r7, #20]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	200009f4 	.word	0x200009f4
 8004048:	200009f0 	.word	0x200009f0

0800404c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004052:	e0ae      	b.n	80041b2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f2c0 80aa 	blt.w	80041b0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	3304      	adds	r3, #4
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe f97a 	bl	8002366 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff87 	bl	8003f88 <prvSampleTimeNow>
 800407a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b09      	cmp	r3, #9
 8004080:	f200 8097 	bhi.w	80041b2 <prvProcessReceivedCommands+0x166>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <prvProcessReceivedCommands+0x40>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040b5 	.word	0x080040b5
 8004098:	08004129 	.word	0x08004129
 800409c:	0800413d 	.word	0x0800413d
 80040a0:	08004187 	.word	0x08004187
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040b5 	.word	0x080040b5
 80040ac:	08004129 	.word	0x08004129
 80040b0:	0800413d 	.word	0x0800413d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	18d1      	adds	r1, r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040d4:	f7ff ff78 	bl	8003fc8 <prvInsertTimerInActiveList>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d069      	beq.n	80041b2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05e      	beq.n	80041b2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	441a      	add	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	2100      	movs	r1, #0
 8004104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004106:	f7ff fe21 	bl	8003d4c <xTimerGenericCommand>
 800410a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d14f      	bne.n	80041b2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	61bb      	str	r3, [r7, #24]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800413a:	e03a      	b.n	80041b2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	617b      	str	r3, [r7, #20]
}
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	18d1      	adds	r1, r2, r3
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004180:	f7ff ff22 	bl	8003fc8 <prvInsertTimerInActiveList>
					break;
 8004184:	e015      	b.n	80041b2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d103      	bne.n	800419c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004196:	f000 fbdb 	bl	8004950 <vPortFree>
 800419a:	e00a      	b.n	80041b2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041ae:	e000      	b.n	80041b2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80041b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <prvProcessReceivedCommands+0x188>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f107 0108 	add.w	r1, r7, #8
 80041ba:	2200      	movs	r2, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe fb97 	bl	80028f0 <xQueueReceive>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f af45 	bne.w	8004054 <prvProcessReceivedCommands+0x8>
	}
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200009f8 	.word	0x200009f8

080041d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041de:	e048      	b.n	8004272 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041e0:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <prvSwitchTimerLists+0xc0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <prvSwitchTimerLists+0xc0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe f8b4 	bl	8002366 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02e      	beq.n	8004272 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d90e      	bls.n	8004244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <prvSwitchTimerLists+0xc0>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7fe f859 	bl	80022f4 <vListInsert>
 8004242:	e016      	b.n	8004272 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	2100      	movs	r1, #0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff fd7c 	bl	8003d4c <xTimerGenericCommand>
 8004254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	603b      	str	r3, [r7, #0]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <prvSwitchTimerLists+0xc0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1b1      	bne.n	80041e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <prvSwitchTimerLists+0xc0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <prvSwitchTimerLists+0xc4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a04      	ldr	r2, [pc, #16]	; (8004298 <prvSwitchTimerLists+0xc0>)
 8004288:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <prvSwitchTimerLists+0xc4>)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6013      	str	r3, [r2, #0]
}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	200009f0 	.word	0x200009f0
 800429c:	200009f4 	.word	0x200009f4

080042a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042a6:	f000 f965 	bl	8004574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <prvCheckForValidListAndQueue+0x60>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d120      	bne.n	80042f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042b2:	4814      	ldr	r0, [pc, #80]	; (8004304 <prvCheckForValidListAndQueue+0x64>)
 80042b4:	f7fd ffcd 	bl	8002252 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042b8:	4813      	ldr	r0, [pc, #76]	; (8004308 <prvCheckForValidListAndQueue+0x68>)
 80042ba:	f7fd ffca 	bl	8002252 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <prvCheckForValidListAndQueue+0x6c>)
 80042c0:	4a10      	ldr	r2, [pc, #64]	; (8004304 <prvCheckForValidListAndQueue+0x64>)
 80042c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <prvCheckForValidListAndQueue+0x70>)
 80042c6:	4a10      	ldr	r2, [pc, #64]	; (8004308 <prvCheckForValidListAndQueue+0x68>)
 80042c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042ca:	2300      	movs	r3, #0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <prvCheckForValidListAndQueue+0x74>)
 80042d0:	4a11      	ldr	r2, [pc, #68]	; (8004318 <prvCheckForValidListAndQueue+0x78>)
 80042d2:	210c      	movs	r1, #12
 80042d4:	200a      	movs	r0, #10
 80042d6:	f7fe f8d9 	bl	800248c <xQueueGenericCreateStatic>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a08      	ldr	r2, [pc, #32]	; (8004300 <prvCheckForValidListAndQueue+0x60>)
 80042de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <prvCheckForValidListAndQueue+0x60>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <prvCheckForValidListAndQueue+0x60>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	490b      	ldr	r1, [pc, #44]	; (800431c <prvCheckForValidListAndQueue+0x7c>)
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fcee 	bl	8002cd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042f4:	f000 f96e 	bl	80045d4 <vPortExitCritical>
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200009f8 	.word	0x200009f8
 8004304:	200009c8 	.word	0x200009c8
 8004308:	200009dc 	.word	0x200009dc
 800430c:	200009f0 	.word	0x200009f0
 8004310:	200009f4 	.word	0x200009f4
 8004314:	20000a7c 	.word	0x20000a7c
 8004318:	20000a04 	.word	0x20000a04
 800431c:	0800581c 	.word	0x0800581c

08004320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b04      	subs	r3, #4
 8004330:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b04      	subs	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b04      	subs	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004350:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <pxPortInitialiseStack+0x64>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b14      	subs	r3, #20
 800435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b04      	subs	r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f06f 0202 	mvn.w	r2, #2
 800436e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b20      	subs	r3, #32
 8004374:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	08004389 	.word	0x08004389

08004388 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <prvTaskExitError+0x54>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d00a      	beq.n	80043b2 <prvTaskExitError+0x2a>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	60fb      	str	r3, [r7, #12]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <prvTaskExitError+0x28>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60bb      	str	r3, [r7, #8]
}
 80043c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043c6:	bf00      	nop
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0fc      	beq.n	80043c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <pxCurrentTCBConst2>)
 80043e2:	6819      	ldr	r1, [r3, #0]
 80043e4:	6808      	ldr	r0, [r1, #0]
 80043e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	f380 8809 	msr	PSP, r0
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f380 8811 	msr	BASEPRI, r0
 80043fa:	4770      	bx	lr
 80043fc:	f3af 8000 	nop.w

08004400 <pxCurrentTCBConst2>:
 8004400:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop

08004408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004408:	4808      	ldr	r0, [pc, #32]	; (800442c <prvPortStartFirstTask+0x24>)
 800440a:	6800      	ldr	r0, [r0, #0]
 800440c:	6800      	ldr	r0, [r0, #0]
 800440e:	f380 8808 	msr	MSP, r0
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f380 8814 	msr	CONTROL, r0
 800441a:	b662      	cpsie	i
 800441c:	b661      	cpsie	f
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	df00      	svc	0
 8004428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800442a:	bf00      	nop
 800442c:	e000ed08 	.word	0xe000ed08

08004430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004436:	4b46      	ldr	r3, [pc, #280]	; (8004550 <xPortStartScheduler+0x120>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a46      	ldr	r2, [pc, #280]	; (8004554 <xPortStartScheduler+0x124>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10a      	bne.n	8004456 <xPortStartScheduler+0x26>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <xPortStartScheduler+0x120>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3f      	ldr	r2, [pc, #252]	; (8004558 <xPortStartScheduler+0x128>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10a      	bne.n	8004476 <xPortStartScheduler+0x46>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60fb      	str	r3, [r7, #12]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004476:	4b39      	ldr	r3, [pc, #228]	; (800455c <xPortStartScheduler+0x12c>)
 8004478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b31      	ldr	r3, [pc, #196]	; (8004560 <xPortStartScheduler+0x130>)
 800449c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800449e:	4b31      	ldr	r3, [pc, #196]	; (8004564 <xPortStartScheduler+0x134>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044a4:	e009      	b.n	80044ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <xPortStartScheduler+0x134>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <xPortStartScheduler+0x134>)
 80044ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b80      	cmp	r3, #128	; 0x80
 80044c4:	d0ef      	beq.n	80044a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044c6:	4b27      	ldr	r3, [pc, #156]	; (8004564 <xPortStartScheduler+0x134>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1c3 0307 	rsb	r3, r3, #7
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00a      	beq.n	80044e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	60bb      	str	r3, [r7, #8]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <xPortStartScheduler+0x134>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <xPortStartScheduler+0x134>)
 80044f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <xPortStartScheduler+0x134>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044fa:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <xPortStartScheduler+0x134>)
 80044fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <xPortStartScheduler+0x138>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <xPortStartScheduler+0x138>)
 800450c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <xPortStartScheduler+0x138>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a14      	ldr	r2, [pc, #80]	; (8004568 <xPortStartScheduler+0x138>)
 8004518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800451c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800451e:	f000 f8dd 	bl	80046dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <xPortStartScheduler+0x13c>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004528:	f000 f8fc 	bl	8004724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800452c:	4b10      	ldr	r3, [pc, #64]	; (8004570 <xPortStartScheduler+0x140>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <xPortStartScheduler+0x140>)
 8004532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004538:	f7ff ff66 	bl	8004408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800453c:	f7fe ffe6 	bl	800350c <vTaskSwitchContext>
	prvTaskExitError();
 8004540:	f7ff ff22 	bl	8004388 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	e000ed00 	.word	0xe000ed00
 8004554:	410fc271 	.word	0x410fc271
 8004558:	410fc270 	.word	0x410fc270
 800455c:	e000e400 	.word	0xe000e400
 8004560:	20000ac4 	.word	0x20000ac4
 8004564:	20000ac8 	.word	0x20000ac8
 8004568:	e000ed20 	.word	0xe000ed20
 800456c:	2000000c 	.word	0x2000000c
 8004570:	e000ef34 	.word	0xe000ef34

08004574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	607b      	str	r3, [r7, #4]
}
 800458c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <vPortEnterCritical+0x58>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <vPortEnterCritical+0x58>)
 8004596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <vPortEnterCritical+0x58>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10f      	bne.n	80045c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <vPortEnterCritical+0x5c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	603b      	str	r3, [r7, #0]
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <vPortEnterCritical+0x4a>
	}
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <vPortExitCritical+0x50>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <vPortExitCritical+0x24>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	607b      	str	r3, [r7, #4]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <vPortExitCritical+0x50>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <vPortExitCritical+0x50>)
 8004600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <vPortExitCritical+0x50>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <vPortExitCritical+0x42>
 800460a:	2300      	movs	r3, #0
 800460c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f383 8811 	msr	BASEPRI, r3
}
 8004614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c
	...

08004630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004630:	f3ef 8009 	mrs	r0, PSP
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4b15      	ldr	r3, [pc, #84]	; (8004690 <pxCurrentTCBConst>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f01e 0f10 	tst.w	lr, #16
 8004640:	bf08      	it	eq
 8004642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004654:	f380 8811 	msr	BASEPRI, r0
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f7fe ff54 	bl	800350c <vTaskSwitchContext>
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f380 8811 	msr	BASEPRI, r0
 800466c:	bc09      	pop	{r0, r3}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004676:	f01e 0f10 	tst.w	lr, #16
 800467a:	bf08      	it	eq
 800467c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004680:	f380 8809 	msr	PSP, r0
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst>:
 8004690:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
}
 80046b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046b2:	f7fe fe73 	bl	800339c <xTaskIncrementTick>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <SysTick_Handler+0x40>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f383 8811 	msr	BASEPRI, r3
}
 80046ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <vPortSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <vPortSetupTimerInterrupt+0x40>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <vPortSetupTimerInterrupt+0x44>)
 80046fa:	3b01      	subs	r3, #1
 80046fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	10624dd3 	.word	0x10624dd3
 8004720:	e000e014 	.word	0xe000e014

08004724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004734 <vPortEnableVFP+0x10>
 8004728:	6801      	ldr	r1, [r0, #0]
 800472a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800472e:	6001      	str	r1, [r0, #0]
 8004730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004732:	bf00      	nop
 8004734:	e000ed88 	.word	0xe000ed88

08004738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800473e:	f3ef 8305 	mrs	r3, IPSR
 8004742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b0f      	cmp	r3, #15
 8004748:	d914      	bls.n	8004774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <vPortValidateInterruptPriority+0x70>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004754:	4b15      	ldr	r3, [pc, #84]	; (80047ac <vPortValidateInterruptPriority+0x74>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	7afa      	ldrb	r2, [r7, #11]
 800475a:	429a      	cmp	r2, r3
 800475c:	d20a      	bcs.n	8004774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <vPortValidateInterruptPriority+0x78>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <vPortValidateInterruptPriority+0x7c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d90a      	bls.n	800479a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	603b      	str	r3, [r7, #0]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <vPortValidateInterruptPriority+0x60>
	}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000e3f0 	.word	0xe000e3f0
 80047ac:	20000ac4 	.word	0x20000ac4
 80047b0:	e000ed0c 	.word	0xe000ed0c
 80047b4:	20000ac8 	.word	0x20000ac8

080047b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047c4:	f7fe fd30 	bl	8003228 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047c8:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <pvPortMalloc+0x180>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047d0:	f000 f920 	bl	8004a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047d4:	4b59      	ldr	r3, [pc, #356]	; (800493c <pvPortMalloc+0x184>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 8093 	bne.w	8004908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01d      	beq.n	8004824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047e8:	2208      	movs	r2, #8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d014      	beq.n	8004824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f023 0307 	bic.w	r3, r3, #7
 8004800:	3308      	adds	r3, #8
 8004802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <pvPortMalloc+0x6c>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	617b      	str	r3, [r7, #20]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06e      	beq.n	8004908 <pvPortMalloc+0x150>
 800482a:	4b45      	ldr	r3, [pc, #276]	; (8004940 <pvPortMalloc+0x188>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d869      	bhi.n	8004908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <pvPortMalloc+0x18c>)
 8004836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004838:	4b42      	ldr	r3, [pc, #264]	; (8004944 <pvPortMalloc+0x18c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800483e:	e004      	b.n	800484a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d903      	bls.n	800485c <pvPortMalloc+0xa4>
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f1      	bne.n	8004840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <pvPortMalloc+0x180>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	d050      	beq.n	8004908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2208      	movs	r2, #8
 800486c:	4413      	add	r3, r2
 800486e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	2308      	movs	r3, #8
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	429a      	cmp	r2, r3
 8004886:	d91f      	bls.n	80048c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <pvPortMalloc+0xf8>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	613b      	str	r3, [r7, #16]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048c2:	69b8      	ldr	r0, [r7, #24]
 80048c4:	f000 f908 	bl	8004ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <pvPortMalloc+0x188>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <pvPortMalloc+0x188>)
 80048d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <pvPortMalloc+0x188>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <pvPortMalloc+0x190>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d203      	bcs.n	80048ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <pvPortMalloc+0x188>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <pvPortMalloc+0x190>)
 80048e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <pvPortMalloc+0x184>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <pvPortMalloc+0x194>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	4a11      	ldr	r2, [pc, #68]	; (800494c <pvPortMalloc+0x194>)
 8004906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004908:	f7fe fc9c 	bl	8003244 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <pvPortMalloc+0x174>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60fb      	str	r3, [r7, #12]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <pvPortMalloc+0x172>
	return pvReturn;
 800492c:	69fb      	ldr	r3, [r7, #28]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3728      	adds	r7, #40	; 0x28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	2000168c 	.word	0x2000168c
 800493c:	200016a0 	.word	0x200016a0
 8004940:	20001690 	.word	0x20001690
 8004944:	20001684 	.word	0x20001684
 8004948:	20001694 	.word	0x20001694
 800494c:	20001698 	.word	0x20001698

08004950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04d      	beq.n	80049fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004962:	2308      	movs	r3, #8
 8004964:	425b      	negs	r3, r3
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <vPortFree+0xb8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <vPortFree+0x44>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60fb      	str	r3, [r7, #12]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <vPortFree+0x62>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60bb      	str	r3, [r7, #8]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <vPortFree+0xb8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01e      	beq.n	80049fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11a      	bne.n	80049fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <vPortFree+0xb8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049d8:	f7fe fc26 	bl	8003228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <vPortFree+0xbc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <vPortFree+0xbc>)
 80049e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ea:	6938      	ldr	r0, [r7, #16]
 80049ec:	f000 f874 	bl	8004ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <vPortFree+0xc0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <vPortFree+0xc0>)
 80049f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049fa:	f7fe fc23 	bl	8003244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200016a0 	.word	0x200016a0
 8004a0c:	20001690 	.word	0x20001690
 8004a10:	2000169c 	.word	0x2000169c

08004a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <prvHeapInit+0xac>)
 8004a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3307      	adds	r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0307 	bic.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <prvHeapInit+0xac>)
 8004a44:	4413      	add	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <prvHeapInit+0xb0>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <prvHeapInit+0xb0>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a60:	2208      	movs	r2, #8
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <prvHeapInit+0xb4>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <prvHeapInit+0xb8>)
 8004aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <prvHeapInit+0xbc>)
 8004aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvHeapInit+0xc0>)
 8004aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	20000acc 	.word	0x20000acc
 8004ac4:	20001684 	.word	0x20001684
 8004ac8:	2000168c 	.word	0x2000168c
 8004acc:	20001694 	.word	0x20001694
 8004ad0:	20001690 	.word	0x20001690
 8004ad4:	200016a0 	.word	0x200016a0

08004ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ae0:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <prvInsertBlockIntoFreeList+0xac>)
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e002      	b.n	8004aec <prvInsertBlockIntoFreeList+0x14>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d8f7      	bhi.n	8004ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d108      	bne.n	8004b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d118      	bne.n	8004b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <prvInsertBlockIntoFreeList+0xb0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d00d      	beq.n	8004b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e008      	b.n	8004b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <prvInsertBlockIntoFreeList+0xb0>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e003      	b.n	8004b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d002      	beq.n	8004b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20001684 	.word	0x20001684
 8004b88:	2000168c 	.word	0x2000168c

08004b8c <__errno>:
 8004b8c:	4b01      	ldr	r3, [pc, #4]	; (8004b94 <__errno+0x8>)
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000010 	.word	0x20000010

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba6:	6083      	str	r3, [r0, #8]
 8004ba8:	8181      	strh	r1, [r0, #12]
 8004baa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bac:	81c2      	strh	r2, [r0, #14]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	; 0x5c
 8004bb6:	f000 f91a 	bl	8004dee <memset>
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std+0x38>)
 8004bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x3c>)
 8004bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x40>)
 8004bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x44>)
 8004bc8:	6224      	str	r4, [r4, #32]
 8004bca:	6323      	str	r3, [r4, #48]	; 0x30
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	08005109 	.word	0x08005109
 8004bd4:	0800512b 	.word	0x0800512b
 8004bd8:	08005163 	.word	0x08005163
 8004bdc:	08005187 	.word	0x08005187

08004be0 <_cleanup_r>:
 8004be0:	4901      	ldr	r1, [pc, #4]	; (8004be8 <_cleanup_r+0x8>)
 8004be2:	f000 b8af 	b.w	8004d44 <_fwalk_reent>
 8004be6:	bf00      	nop
 8004be8:	08005461 	.word	0x08005461

08004bec <__sfmoreglue>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2268      	movs	r2, #104	; 0x68
 8004bf0:	1e4d      	subs	r5, r1, #1
 8004bf2:	4355      	muls	r5, r2
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bfa:	f000 f921 	bl	8004e40 <_malloc_r>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	b140      	cbz	r0, 8004c14 <__sfmoreglue+0x28>
 8004c02:	2100      	movs	r1, #0
 8004c04:	e9c0 1600 	strd	r1, r6, [r0]
 8004c08:	300c      	adds	r0, #12
 8004c0a:	60a0      	str	r0, [r4, #8]
 8004c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c10:	f000 f8ed 	bl	8004dee <memset>
 8004c14:	4620      	mov	r0, r4
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <__sfp_lock_acquire>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__sfp_lock_acquire+0x8>)
 8004c1a:	f000 b8d8 	b.w	8004dce <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	200016a5 	.word	0x200016a5

08004c24 <__sfp_lock_release>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__sfp_lock_release+0x8>)
 8004c26:	f000 b8d3 	b.w	8004dd0 <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	200016a5 	.word	0x200016a5

08004c30 <__sinit_lock_acquire>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__sinit_lock_acquire+0x8>)
 8004c32:	f000 b8cc 	b.w	8004dce <__retarget_lock_acquire_recursive>
 8004c36:	bf00      	nop
 8004c38:	200016a6 	.word	0x200016a6

08004c3c <__sinit_lock_release>:
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <__sinit_lock_release+0x8>)
 8004c3e:	f000 b8c7 	b.w	8004dd0 <__retarget_lock_release_recursive>
 8004c42:	bf00      	nop
 8004c44:	200016a6 	.word	0x200016a6

08004c48 <__sinit>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	f7ff fff0 	bl	8004c30 <__sinit_lock_acquire>
 8004c50:	69a3      	ldr	r3, [r4, #24]
 8004c52:	b11b      	cbz	r3, 8004c5c <__sinit+0x14>
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	f7ff bff0 	b.w	8004c3c <__sinit_lock_release>
 8004c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c60:	6523      	str	r3, [r4, #80]	; 0x50
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <__sinit+0x68>)
 8004c64:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <__sinit+0x6c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	bf04      	itt	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	61a3      	streq	r3, [r4, #24]
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 f820 	bl	8004cb8 <__sfp>
 8004c78:	6060      	str	r0, [r4, #4]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f81c 	bl	8004cb8 <__sfp>
 8004c80:	60a0      	str	r0, [r4, #8]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f818 	bl	8004cb8 <__sfp>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60e0      	str	r0, [r4, #12]
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	6860      	ldr	r0, [r4, #4]
 8004c90:	f7ff ff82 	bl	8004b98 <std>
 8004c94:	68a0      	ldr	r0, [r4, #8]
 8004c96:	2201      	movs	r2, #1
 8004c98:	2109      	movs	r1, #9
 8004c9a:	f7ff ff7d 	bl	8004b98 <std>
 8004c9e:	68e0      	ldr	r0, [r4, #12]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	2112      	movs	r1, #18
 8004ca4:	f7ff ff78 	bl	8004b98 <std>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	61a3      	str	r3, [r4, #24]
 8004cac:	e7d2      	b.n	8004c54 <__sinit+0xc>
 8004cae:	bf00      	nop
 8004cb0:	080058cc 	.word	0x080058cc
 8004cb4:	08004be1 	.word	0x08004be1

08004cb8 <__sfp>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	4607      	mov	r7, r0
 8004cbc:	f7ff ffac 	bl	8004c18 <__sfp_lock_acquire>
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <__sfp+0x84>)
 8004cc2:	681e      	ldr	r6, [r3, #0]
 8004cc4:	69b3      	ldr	r3, [r6, #24]
 8004cc6:	b913      	cbnz	r3, 8004cce <__sfp+0x16>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7ff ffbd 	bl	8004c48 <__sinit>
 8004cce:	3648      	adds	r6, #72	; 0x48
 8004cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	d503      	bpl.n	8004ce0 <__sfp+0x28>
 8004cd8:	6833      	ldr	r3, [r6, #0]
 8004cda:	b30b      	cbz	r3, 8004d20 <__sfp+0x68>
 8004cdc:	6836      	ldr	r6, [r6, #0]
 8004cde:	e7f7      	b.n	8004cd0 <__sfp+0x18>
 8004ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ce4:	b9d5      	cbnz	r5, 8004d1c <__sfp+0x64>
 8004ce6:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <__sfp+0x88>)
 8004ce8:	60e3      	str	r3, [r4, #12]
 8004cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cee:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf0:	f000 f86c 	bl	8004dcc <__retarget_lock_init_recursive>
 8004cf4:	f7ff ff96 	bl	8004c24 <__sfp_lock_release>
 8004cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d00:	6025      	str	r5, [r4, #0]
 8004d02:	61a5      	str	r5, [r4, #24]
 8004d04:	2208      	movs	r2, #8
 8004d06:	4629      	mov	r1, r5
 8004d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d0c:	f000 f86f 	bl	8004dee <memset>
 8004d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d18:	4620      	mov	r0, r4
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1c:	3468      	adds	r4, #104	; 0x68
 8004d1e:	e7d9      	b.n	8004cd4 <__sfp+0x1c>
 8004d20:	2104      	movs	r1, #4
 8004d22:	4638      	mov	r0, r7
 8004d24:	f7ff ff62 	bl	8004bec <__sfmoreglue>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	6030      	str	r0, [r6, #0]
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1d5      	bne.n	8004cdc <__sfp+0x24>
 8004d30:	f7ff ff78 	bl	8004c24 <__sfp_lock_release>
 8004d34:	230c      	movs	r3, #12
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	e7ee      	b.n	8004d18 <__sfp+0x60>
 8004d3a:	bf00      	nop
 8004d3c:	080058cc 	.word	0x080058cc
 8004d40:	ffff0001 	.word	0xffff0001

08004d44 <_fwalk_reent>:
 8004d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d48:	4606      	mov	r6, r0
 8004d4a:	4688      	mov	r8, r1
 8004d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d50:	2700      	movs	r7, #0
 8004d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d56:	f1b9 0901 	subs.w	r9, r9, #1
 8004d5a:	d505      	bpl.n	8004d68 <_fwalk_reent+0x24>
 8004d5c:	6824      	ldr	r4, [r4, #0]
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	d1f7      	bne.n	8004d52 <_fwalk_reent+0xe>
 8004d62:	4638      	mov	r0, r7
 8004d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d68:	89ab      	ldrh	r3, [r5, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d907      	bls.n	8004d7e <_fwalk_reent+0x3a>
 8004d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d72:	3301      	adds	r3, #1
 8004d74:	d003      	beq.n	8004d7e <_fwalk_reent+0x3a>
 8004d76:	4629      	mov	r1, r5
 8004d78:	4630      	mov	r0, r6
 8004d7a:	47c0      	blx	r8
 8004d7c:	4307      	orrs	r7, r0
 8004d7e:	3568      	adds	r5, #104	; 0x68
 8004d80:	e7e9      	b.n	8004d56 <_fwalk_reent+0x12>
	...

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4d0d      	ldr	r5, [pc, #52]	; (8004dbc <__libc_init_array+0x38>)
 8004d88:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8a:	1b64      	subs	r4, r4, r5
 8004d8c:	10a4      	asrs	r4, r4, #2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	4d0b      	ldr	r5, [pc, #44]	; (8004dc4 <__libc_init_array+0x40>)
 8004d96:	4c0c      	ldr	r4, [pc, #48]	; (8004dc8 <__libc_init_array+0x44>)
 8004d98:	f000 fca2 	bl	80056e0 <_init>
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	2600      	movs	r6, #0
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	080058d0 	.word	0x080058d0
 8004dc0:	080058d0 	.word	0x080058d0
 8004dc4:	080058d0 	.word	0x080058d0
 8004dc8:	080058d4 	.word	0x080058d4

08004dcc <__retarget_lock_init_recursive>:
 8004dcc:	4770      	bx	lr

08004dce <__retarget_lock_acquire_recursive>:
 8004dce:	4770      	bx	lr

08004dd0 <__retarget_lock_release_recursive>:
 8004dd0:	4770      	bx	lr

08004dd2 <memcpy>:
 8004dd2:	440a      	add	r2, r1
 8004dd4:	4291      	cmp	r1, r2
 8004dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dda:	d100      	bne.n	8004dde <memcpy+0xc>
 8004ddc:	4770      	bx	lr
 8004dde:	b510      	push	{r4, lr}
 8004de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de8:	4291      	cmp	r1, r2
 8004dea:	d1f9      	bne.n	8004de0 <memcpy+0xe>
 8004dec:	bd10      	pop	{r4, pc}

08004dee <memset>:
 8004dee:	4402      	add	r2, r0
 8004df0:	4603      	mov	r3, r0
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d100      	bne.n	8004df8 <memset+0xa>
 8004df6:	4770      	bx	lr
 8004df8:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfc:	e7f9      	b.n	8004df2 <memset+0x4>
	...

08004e00 <sbrk_aligned>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4e0e      	ldr	r6, [pc, #56]	; (8004e3c <sbrk_aligned+0x3c>)
 8004e04:	460c      	mov	r4, r1
 8004e06:	6831      	ldr	r1, [r6, #0]
 8004e08:	4605      	mov	r5, r0
 8004e0a:	b911      	cbnz	r1, 8004e12 <sbrk_aligned+0x12>
 8004e0c:	f000 f96c 	bl	80050e8 <_sbrk_r>
 8004e10:	6030      	str	r0, [r6, #0]
 8004e12:	4621      	mov	r1, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 f967 	bl	80050e8 <_sbrk_r>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	d00a      	beq.n	8004e34 <sbrk_aligned+0x34>
 8004e1e:	1cc4      	adds	r4, r0, #3
 8004e20:	f024 0403 	bic.w	r4, r4, #3
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d007      	beq.n	8004e38 <sbrk_aligned+0x38>
 8004e28:	1a21      	subs	r1, r4, r0
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f95c 	bl	80050e8 <_sbrk_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d101      	bne.n	8004e38 <sbrk_aligned+0x38>
 8004e34:	f04f 34ff 	mov.w	r4, #4294967295
 8004e38:	4620      	mov	r0, r4
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	200016ac 	.word	0x200016ac

08004e40 <_malloc_r>:
 8004e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e44:	1ccd      	adds	r5, r1, #3
 8004e46:	f025 0503 	bic.w	r5, r5, #3
 8004e4a:	3508      	adds	r5, #8
 8004e4c:	2d0c      	cmp	r5, #12
 8004e4e:	bf38      	it	cc
 8004e50:	250c      	movcc	r5, #12
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	4607      	mov	r7, r0
 8004e56:	db01      	blt.n	8004e5c <_malloc_r+0x1c>
 8004e58:	42a9      	cmp	r1, r5
 8004e5a:	d905      	bls.n	8004e68 <_malloc_r+0x28>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	2600      	movs	r6, #0
 8004e62:	4630      	mov	r0, r6
 8004e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e68:	4e2e      	ldr	r6, [pc, #184]	; (8004f24 <_malloc_r+0xe4>)
 8004e6a:	f000 fbad 	bl	80055c8 <__malloc_lock>
 8004e6e:	6833      	ldr	r3, [r6, #0]
 8004e70:	461c      	mov	r4, r3
 8004e72:	bb34      	cbnz	r4, 8004ec2 <_malloc_r+0x82>
 8004e74:	4629      	mov	r1, r5
 8004e76:	4638      	mov	r0, r7
 8004e78:	f7ff ffc2 	bl	8004e00 <sbrk_aligned>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	4604      	mov	r4, r0
 8004e80:	d14d      	bne.n	8004f1e <_malloc_r+0xde>
 8004e82:	6834      	ldr	r4, [r6, #0]
 8004e84:	4626      	mov	r6, r4
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	d140      	bne.n	8004f0c <_malloc_r+0xcc>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4638      	mov	r0, r7
 8004e90:	eb04 0803 	add.w	r8, r4, r3
 8004e94:	f000 f928 	bl	80050e8 <_sbrk_r>
 8004e98:	4580      	cmp	r8, r0
 8004e9a:	d13a      	bne.n	8004f12 <_malloc_r+0xd2>
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	3503      	adds	r5, #3
 8004ea0:	1a6d      	subs	r5, r5, r1
 8004ea2:	f025 0503 	bic.w	r5, r5, #3
 8004ea6:	3508      	adds	r5, #8
 8004ea8:	2d0c      	cmp	r5, #12
 8004eaa:	bf38      	it	cc
 8004eac:	250c      	movcc	r5, #12
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff ffa5 	bl	8004e00 <sbrk_aligned>
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d02b      	beq.n	8004f12 <_malloc_r+0xd2>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	442b      	add	r3, r5
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	e00e      	b.n	8004ee0 <_malloc_r+0xa0>
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	1b52      	subs	r2, r2, r5
 8004ec6:	d41e      	bmi.n	8004f06 <_malloc_r+0xc6>
 8004ec8:	2a0b      	cmp	r2, #11
 8004eca:	d916      	bls.n	8004efa <_malloc_r+0xba>
 8004ecc:	1961      	adds	r1, r4, r5
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	6025      	str	r5, [r4, #0]
 8004ed2:	bf18      	it	ne
 8004ed4:	6059      	strne	r1, [r3, #4]
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	bf08      	it	eq
 8004eda:	6031      	streq	r1, [r6, #0]
 8004edc:	5162      	str	r2, [r4, r5]
 8004ede:	604b      	str	r3, [r1, #4]
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f104 060b 	add.w	r6, r4, #11
 8004ee6:	f000 fb75 	bl	80055d4 <__malloc_unlock>
 8004eea:	f026 0607 	bic.w	r6, r6, #7
 8004eee:	1d23      	adds	r3, r4, #4
 8004ef0:	1af2      	subs	r2, r6, r3
 8004ef2:	d0b6      	beq.n	8004e62 <_malloc_r+0x22>
 8004ef4:	1b9b      	subs	r3, r3, r6
 8004ef6:	50a3      	str	r3, [r4, r2]
 8004ef8:	e7b3      	b.n	8004e62 <_malloc_r+0x22>
 8004efa:	6862      	ldr	r2, [r4, #4]
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	bf0c      	ite	eq
 8004f00:	6032      	streq	r2, [r6, #0]
 8004f02:	605a      	strne	r2, [r3, #4]
 8004f04:	e7ec      	b.n	8004ee0 <_malloc_r+0xa0>
 8004f06:	4623      	mov	r3, r4
 8004f08:	6864      	ldr	r4, [r4, #4]
 8004f0a:	e7b2      	b.n	8004e72 <_malloc_r+0x32>
 8004f0c:	4634      	mov	r4, r6
 8004f0e:	6876      	ldr	r6, [r6, #4]
 8004f10:	e7b9      	b.n	8004e86 <_malloc_r+0x46>
 8004f12:	230c      	movs	r3, #12
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4638      	mov	r0, r7
 8004f18:	f000 fb5c 	bl	80055d4 <__malloc_unlock>
 8004f1c:	e7a1      	b.n	8004e62 <_malloc_r+0x22>
 8004f1e:	6025      	str	r5, [r4, #0]
 8004f20:	e7de      	b.n	8004ee0 <_malloc_r+0xa0>
 8004f22:	bf00      	nop
 8004f24:	200016a8 	.word	0x200016a8

08004f28 <_puts_r>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	460e      	mov	r6, r1
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	b118      	cbz	r0, 8004f38 <_puts_r+0x10>
 8004f30:	6983      	ldr	r3, [r0, #24]
 8004f32:	b90b      	cbnz	r3, 8004f38 <_puts_r+0x10>
 8004f34:	f7ff fe88 	bl	8004c48 <__sinit>
 8004f38:	69ab      	ldr	r3, [r5, #24]
 8004f3a:	68ac      	ldr	r4, [r5, #8]
 8004f3c:	b913      	cbnz	r3, 8004f44 <_puts_r+0x1c>
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7ff fe82 	bl	8004c48 <__sinit>
 8004f44:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <_puts_r+0xd0>)
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d120      	bne.n	8004f8c <_puts_r+0x64>
 8004f4a:	686c      	ldr	r4, [r5, #4]
 8004f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f4e:	07db      	lsls	r3, r3, #31
 8004f50:	d405      	bmi.n	8004f5e <_puts_r+0x36>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	0598      	lsls	r0, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_puts_r+0x36>
 8004f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f5a:	f7ff ff38 	bl	8004dce <__retarget_lock_acquire_recursive>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	0719      	lsls	r1, r3, #28
 8004f62:	d51d      	bpl.n	8004fa0 <_puts_r+0x78>
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	b1db      	cbz	r3, 8004fa0 <_puts_r+0x78>
 8004f68:	3e01      	subs	r6, #1
 8004f6a:	68a3      	ldr	r3, [r4, #8]
 8004f6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f70:	3b01      	subs	r3, #1
 8004f72:	60a3      	str	r3, [r4, #8]
 8004f74:	bb39      	cbnz	r1, 8004fc6 <_puts_r+0x9e>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da38      	bge.n	8004fec <_puts_r+0xc4>
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	210a      	movs	r1, #10
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 f906 	bl	8005190 <__swbuf_r>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d011      	beq.n	8004fac <_puts_r+0x84>
 8004f88:	250a      	movs	r5, #10
 8004f8a:	e011      	b.n	8004fb0 <_puts_r+0x88>
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <_puts_r+0xd4>)
 8004f8e:	429c      	cmp	r4, r3
 8004f90:	d101      	bne.n	8004f96 <_puts_r+0x6e>
 8004f92:	68ac      	ldr	r4, [r5, #8]
 8004f94:	e7da      	b.n	8004f4c <_puts_r+0x24>
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <_puts_r+0xd8>)
 8004f98:	429c      	cmp	r4, r3
 8004f9a:	bf08      	it	eq
 8004f9c:	68ec      	ldreq	r4, [r5, #12]
 8004f9e:	e7d5      	b.n	8004f4c <_puts_r+0x24>
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 f958 	bl	8005258 <__swsetup_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d0dd      	beq.n	8004f68 <_puts_r+0x40>
 8004fac:	f04f 35ff 	mov.w	r5, #4294967295
 8004fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb2:	07da      	lsls	r2, r3, #31
 8004fb4:	d405      	bmi.n	8004fc2 <_puts_r+0x9a>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	059b      	lsls	r3, r3, #22
 8004fba:	d402      	bmi.n	8004fc2 <_puts_r+0x9a>
 8004fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fbe:	f7ff ff07 	bl	8004dd0 <__retarget_lock_release_recursive>
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da04      	bge.n	8004fd4 <_puts_r+0xac>
 8004fca:	69a2      	ldr	r2, [r4, #24]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	dc06      	bgt.n	8004fde <_puts_r+0xb6>
 8004fd0:	290a      	cmp	r1, #10
 8004fd2:	d004      	beq.n	8004fde <_puts_r+0xb6>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	7019      	strb	r1, [r3, #0]
 8004fdc:	e7c5      	b.n	8004f6a <_puts_r+0x42>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f8d5 	bl	8005190 <__swbuf_r>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d1bf      	bne.n	8004f6a <_puts_r+0x42>
 8004fea:	e7df      	b.n	8004fac <_puts_r+0x84>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	250a      	movs	r5, #10
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	6022      	str	r2, [r4, #0]
 8004ff4:	701d      	strb	r5, [r3, #0]
 8004ff6:	e7db      	b.n	8004fb0 <_puts_r+0x88>
 8004ff8:	0800588c 	.word	0x0800588c
 8004ffc:	080058ac 	.word	0x080058ac
 8005000:	0800586c 	.word	0x0800586c

08005004 <puts>:
 8005004:	4b02      	ldr	r3, [pc, #8]	; (8005010 <puts+0xc>)
 8005006:	4601      	mov	r1, r0
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f7ff bf8d 	b.w	8004f28 <_puts_r>
 800500e:	bf00      	nop
 8005010:	20000010 	.word	0x20000010

08005014 <cleanup_glue>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	6809      	ldr	r1, [r1, #0]
 800501a:	4605      	mov	r5, r0
 800501c:	b109      	cbz	r1, 8005022 <cleanup_glue+0xe>
 800501e:	f7ff fff9 	bl	8005014 <cleanup_glue>
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800502a:	f000 bad9 	b.w	80055e0 <_free_r>
	...

08005030 <_reclaim_reent>:
 8005030:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <_reclaim_reent+0xb4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4283      	cmp	r3, r0
 8005036:	b570      	push	{r4, r5, r6, lr}
 8005038:	4604      	mov	r4, r0
 800503a:	d051      	beq.n	80050e0 <_reclaim_reent+0xb0>
 800503c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800503e:	b143      	cbz	r3, 8005052 <_reclaim_reent+0x22>
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d14a      	bne.n	80050dc <_reclaim_reent+0xac>
 8005046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	b111      	cbz	r1, 8005052 <_reclaim_reent+0x22>
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fac7 	bl	80055e0 <_free_r>
 8005052:	6961      	ldr	r1, [r4, #20]
 8005054:	b111      	cbz	r1, 800505c <_reclaim_reent+0x2c>
 8005056:	4620      	mov	r0, r4
 8005058:	f000 fac2 	bl	80055e0 <_free_r>
 800505c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800505e:	b111      	cbz	r1, 8005066 <_reclaim_reent+0x36>
 8005060:	4620      	mov	r0, r4
 8005062:	f000 fabd 	bl	80055e0 <_free_r>
 8005066:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005068:	b111      	cbz	r1, 8005070 <_reclaim_reent+0x40>
 800506a:	4620      	mov	r0, r4
 800506c:	f000 fab8 	bl	80055e0 <_free_r>
 8005070:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005072:	b111      	cbz	r1, 800507a <_reclaim_reent+0x4a>
 8005074:	4620      	mov	r0, r4
 8005076:	f000 fab3 	bl	80055e0 <_free_r>
 800507a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800507c:	b111      	cbz	r1, 8005084 <_reclaim_reent+0x54>
 800507e:	4620      	mov	r0, r4
 8005080:	f000 faae 	bl	80055e0 <_free_r>
 8005084:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005086:	b111      	cbz	r1, 800508e <_reclaim_reent+0x5e>
 8005088:	4620      	mov	r0, r4
 800508a:	f000 faa9 	bl	80055e0 <_free_r>
 800508e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005090:	b111      	cbz	r1, 8005098 <_reclaim_reent+0x68>
 8005092:	4620      	mov	r0, r4
 8005094:	f000 faa4 	bl	80055e0 <_free_r>
 8005098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800509a:	b111      	cbz	r1, 80050a2 <_reclaim_reent+0x72>
 800509c:	4620      	mov	r0, r4
 800509e:	f000 fa9f 	bl	80055e0 <_free_r>
 80050a2:	69a3      	ldr	r3, [r4, #24]
 80050a4:	b1e3      	cbz	r3, 80050e0 <_reclaim_reent+0xb0>
 80050a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050a8:	4620      	mov	r0, r4
 80050aa:	4798      	blx	r3
 80050ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80050ae:	b1b9      	cbz	r1, 80050e0 <_reclaim_reent+0xb0>
 80050b0:	4620      	mov	r0, r4
 80050b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050b6:	f7ff bfad 	b.w	8005014 <cleanup_glue>
 80050ba:	5949      	ldr	r1, [r1, r5]
 80050bc:	b941      	cbnz	r1, 80050d0 <_reclaim_reent+0xa0>
 80050be:	3504      	adds	r5, #4
 80050c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c2:	2d80      	cmp	r5, #128	; 0x80
 80050c4:	68d9      	ldr	r1, [r3, #12]
 80050c6:	d1f8      	bne.n	80050ba <_reclaim_reent+0x8a>
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 fa89 	bl	80055e0 <_free_r>
 80050ce:	e7ba      	b.n	8005046 <_reclaim_reent+0x16>
 80050d0:	680e      	ldr	r6, [r1, #0]
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 fa84 	bl	80055e0 <_free_r>
 80050d8:	4631      	mov	r1, r6
 80050da:	e7ef      	b.n	80050bc <_reclaim_reent+0x8c>
 80050dc:	2500      	movs	r5, #0
 80050de:	e7ef      	b.n	80050c0 <_reclaim_reent+0x90>
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	bf00      	nop
 80050e4:	20000010 	.word	0x20000010

080050e8 <_sbrk_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_sbrk_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fb fb82 	bl	80007fc <_sbrk>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_sbrk_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_sbrk_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200016b0 	.word	0x200016b0

08005108 <__sread>:
 8005108:	b510      	push	{r4, lr}
 800510a:	460c      	mov	r4, r1
 800510c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005110:	f000 fab2 	bl	8005678 <_read_r>
 8005114:	2800      	cmp	r0, #0
 8005116:	bfab      	itete	ge
 8005118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800511a:	89a3      	ldrhlt	r3, [r4, #12]
 800511c:	181b      	addge	r3, r3, r0
 800511e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005122:	bfac      	ite	ge
 8005124:	6563      	strge	r3, [r4, #84]	; 0x54
 8005126:	81a3      	strhlt	r3, [r4, #12]
 8005128:	bd10      	pop	{r4, pc}

0800512a <__swrite>:
 800512a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512e:	461f      	mov	r7, r3
 8005130:	898b      	ldrh	r3, [r1, #12]
 8005132:	05db      	lsls	r3, r3, #23
 8005134:	4605      	mov	r5, r0
 8005136:	460c      	mov	r4, r1
 8005138:	4616      	mov	r6, r2
 800513a:	d505      	bpl.n	8005148 <__swrite+0x1e>
 800513c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005140:	2302      	movs	r3, #2
 8005142:	2200      	movs	r2, #0
 8005144:	f000 f9c8 	bl	80054d8 <_lseek_r>
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	4632      	mov	r2, r6
 8005156:	463b      	mov	r3, r7
 8005158:	4628      	mov	r0, r5
 800515a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800515e:	f000 b869 	b.w	8005234 <_write_r>

08005162 <__sseek>:
 8005162:	b510      	push	{r4, lr}
 8005164:	460c      	mov	r4, r1
 8005166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516a:	f000 f9b5 	bl	80054d8 <_lseek_r>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	bf15      	itete	ne
 8005174:	6560      	strne	r0, [r4, #84]	; 0x54
 8005176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800517a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800517e:	81a3      	strheq	r3, [r4, #12]
 8005180:	bf18      	it	ne
 8005182:	81a3      	strhne	r3, [r4, #12]
 8005184:	bd10      	pop	{r4, pc}

08005186 <__sclose>:
 8005186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518a:	f000 b8d3 	b.w	8005334 <_close_r>
	...

08005190 <__swbuf_r>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	460e      	mov	r6, r1
 8005194:	4614      	mov	r4, r2
 8005196:	4605      	mov	r5, r0
 8005198:	b118      	cbz	r0, 80051a2 <__swbuf_r+0x12>
 800519a:	6983      	ldr	r3, [r0, #24]
 800519c:	b90b      	cbnz	r3, 80051a2 <__swbuf_r+0x12>
 800519e:	f7ff fd53 	bl	8004c48 <__sinit>
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <__swbuf_r+0x98>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d12b      	bne.n	8005200 <__swbuf_r+0x70>
 80051a8:	686c      	ldr	r4, [r5, #4]
 80051aa:	69a3      	ldr	r3, [r4, #24]
 80051ac:	60a3      	str	r3, [r4, #8]
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	071a      	lsls	r2, r3, #28
 80051b2:	d52f      	bpl.n	8005214 <__swbuf_r+0x84>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	b36b      	cbz	r3, 8005214 <__swbuf_r+0x84>
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	6820      	ldr	r0, [r4, #0]
 80051bc:	1ac0      	subs	r0, r0, r3
 80051be:	6963      	ldr	r3, [r4, #20]
 80051c0:	b2f6      	uxtb	r6, r6
 80051c2:	4283      	cmp	r3, r0
 80051c4:	4637      	mov	r7, r6
 80051c6:	dc04      	bgt.n	80051d2 <__swbuf_r+0x42>
 80051c8:	4621      	mov	r1, r4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f948 	bl	8005460 <_fflush_r>
 80051d0:	bb30      	cbnz	r0, 8005220 <__swbuf_r+0x90>
 80051d2:	68a3      	ldr	r3, [r4, #8]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	60a3      	str	r3, [r4, #8]
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	6022      	str	r2, [r4, #0]
 80051de:	701e      	strb	r6, [r3, #0]
 80051e0:	6963      	ldr	r3, [r4, #20]
 80051e2:	3001      	adds	r0, #1
 80051e4:	4283      	cmp	r3, r0
 80051e6:	d004      	beq.n	80051f2 <__swbuf_r+0x62>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	07db      	lsls	r3, r3, #31
 80051ec:	d506      	bpl.n	80051fc <__swbuf_r+0x6c>
 80051ee:	2e0a      	cmp	r6, #10
 80051f0:	d104      	bne.n	80051fc <__swbuf_r+0x6c>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f933 	bl	8005460 <_fflush_r>
 80051fa:	b988      	cbnz	r0, 8005220 <__swbuf_r+0x90>
 80051fc:	4638      	mov	r0, r7
 80051fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <__swbuf_r+0x9c>)
 8005202:	429c      	cmp	r4, r3
 8005204:	d101      	bne.n	800520a <__swbuf_r+0x7a>
 8005206:	68ac      	ldr	r4, [r5, #8]
 8005208:	e7cf      	b.n	80051aa <__swbuf_r+0x1a>
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <__swbuf_r+0xa0>)
 800520c:	429c      	cmp	r4, r3
 800520e:	bf08      	it	eq
 8005210:	68ec      	ldreq	r4, [r5, #12]
 8005212:	e7ca      	b.n	80051aa <__swbuf_r+0x1a>
 8005214:	4621      	mov	r1, r4
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f81e 	bl	8005258 <__swsetup_r>
 800521c:	2800      	cmp	r0, #0
 800521e:	d0cb      	beq.n	80051b8 <__swbuf_r+0x28>
 8005220:	f04f 37ff 	mov.w	r7, #4294967295
 8005224:	e7ea      	b.n	80051fc <__swbuf_r+0x6c>
 8005226:	bf00      	nop
 8005228:	0800588c 	.word	0x0800588c
 800522c:	080058ac 	.word	0x080058ac
 8005230:	0800586c 	.word	0x0800586c

08005234 <_write_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	; (8005254 <_write_r+0x20>)
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fb f81f 	bl	8000286 <_write>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_write_r+0x1e>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_write_r+0x1e>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	200016b0 	.word	0x200016b0

08005258 <__swsetup_r>:
 8005258:	4b32      	ldr	r3, [pc, #200]	; (8005324 <__swsetup_r+0xcc>)
 800525a:	b570      	push	{r4, r5, r6, lr}
 800525c:	681d      	ldr	r5, [r3, #0]
 800525e:	4606      	mov	r6, r0
 8005260:	460c      	mov	r4, r1
 8005262:	b125      	cbz	r5, 800526e <__swsetup_r+0x16>
 8005264:	69ab      	ldr	r3, [r5, #24]
 8005266:	b913      	cbnz	r3, 800526e <__swsetup_r+0x16>
 8005268:	4628      	mov	r0, r5
 800526a:	f7ff fced 	bl	8004c48 <__sinit>
 800526e:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <__swsetup_r+0xd0>)
 8005270:	429c      	cmp	r4, r3
 8005272:	d10f      	bne.n	8005294 <__swsetup_r+0x3c>
 8005274:	686c      	ldr	r4, [r5, #4]
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800527c:	0719      	lsls	r1, r3, #28
 800527e:	d42c      	bmi.n	80052da <__swsetup_r+0x82>
 8005280:	06dd      	lsls	r5, r3, #27
 8005282:	d411      	bmi.n	80052a8 <__swsetup_r+0x50>
 8005284:	2309      	movs	r3, #9
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	f04f 30ff 	mov.w	r0, #4294967295
 8005292:	e03e      	b.n	8005312 <__swsetup_r+0xba>
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <__swsetup_r+0xd4>)
 8005296:	429c      	cmp	r4, r3
 8005298:	d101      	bne.n	800529e <__swsetup_r+0x46>
 800529a:	68ac      	ldr	r4, [r5, #8]
 800529c:	e7eb      	b.n	8005276 <__swsetup_r+0x1e>
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <__swsetup_r+0xd8>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	bf08      	it	eq
 80052a4:	68ec      	ldreq	r4, [r5, #12]
 80052a6:	e7e6      	b.n	8005276 <__swsetup_r+0x1e>
 80052a8:	0758      	lsls	r0, r3, #29
 80052aa:	d512      	bpl.n	80052d2 <__swsetup_r+0x7a>
 80052ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ae:	b141      	cbz	r1, 80052c2 <__swsetup_r+0x6a>
 80052b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b4:	4299      	cmp	r1, r3
 80052b6:	d002      	beq.n	80052be <__swsetup_r+0x66>
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 f991 	bl	80055e0 <_free_r>
 80052be:	2300      	movs	r3, #0
 80052c0:	6363      	str	r3, [r4, #52]	; 0x34
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f043 0308 	orr.w	r3, r3, #8
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	b94b      	cbnz	r3, 80052f2 <__swsetup_r+0x9a>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e8:	d003      	beq.n	80052f2 <__swsetup_r+0x9a>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4630      	mov	r0, r6
 80052ee:	f000 f92b 	bl	8005548 <__smakebuf_r>
 80052f2:	89a0      	ldrh	r0, [r4, #12]
 80052f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f8:	f010 0301 	ands.w	r3, r0, #1
 80052fc:	d00a      	beq.n	8005314 <__swsetup_r+0xbc>
 80052fe:	2300      	movs	r3, #0
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	6963      	ldr	r3, [r4, #20]
 8005304:	425b      	negs	r3, r3
 8005306:	61a3      	str	r3, [r4, #24]
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	b943      	cbnz	r3, 800531e <__swsetup_r+0xc6>
 800530c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005310:	d1ba      	bne.n	8005288 <__swsetup_r+0x30>
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	0781      	lsls	r1, r0, #30
 8005316:	bf58      	it	pl
 8005318:	6963      	ldrpl	r3, [r4, #20]
 800531a:	60a3      	str	r3, [r4, #8]
 800531c:	e7f4      	b.n	8005308 <__swsetup_r+0xb0>
 800531e:	2000      	movs	r0, #0
 8005320:	e7f7      	b.n	8005312 <__swsetup_r+0xba>
 8005322:	bf00      	nop
 8005324:	20000010 	.word	0x20000010
 8005328:	0800588c 	.word	0x0800588c
 800532c:	080058ac 	.word	0x080058ac
 8005330:	0800586c 	.word	0x0800586c

08005334 <_close_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	; (8005350 <_close_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fb fa27 	bl	8000792 <_close>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_close_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_close_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	200016b0 	.word	0x200016b0

08005354 <__sflush_r>:
 8005354:	898a      	ldrh	r2, [r1, #12]
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	4605      	mov	r5, r0
 800535c:	0710      	lsls	r0, r2, #28
 800535e:	460c      	mov	r4, r1
 8005360:	d458      	bmi.n	8005414 <__sflush_r+0xc0>
 8005362:	684b      	ldr	r3, [r1, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dc05      	bgt.n	8005374 <__sflush_r+0x20>
 8005368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	dc02      	bgt.n	8005374 <__sflush_r+0x20>
 800536e:	2000      	movs	r0, #0
 8005370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005376:	2e00      	cmp	r6, #0
 8005378:	d0f9      	beq.n	800536e <__sflush_r+0x1a>
 800537a:	2300      	movs	r3, #0
 800537c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005380:	682f      	ldr	r7, [r5, #0]
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	d032      	beq.n	80053ec <__sflush_r+0x98>
 8005386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	075a      	lsls	r2, r3, #29
 800538c:	d505      	bpl.n	800539a <__sflush_r+0x46>
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	1ac0      	subs	r0, r0, r3
 8005392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005394:	b10b      	cbz	r3, 800539a <__sflush_r+0x46>
 8005396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005398:	1ac0      	subs	r0, r0, r3
 800539a:	2300      	movs	r3, #0
 800539c:	4602      	mov	r2, r0
 800539e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053a0:	6a21      	ldr	r1, [r4, #32]
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b0      	blx	r6
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	d106      	bne.n	80053ba <__sflush_r+0x66>
 80053ac:	6829      	ldr	r1, [r5, #0]
 80053ae:	291d      	cmp	r1, #29
 80053b0:	d82c      	bhi.n	800540c <__sflush_r+0xb8>
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <__sflush_r+0x108>)
 80053b4:	40ca      	lsrs	r2, r1
 80053b6:	07d6      	lsls	r6, r2, #31
 80053b8:	d528      	bpl.n	800540c <__sflush_r+0xb8>
 80053ba:	2200      	movs	r2, #0
 80053bc:	6062      	str	r2, [r4, #4]
 80053be:	04d9      	lsls	r1, r3, #19
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	d504      	bpl.n	80053d0 <__sflush_r+0x7c>
 80053c6:	1c42      	adds	r2, r0, #1
 80053c8:	d101      	bne.n	80053ce <__sflush_r+0x7a>
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	b903      	cbnz	r3, 80053d0 <__sflush_r+0x7c>
 80053ce:	6560      	str	r0, [r4, #84]	; 0x54
 80053d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d2:	602f      	str	r7, [r5, #0]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d0ca      	beq.n	800536e <__sflush_r+0x1a>
 80053d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053dc:	4299      	cmp	r1, r3
 80053de:	d002      	beq.n	80053e6 <__sflush_r+0x92>
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f8fd 	bl	80055e0 <_free_r>
 80053e6:	2000      	movs	r0, #0
 80053e8:	6360      	str	r0, [r4, #52]	; 0x34
 80053ea:	e7c1      	b.n	8005370 <__sflush_r+0x1c>
 80053ec:	6a21      	ldr	r1, [r4, #32]
 80053ee:	2301      	movs	r3, #1
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b0      	blx	r6
 80053f4:	1c41      	adds	r1, r0, #1
 80053f6:	d1c7      	bne.n	8005388 <__sflush_r+0x34>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0c4      	beq.n	8005388 <__sflush_r+0x34>
 80053fe:	2b1d      	cmp	r3, #29
 8005400:	d001      	beq.n	8005406 <__sflush_r+0xb2>
 8005402:	2b16      	cmp	r3, #22
 8005404:	d101      	bne.n	800540a <__sflush_r+0xb6>
 8005406:	602f      	str	r7, [r5, #0]
 8005408:	e7b1      	b.n	800536e <__sflush_r+0x1a>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	e7ad      	b.n	8005370 <__sflush_r+0x1c>
 8005414:	690f      	ldr	r7, [r1, #16]
 8005416:	2f00      	cmp	r7, #0
 8005418:	d0a9      	beq.n	800536e <__sflush_r+0x1a>
 800541a:	0793      	lsls	r3, r2, #30
 800541c:	680e      	ldr	r6, [r1, #0]
 800541e:	bf08      	it	eq
 8005420:	694b      	ldreq	r3, [r1, #20]
 8005422:	600f      	str	r7, [r1, #0]
 8005424:	bf18      	it	ne
 8005426:	2300      	movne	r3, #0
 8005428:	eba6 0807 	sub.w	r8, r6, r7
 800542c:	608b      	str	r3, [r1, #8]
 800542e:	f1b8 0f00 	cmp.w	r8, #0
 8005432:	dd9c      	ble.n	800536e <__sflush_r+0x1a>
 8005434:	6a21      	ldr	r1, [r4, #32]
 8005436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005438:	4643      	mov	r3, r8
 800543a:	463a      	mov	r2, r7
 800543c:	4628      	mov	r0, r5
 800543e:	47b0      	blx	r6
 8005440:	2800      	cmp	r0, #0
 8005442:	dc06      	bgt.n	8005452 <__sflush_r+0xfe>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	e78e      	b.n	8005370 <__sflush_r+0x1c>
 8005452:	4407      	add	r7, r0
 8005454:	eba8 0800 	sub.w	r8, r8, r0
 8005458:	e7e9      	b.n	800542e <__sflush_r+0xda>
 800545a:	bf00      	nop
 800545c:	20400001 	.word	0x20400001

08005460 <_fflush_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	690b      	ldr	r3, [r1, #16]
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b913      	cbnz	r3, 8005470 <_fflush_r+0x10>
 800546a:	2500      	movs	r5, #0
 800546c:	4628      	mov	r0, r5
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	b118      	cbz	r0, 800547a <_fflush_r+0x1a>
 8005472:	6983      	ldr	r3, [r0, #24]
 8005474:	b90b      	cbnz	r3, 800547a <_fflush_r+0x1a>
 8005476:	f7ff fbe7 	bl	8004c48 <__sinit>
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <_fflush_r+0x6c>)
 800547c:	429c      	cmp	r4, r3
 800547e:	d11b      	bne.n	80054b8 <_fflush_r+0x58>
 8005480:	686c      	ldr	r4, [r5, #4]
 8005482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ef      	beq.n	800546a <_fflush_r+0xa>
 800548a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800548c:	07d0      	lsls	r0, r2, #31
 800548e:	d404      	bmi.n	800549a <_fflush_r+0x3a>
 8005490:	0599      	lsls	r1, r3, #22
 8005492:	d402      	bmi.n	800549a <_fflush_r+0x3a>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f7ff fc9a 	bl	8004dce <__retarget_lock_acquire_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	4621      	mov	r1, r4
 800549e:	f7ff ff59 	bl	8005354 <__sflush_r>
 80054a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a4:	07da      	lsls	r2, r3, #31
 80054a6:	4605      	mov	r5, r0
 80054a8:	d4e0      	bmi.n	800546c <_fflush_r+0xc>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d4dd      	bmi.n	800546c <_fflush_r+0xc>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f7ff fc8d 	bl	8004dd0 <__retarget_lock_release_recursive>
 80054b6:	e7d9      	b.n	800546c <_fflush_r+0xc>
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <_fflush_r+0x70>)
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d101      	bne.n	80054c2 <_fflush_r+0x62>
 80054be:	68ac      	ldr	r4, [r5, #8]
 80054c0:	e7df      	b.n	8005482 <_fflush_r+0x22>
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <_fflush_r+0x74>)
 80054c4:	429c      	cmp	r4, r3
 80054c6:	bf08      	it	eq
 80054c8:	68ec      	ldreq	r4, [r5, #12]
 80054ca:	e7da      	b.n	8005482 <_fflush_r+0x22>
 80054cc:	0800588c 	.word	0x0800588c
 80054d0:	080058ac 	.word	0x080058ac
 80054d4:	0800586c 	.word	0x0800586c

080054d8 <_lseek_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	; (80054f8 <_lseek_r+0x20>)
 80054dc:	4604      	mov	r4, r0
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fb f97a 	bl	80007e0 <_lseek>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_lseek_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_lseek_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200016b0 	.word	0x200016b0

080054fc <__swhatbuf_r>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	460e      	mov	r6, r1
 8005500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005504:	2900      	cmp	r1, #0
 8005506:	b096      	sub	sp, #88	; 0x58
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	da08      	bge.n	8005520 <__swhatbuf_r+0x24>
 800550e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	061a      	lsls	r2, r3, #24
 8005518:	d410      	bmi.n	800553c <__swhatbuf_r+0x40>
 800551a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551e:	e00e      	b.n	800553e <__swhatbuf_r+0x42>
 8005520:	466a      	mov	r2, sp
 8005522:	f000 f8bb 	bl	800569c <_fstat_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	dbf1      	blt.n	800550e <__swhatbuf_r+0x12>
 800552a:	9a01      	ldr	r2, [sp, #4]
 800552c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005534:	425a      	negs	r2, r3
 8005536:	415a      	adcs	r2, r3
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	e7ee      	b.n	800551a <__swhatbuf_r+0x1e>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	2000      	movs	r0, #0
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	b016      	add	sp, #88	; 0x58
 8005544:	bd70      	pop	{r4, r5, r6, pc}
	...

08005548 <__smakebuf_r>:
 8005548:	898b      	ldrh	r3, [r1, #12]
 800554a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800554c:	079d      	lsls	r5, r3, #30
 800554e:	4606      	mov	r6, r0
 8005550:	460c      	mov	r4, r1
 8005552:	d507      	bpl.n	8005564 <__smakebuf_r+0x1c>
 8005554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	2301      	movs	r3, #1
 800555e:	6163      	str	r3, [r4, #20]
 8005560:	b002      	add	sp, #8
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	ab01      	add	r3, sp, #4
 8005566:	466a      	mov	r2, sp
 8005568:	f7ff ffc8 	bl	80054fc <__swhatbuf_r>
 800556c:	9900      	ldr	r1, [sp, #0]
 800556e:	4605      	mov	r5, r0
 8005570:	4630      	mov	r0, r6
 8005572:	f7ff fc65 	bl	8004e40 <_malloc_r>
 8005576:	b948      	cbnz	r0, 800558c <__smakebuf_r+0x44>
 8005578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557c:	059a      	lsls	r2, r3, #22
 800557e:	d4ef      	bmi.n	8005560 <__smakebuf_r+0x18>
 8005580:	f023 0303 	bic.w	r3, r3, #3
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	e7e3      	b.n	8005554 <__smakebuf_r+0xc>
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <__smakebuf_r+0x7c>)
 800558e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	6020      	str	r0, [r4, #0]
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	6163      	str	r3, [r4, #20]
 800559e:	9b01      	ldr	r3, [sp, #4]
 80055a0:	6120      	str	r0, [r4, #16]
 80055a2:	b15b      	cbz	r3, 80055bc <__smakebuf_r+0x74>
 80055a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 f889 	bl	80056c0 <_isatty_r>
 80055ae:	b128      	cbz	r0, 80055bc <__smakebuf_r+0x74>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	81a3      	strh	r3, [r4, #12]
 80055bc:	89a0      	ldrh	r0, [r4, #12]
 80055be:	4305      	orrs	r5, r0
 80055c0:	81a5      	strh	r5, [r4, #12]
 80055c2:	e7cd      	b.n	8005560 <__smakebuf_r+0x18>
 80055c4:	08004be1 	.word	0x08004be1

080055c8 <__malloc_lock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__malloc_lock+0x8>)
 80055ca:	f7ff bc00 	b.w	8004dce <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	200016a4 	.word	0x200016a4

080055d4 <__malloc_unlock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__malloc_unlock+0x8>)
 80055d6:	f7ff bbfb 	b.w	8004dd0 <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	200016a4 	.word	0x200016a4

080055e0 <_free_r>:
 80055e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055e2:	2900      	cmp	r1, #0
 80055e4:	d044      	beq.n	8005670 <_free_r+0x90>
 80055e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ea:	9001      	str	r0, [sp, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f1a1 0404 	sub.w	r4, r1, #4
 80055f2:	bfb8      	it	lt
 80055f4:	18e4      	addlt	r4, r4, r3
 80055f6:	f7ff ffe7 	bl	80055c8 <__malloc_lock>
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <_free_r+0x94>)
 80055fc:	9801      	ldr	r0, [sp, #4]
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	b933      	cbnz	r3, 8005610 <_free_r+0x30>
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	6014      	str	r4, [r2, #0]
 8005606:	b003      	add	sp, #12
 8005608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800560c:	f7ff bfe2 	b.w	80055d4 <__malloc_unlock>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d908      	bls.n	8005626 <_free_r+0x46>
 8005614:	6825      	ldr	r5, [r4, #0]
 8005616:	1961      	adds	r1, r4, r5
 8005618:	428b      	cmp	r3, r1
 800561a:	bf01      	itttt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	1949      	addeq	r1, r1, r5
 8005622:	6021      	streq	r1, [r4, #0]
 8005624:	e7ed      	b.n	8005602 <_free_r+0x22>
 8005626:	461a      	mov	r2, r3
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b10b      	cbz	r3, 8005630 <_free_r+0x50>
 800562c:	42a3      	cmp	r3, r4
 800562e:	d9fa      	bls.n	8005626 <_free_r+0x46>
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	1855      	adds	r5, r2, r1
 8005634:	42a5      	cmp	r5, r4
 8005636:	d10b      	bne.n	8005650 <_free_r+0x70>
 8005638:	6824      	ldr	r4, [r4, #0]
 800563a:	4421      	add	r1, r4
 800563c:	1854      	adds	r4, r2, r1
 800563e:	42a3      	cmp	r3, r4
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	d1e0      	bne.n	8005606 <_free_r+0x26>
 8005644:	681c      	ldr	r4, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	6053      	str	r3, [r2, #4]
 800564a:	4421      	add	r1, r4
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	e7da      	b.n	8005606 <_free_r+0x26>
 8005650:	d902      	bls.n	8005658 <_free_r+0x78>
 8005652:	230c      	movs	r3, #12
 8005654:	6003      	str	r3, [r0, #0]
 8005656:	e7d6      	b.n	8005606 <_free_r+0x26>
 8005658:	6825      	ldr	r5, [r4, #0]
 800565a:	1961      	adds	r1, r4, r5
 800565c:	428b      	cmp	r3, r1
 800565e:	bf04      	itt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	bf04      	itt	eq
 8005668:	1949      	addeq	r1, r1, r5
 800566a:	6021      	streq	r1, [r4, #0]
 800566c:	6054      	str	r4, [r2, #4]
 800566e:	e7ca      	b.n	8005606 <_free_r+0x26>
 8005670:	b003      	add	sp, #12
 8005672:	bd30      	pop	{r4, r5, pc}
 8005674:	200016a8 	.word	0x200016a8

08005678 <_read_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	; (8005698 <_read_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb f866 	bl	8000758 <_read>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_read_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_read_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	200016b0 	.word	0x200016b0

0800569c <_fstat_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d07      	ldr	r5, [pc, #28]	; (80056bc <_fstat_r+0x20>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	f7fb f87e 	bl	80007aa <_fstat>
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	d102      	bne.n	80056b8 <_fstat_r+0x1c>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	b103      	cbz	r3, 80056b8 <_fstat_r+0x1c>
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd38      	pop	{r3, r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	200016b0 	.word	0x200016b0

080056c0 <_isatty_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	; (80056dc <_isatty_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fb f87d 	bl	80007ca <_isatty>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_isatty_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_isatty_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	200016b0 	.word	0x200016b0

080056e0 <_init>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

080056ec <_fini>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr
