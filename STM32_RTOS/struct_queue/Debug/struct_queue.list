
struct_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800549c  0800549c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800549c  0800549c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001050  20000074  08005518  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010c4  08005518  000210c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e72  00000000  00000000  00033bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00036a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00037c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bd4  00000000  00000000  00038ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c8c  00000000  00000000  00061874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7552  00000000  00000000  00074500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ba52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  0016baa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800526c 	.word	0x0800526c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800526c 	.word	0x0800526c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d013      	beq.n	80002e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00b      	beq.n	80002e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002cc:	e000      	b.n	80002d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <_write>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "stdio.h"
int _write(int file,char *ptr,int len)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b086      	sub	sp, #24
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	60b9      	str	r1, [r7, #8]
 80002fc:	607a      	str	r2, [r7, #4]
    int i=0;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	e009      	b.n	800031c <_write+0x2a>
    	ITM_SendChar((*ptr++));
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffc7 	bl	80002a4 <ITM_SendChar>
    for(i=0;i<len;i++)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697a      	ldr	r2, [r7, #20]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	dbf1      	blt.n	8000308 <_write+0x16>
    return len;
 8000324:	687b      	ldr	r3, [r7, #4]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3718      	adds	r7, #24
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b096      	sub	sp, #88	; 0x58
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000336:	f000 faf1 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033a:	f000 f853 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033e:	f000 f8a3 	bl	8000488 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendertaskHP */
  osThreadDef(sendertaskHP, senderfunHP, 2, 0, 128);
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <main+0x98>)
 8000344:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000348:	461d      	mov	r5, r3
 800034a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendertaskHPHandle = osThreadCreate(osThread(sendertaskHP), NULL);
 8000356:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f001 ff32 	bl	80021c6 <osThreadCreate>
 8000362:	4603      	mov	r3, r0
 8000364:	4a19      	ldr	r2, [pc, #100]	; (80003cc <main+0x9c>)
 8000366:	6013      	str	r3, [r2, #0]

  /* definition and creation of senderTaskLP */
  osThreadDef(senderTaskLP, SenderfunLP, osPriorityAboveNormal, 0, 128);
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <main+0xa0>)
 800036a:	f107 0420 	add.w	r4, r7, #32
 800036e:	461d      	mov	r5, r3
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  senderTaskLPHandle = osThreadCreate(osThread(senderTaskLP), NULL);
 800037c:	f107 0320 	add.w	r3, r7, #32
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f001 ff1f 	bl	80021c6 <osThreadCreate>
 8000388:	4603      	mov	r3, r0
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <main+0xa4>)
 800038c:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiverTask */
  osThreadDef(receiverTask, receiverfun, 1, 0, 128);
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <main+0xa8>)
 8000390:	1d3c      	adds	r4, r7, #4
 8000392:	461d      	mov	r5, r3
 8000394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800039c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiverTaskHandle = osThreadCreate(osThread(receiverTask), NULL);
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 ff0e 	bl	80021c6 <osThreadCreate>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <main+0xac>)
 80003ae:	6013      	str	r3, [r2, #0]

  queue=xQueueCreate(2,sizeof(struct my_struct));
 80003b0:	2200      	movs	r2, #0
 80003b2:	210c      	movs	r1, #12
 80003b4:	2002      	movs	r0, #2
 80003b6:	f002 f86f 	bl	8002498 <xQueueGenericCreate>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <main+0xb0>)
 80003be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003c0:	f001 fefa 	bl	80021b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <main+0x94>
 80003c6:	bf00      	nop
 80003c8:	080052b4 	.word	0x080052b4
 80003cc:	20000344 	.word	0x20000344
 80003d0:	080052d0 	.word	0x080052d0
 80003d4:	20000348 	.word	0x20000348
 80003d8:	080052ec 	.word	0x080052ec
 80003dc:	2000034c 	.word	0x2000034c
 80003e0:	20000350 	.word	0x20000350

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b096      	sub	sp, #88	; 0x58
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	2244      	movs	r2, #68	; 0x44
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f003 ffbb 	bl	800436e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	463b      	mov	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000406:	f44f 7000 	mov.w	r0, #512	; 0x200
 800040a:	f000 fd79 	bl	8000f00 <HAL_PWREx_ControlVoltageScaling>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000414:	f000 f8f9 	bl	800060a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000418:	2302      	movs	r3, #2
 800041a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000420:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000422:	2310      	movs	r3, #16
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000432:	230a      	movs	r3, #10
 8000434:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000436:	2307      	movs	r3, #7
 8000438:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800043a:	2302      	movs	r3, #2
 800043c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800043e:	2302      	movs	r3, #2
 8000440:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fdb0 	bl	8000fac <HAL_RCC_OscConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000452:	f000 f8da 	bl	800060a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000456:	230f      	movs	r3, #15
 8000458:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045a:	2303      	movs	r3, #3
 800045c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	2104      	movs	r1, #4
 800046e:	4618      	mov	r0, r3
 8000470:	f001 f978 	bl	8001764 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800047a:	f000 f8c6 	bl	800060a <Error_Handler>
  }
}
 800047e:	bf00      	nop
 8000480:	3758      	adds	r7, #88	; 0x58
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_GPIO_Init+0x78>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a17      	ldr	r2, [pc, #92]	; (8000500 <MX_GPIO_Init+0x78>)
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_GPIO_Init+0x78>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0304 	and.w	r3, r3, #4
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_GPIO_Init+0x78>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a11      	ldr	r2, [pc, #68]	; (8000500 <MX_GPIO_Init+0x78>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_GPIO_Init+0x78>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2120      	movs	r1, #32
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fced 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004da:	2320      	movs	r3, #32
 80004dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4619      	mov	r1, r3
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f000 fb34 	bl	8000b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <senderfunHP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_senderfun */
void senderfunHP(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	struct my_struct a;
  /* Infinite loop */
  for(;;)
  {
	  printf("sender HP task execute \n");
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <senderfunHP+0x40>)
 800050e:	f004 f851 	bl	80045b4 <puts>
	  a.age=50;
 8000512:	2332      	movs	r3, #50	; 0x32
 8000514:	60fb      	str	r3, [r7, #12]
	  a.name="murali";
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <senderfunHP+0x44>)
 8000518:	613b      	str	r3, [r7, #16]
	  a.rollno=6;
 800051a:	2306      	movs	r3, #6
 800051c:	82bb      	strh	r3, [r7, #20]
	  if(xQueueSend(queue,&a,50)==pdPASS)
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <senderfunHP+0x48>)
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	f107 010c 	add.w	r1, r7, #12
 8000526:	2300      	movs	r3, #0
 8000528:	2232      	movs	r2, #50	; 0x32
 800052a:	f002 f80f 	bl	800254c <xQueueGenericSend>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d102      	bne.n	800053a <senderfunHP+0x36>
	  {
		  printf("data send from HP\n");
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <senderfunHP+0x4c>)
 8000536:	f004 f83d 	bl	80045b4 <puts>

	  }

    vTaskDelay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053e:	f002 fc9d 	bl	8002e7c <vTaskDelay>
	  printf("sender HP task execute \n");
 8000542:	e7e3      	b.n	800050c <senderfunHP+0x8>
 8000544:	08005308 	.word	0x08005308
 8000548:	08005320 	.word	0x08005320
 800054c:	20000350 	.word	0x20000350
 8000550:	08005328 	.word	0x08005328

08000554 <SenderfunLP>:
  }
  /* USER CODE END 5 */
}
void SenderfunLP(void const * argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	struct my_struct a;
	  /* Infinite loop */
	  for(;;)
	  {
		  printf("sender LP task execute \n");
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <SenderfunLP+0x40>)
 800055e:	f004 f829 	bl	80045b4 <puts>
		  a.age=75;
 8000562:	234b      	movs	r3, #75	; 0x4b
 8000564:	60fb      	str	r3, [r7, #12]
		  a.name="gaja";
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <SenderfunLP+0x44>)
 8000568:	613b      	str	r3, [r7, #16]
		  a.rollno=12;
 800056a:	230c      	movs	r3, #12
 800056c:	82bb      	strh	r3, [r7, #20]
		  if(xQueueSend(queue,&a,50)==pdPASS)
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SenderfunLP+0x48>)
 8000570:	6818      	ldr	r0, [r3, #0]
 8000572:	f107 010c 	add.w	r1, r7, #12
 8000576:	2300      	movs	r3, #0
 8000578:	2232      	movs	r2, #50	; 0x32
 800057a:	f001 ffe7 	bl	800254c <xQueueGenericSend>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d102      	bne.n	800058a <SenderfunLP+0x36>
		  {
			  printf("data send from LP\n");
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <SenderfunLP+0x4c>)
 8000586:	f004 f815 	bl	80045b4 <puts>

		  }

	    vTaskDelay(1000);
 800058a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058e:	f002 fc75 	bl	8002e7c <vTaskDelay>
		  printf("sender LP task execute \n");
 8000592:	e7e3      	b.n	800055c <SenderfunLP+0x8>
 8000594:	0800533c 	.word	0x0800533c
 8000598:	08005354 	.word	0x08005354
 800059c:	20000350 	.word	0x20000350
 80005a0:	0800535c 	.word	0x0800535c

080005a4 <receiverfun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receiverfun */
void receiverfun(void const * argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receiverfun */
  /* Infinite loop */
	struct my_struct R;
  for(;;)
  {
	  printf("reciver function is execute\n");
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <receiverfun+0x3c>)
 80005ae:	f004 f801 	bl	80045b4 <puts>
	  if(xQueueReceive(queue, &R, 50)==pdPASS)
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <receiverfun+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f107 010c 	add.w	r1, r7, #12
 80005ba:	2232      	movs	r2, #50	; 0x32
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 f8c3 	bl	8002748 <xQueueReceive>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d105      	bne.n	80005d4 <receiverfun+0x30>
	  {
		 printf("NAME = %s    age = %d roll_no = %d \n",R.name,R.age,R.rollno);
 80005c8:	6939      	ldr	r1, [r7, #16]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	8abb      	ldrh	r3, [r7, #20]
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <receiverfun+0x44>)
 80005d0:	f003 ff6a 	bl	80044a8 <iprintf>
	  }
	  vTaskDelay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f002 fc50 	bl	8002e7c <vTaskDelay>
	  printf("reciver function is execute\n");
 80005dc:	e7e6      	b.n	80005ac <receiverfun+0x8>
 80005de:	bf00      	nop
 80005e0:	08005370 	.word	0x08005370
 80005e4:	20000350 	.word	0x20000350
 80005e8:	0800538c 	.word	0x0800538c

080005ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005fc:	d101      	bne.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005fe:	f000 f9ad 	bl	800095c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060e:	b672      	cpsid	i
}
 8000610:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000612:	e7fe      	b.n	8000612 <Error_Handler+0x8>

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_MspInit+0x4c>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_MspInit+0x4c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6613      	str	r3, [r2, #96]	; 0x60
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_MspInit+0x4c>)
 8000628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_MspInit+0x4c>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_MspInit+0x4c>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	6593      	str	r3, [r2, #88]	; 0x58
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_MspInit+0x4c>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	210f      	movs	r1, #15
 800064e:	f06f 0001 	mvn.w	r0, #1
 8000652:	f000 fa5b 	bl	8000b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08e      	sub	sp, #56	; 0x38
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <HAL_InitTick+0xe0>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	4a33      	ldr	r2, [pc, #204]	; (8000744 <HAL_InitTick+0xe0>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6593      	str	r3, [r2, #88]	; 0x58
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <HAL_InitTick+0xe0>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800068a:	f107 0210 	add.w	r2, r7, #16
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fa13 	bl	8001ac0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d103      	bne.n	80006ac <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a4:	f001 f9f6 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 80006a8:	6378      	str	r0, [r7, #52]	; 0x34
 80006aa:	e004      	b.n	80006b6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006ac:	f001 f9f2 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 80006b0:	4603      	mov	r3, r0
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b8:	4a23      	ldr	r2, [pc, #140]	; (8000748 <HAL_InitTick+0xe4>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	0c9b      	lsrs	r3, r3, #18
 80006c0:	3b01      	subs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <HAL_InitTick+0xe8>)
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <HAL_InitTick+0xe8>)
 80006ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006d4:	4a1d      	ldr	r2, [pc, #116]	; (800074c <HAL_InitTick+0xe8>)
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_InitTick+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_InitTick+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_InitTick+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80006ec:	4817      	ldr	r0, [pc, #92]	; (800074c <HAL_InitTick+0xe8>)
 80006ee:	f001 fa79 	bl	8001be4 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11b      	bne.n	8000738 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <HAL_InitTick+0xe8>)
 8000702:	f001 fad1 	bl	8001ca8 <HAL_TIM_Base_Start_IT>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800070c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000710:	2b00      	cmp	r3, #0
 8000712:	d111      	bne.n	8000738 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	201c      	movs	r0, #28
 8000716:	f000 fa15 	bl	8000b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d808      	bhi.n	8000732 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	201c      	movs	r0, #28
 8000726:	f000 f9f1 	bl	8000b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <HAL_InitTick+0xec>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	e002      	b.n	8000738 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000738:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800073c:	4618      	mov	r0, r3
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	431bde83 	.word	0x431bde83
 800074c:	20000354 	.word	0x20000354
 8000750:	20000004 	.word	0x20000004

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <TIM2_IRQHandler+0x10>)
 8000786:	f001 faff 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000354 	.word	0x20000354

08000794 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a6:	f3af 8000 	nop.w
 80007aa:	4601      	mov	r1, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf0      	blt.n	80007a6 <_read+0x12>
  }

  return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f6:	605a      	str	r2, [r3, #4]
  return 0;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_isatty>:

int _isatty(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <_sbrk+0x5c>)
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <_sbrk+0x60>)
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x64>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <_sbrk+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d207      	bcs.n	8000878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000868:	f003 fc50 	bl	800410c <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	220c      	movs	r2, #12
 8000870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	e009      	b.n	800088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <_sbrk+0x64>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20018000 	.word	0x20018000
 8000898:	00000400 	.word	0x00000400
 800089c:	200003a0 	.word	0x200003a0
 80008a0:	200010c8 	.word	0x200010c8

080008a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008cc:	f7ff ffea 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f003 fd05 	bl	8004304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008fa:	f7ff fd19 	bl	8000330 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000900:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800090c:	080054a4 	.word	0x080054a4
  ldr r2, =_sbss
 8000910:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000914:	200010c4 	.word	0x200010c4

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_Init+0x3c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_Init+0x3c>)
 800092c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000930:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000932:	2003      	movs	r0, #3
 8000934:	f000 f8df 	bl	8000af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000938:	200f      	movs	r0, #15
 800093a:	f7ff fe93 	bl	8000664 <HAL_InitTick>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	e001      	b.n	800094e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800094a:	f7ff fe63 	bl	8000614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800094e:	79fb      	ldrb	r3, [r7, #7]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	200003a4 	.word	0x200003a4

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200003a4 	.word	0x200003a4

0800099c <__NVIC_SetPriorityGrouping>:
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ff4c 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1e:	f7ff ff61 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	6978      	ldr	r0, [r7, #20]
 8000b2a:	f7ff ffb1 	bl	8000a90 <NVIC_EncodePriority>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff80 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff54 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e17f      	b.n	8000e70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8171 	beq.w	8000e6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d118      	bne.n	8000c40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	f003 0201 	and.w	r2, r3, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d017      	beq.n	8000c7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d123      	bne.n	8000cd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	6939      	ldr	r1, [r7, #16]
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0203 	and.w	r2, r3, #3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80ac 	beq.w	8000e6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a5e      	ldr	r2, [pc, #376]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b5c      	ldr	r3, [pc, #368]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d2a:	4a5a      	ldr	r2, [pc, #360]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d54:	d025      	beq.n	8000da2 <HAL_GPIO_Init+0x242>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4f      	ldr	r2, [pc, #316]	; (8000e98 <HAL_GPIO_Init+0x338>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d01f      	beq.n	8000d9e <HAL_GPIO_Init+0x23e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <HAL_GPIO_Init+0x33c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d019      	beq.n	8000d9a <HAL_GPIO_Init+0x23a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_GPIO_Init+0x340>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0x236>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_GPIO_Init+0x344>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00d      	beq.n	8000d92 <HAL_GPIO_Init+0x232>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_GPIO_Init+0x348>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x22e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x34c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_GPIO_Init+0x22a>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e00c      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	e00a      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000da2:	2300      	movs	r3, #0
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db4:	4937      	ldr	r1, [pc, #220]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de6:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f47f ae78 	bne.w	8000b70 <HAL_GPIO_Init+0x10>
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000c00 	.word	0x48000c00
 8000ea4:	48001000 	.word	0x48001000
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	48001800 	.word	0x48001800
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HAL_PWREx_GetVoltageRange+0x18>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40007000 	.word	0x40007000

08000f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f0e:	d130      	bne.n	8000f72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1c:	d038      	beq.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f26:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2232      	movs	r2, #50	; 0x32
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	0c9b      	lsrs	r3, r3, #18
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f44:	e002      	b.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f58:	d102      	bne.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f2      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6c:	d110      	bne.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e00f      	b.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d007      	beq.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f88:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40007000 	.word	0x40007000
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	431bde83 	.word	0x431bde83

08000fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e3ca      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fbe:	4b97      	ldr	r3, [pc, #604]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fc8:	4b94      	ldr	r3, [pc, #592]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80e4 	beq.w	80011a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4a>
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	f040 808b 	bne.w	8001104 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f040 8087 	bne.w	8001104 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff6:	4b89      	ldr	r3, [pc, #548]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x62>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e3a2      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1a      	ldr	r2, [r3, #32]
 8001012:	4b82      	ldr	r3, [pc, #520]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_RCC_OscConfig+0x7c>
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001026:	e005      	b.n	8001034 <HAL_RCC_OscConfig+0x88>
 8001028:	4b7c      	ldr	r3, [pc, #496]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001034:	4293      	cmp	r3, r2
 8001036:	d223      	bcs.n	8001080 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fd71 	bl	8001b24 <RCC_SetFlashLatencyFromMSIRange>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e383      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a72      	ldr	r2, [pc, #456]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b70      	ldr	r3, [pc, #448]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	496d      	ldr	r1, [pc, #436]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001066:	4313      	orrs	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106a:	4b6c      	ldr	r3, [pc, #432]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	4968      	ldr	r1, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e025      	b.n	80010cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001080:	4b66      	ldr	r3, [pc, #408]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a65      	ldr	r2, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4960      	ldr	r1, [pc, #384]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <HAL_RCC_OscConfig+0x270>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	495b      	ldr	r1, [pc, #364]	; (800121c <HAL_RCC_OscConfig+0x270>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d109      	bne.n	80010cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fd31 	bl	8001b24 <RCC_SetFlashLatencyFromMSIRange>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e343      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010cc:	f000 fc4a 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b52      	ldr	r3, [pc, #328]	; (800121c <HAL_RCC_OscConfig+0x270>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	4950      	ldr	r1, [pc, #320]	; (8001220 <HAL_RCC_OscConfig+0x274>)
 80010de:	5ccb      	ldrb	r3, [r1, r3]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_RCC_OscConfig+0x278>)
 80010ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fab7 	bl	8000664 <HAL_InitTick>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d052      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	e327      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d032      	beq.n	8001172 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800110c:	4b43      	ldr	r3, [pc, #268]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a42      	ldr	r2, [pc, #264]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001118:	f7ff fc34 	bl	8000984 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001120:	f7ff fc30 	bl	8000984 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e310      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4931      	ldr	r1, [pc, #196]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	492c      	ldr	r1, [pc, #176]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
 8001170:	e01a      	b.n	80011a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800117e:	f7ff fc01 	bl	8000984 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001186:	f7ff fbfd 	bl	8000984 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e2dd      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x1da>
 80011a4:	e000      	b.n	80011a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d074      	beq.n	800129e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x21a>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d10e      	bne.n	80011de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d064      	beq.n	800129c <HAL_RCC_OscConfig+0x2f0>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d160      	bne.n	800129c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e2ba      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x24a>
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_RCC_OscConfig+0x270>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x270>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e026      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fe:	d115      	bne.n	800122c <HAL_RCC_OscConfig+0x280>
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a02      	ldr	r2, [pc, #8]	; (800121c <HAL_RCC_OscConfig+0x270>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	080053bc 	.word	0x080053bc
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004
 800122c:	4ba0      	ldr	r3, [pc, #640]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a9f      	ldr	r2, [pc, #636]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b9d      	ldr	r3, [pc, #628]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a9c      	ldr	r2, [pc, #624]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fb9a 	bl	8000984 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fb96 	bl	8000984 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e276      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001266:	4b92      	ldr	r3, [pc, #584]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x2a8>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fb86 	bl	8000984 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fb82 	bl	8000984 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e262      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x2d0>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d060      	beq.n	800136c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x310>
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d119      	bne.n	80012ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d116      	bne.n	80012ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012bc:	4b7c      	ldr	r3, [pc, #496]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x328>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e23f      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	4973      	ldr	r1, [pc, #460]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e8:	e040      	b.n	800136c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d023      	beq.n	800133a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f2:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6e      	ldr	r2, [pc, #440]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb41 	bl	8000984 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fb3d 	bl	8000984 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e21d      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001318:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	495f      	ldr	r1, [pc, #380]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e018      	b.n	800136c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5c      	ldr	r2, [pc, #368]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fb1d 	bl	8000984 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fb19 	bl	8000984 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1f9      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d03c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01c      	beq.n	80013ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff faf8 	bl	8000984 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff faf4 	bl	8000984 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1d4      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ef      	beq.n	8001398 <HAL_RCC_OscConfig+0x3ec>
 80013b8:	e01b      	b.n	80013f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	4a3b      	ldr	r2, [pc, #236]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fadb 	bl	8000984 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff fad7 	bl	8000984 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1b7      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e4:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ef      	bne.n	80013d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80a6 	beq.w	800154c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10d      	bne.n	800142c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6593      	str	r3, [r2, #88]	; 0x58
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001428:	2301      	movs	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_RCC_OscConfig+0x508>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d118      	bne.n	800146a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0x508>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x508>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001444:	f7ff fa9e 	bl	8000984 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144c:	f7ff fa9a 	bl	8000984 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e17a      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_RCC_OscConfig+0x508>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_RCC_OscConfig+0x4d8>
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001482:	e029      	b.n	80014d8 <HAL_RCC_OscConfig+0x52c>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d115      	bne.n	80014b8 <HAL_RCC_OscConfig+0x50c>
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x52c>
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40007000 	.word	0x40007000
 80014b8:	4b9c      	ldr	r3, [pc, #624]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80014ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014be:	4a9b      	ldr	r2, [pc, #620]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c8:	4b98      	ldr	r3, [pc, #608]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	4a97      	ldr	r2, [pc, #604]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d016      	beq.n	800150e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fa50 	bl	8000984 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fa4c 	bl	8000984 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e12a      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fe:	4b8b      	ldr	r3, [pc, #556]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ed      	beq.n	80014e8 <HAL_RCC_OscConfig+0x53c>
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fa39 	bl	8000984 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fa35 	bl	8000984 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e113      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800152c:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x780>)
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ed      	bne.n	8001516 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80fe 	beq.w	8001752 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	2b02      	cmp	r3, #2
 800155c:	f040 80d0 	bne.w	8001700 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001560:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	429a      	cmp	r2, r3
 8001572:	d130      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	3b01      	subs	r3, #1
 8001580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d127      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11f      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015a0:	2a07      	cmp	r2, #7
 80015a2:	bf14      	ite	ne
 80015a4:	2201      	movne	r2, #1
 80015a6:	2200      	moveq	r2, #0
 80015a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d113      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	3b01      	subs	r3, #1
 80015bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d06e      	beq.n	80016b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d069      	beq.n	80016b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0ad      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015f8:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80015fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001602:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001604:	f7ff f9be 	bl	8000984 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff f9ba 	bl	8000984 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e09a      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162a:	4b40      	ldr	r3, [pc, #256]	; (800172c <HAL_RCC_OscConfig+0x780>)
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	4b40      	ldr	r3, [pc, #256]	; (8001730 <HAL_RCC_OscConfig+0x784>)
 8001630:	4013      	ands	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800163a:	3a01      	subs	r2, #1
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800164c:	0852      	lsrs	r2, r2, #1
 800164e:	3a01      	subs	r2, #1
 8001650:	0552      	lsls	r2, r2, #21
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001658:	0852      	lsrs	r2, r2, #1
 800165a:	3a01      	subs	r2, #1
 800165c:	0652      	lsls	r2, r2, #25
 800165e:	4311      	orrs	r1, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001664:	0912      	lsrs	r2, r2, #4
 8001666:	0452      	lsls	r2, r2, #17
 8001668:	430a      	orrs	r2, r1
 800166a:	4930      	ldr	r1, [pc, #192]	; (800172c <HAL_RCC_OscConfig+0x780>)
 800166c:	4313      	orrs	r3, r2
 800166e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2d      	ldr	r2, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x780>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001688:	f7ff f97c 	bl	8000984 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff f978 	bl	8000984 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e058      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ae:	e050      	b.n	8001752 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e04f      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d148      	bne.n	8001752 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016d8:	f7ff f954 	bl	8000984 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff f950 	bl	8000984 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e030      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_RCC_OscConfig+0x780>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x734>
 80016fe:	e028      	b.n	8001752 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d023      	beq.n	800174e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x780>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x780>)
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff f937 	bl	8000984 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	e00c      	b.n	8001734 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff f933 	bl	8000984 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d905      	bls.n	8001734 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e013      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
 800172c:	40021000 	.word	0x40021000
 8001730:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_OscConfig+0x7b0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ec      	bne.n	800171a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_RCC_OscConfig+0x7b0>)
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4905      	ldr	r1, [pc, #20]	; (800175c <HAL_RCC_OscConfig+0x7b0>)
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_RCC_OscConfig+0x7b4>)
 8001748:	4013      	ands	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
 800174c:	e001      	b.n	8001752 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	feeefffc 	.word	0xfeeefffc

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0e7      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b75      	ldr	r3, [pc, #468]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d910      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0207 	bic.w	r2, r3, #7
 800178e:	4970      	ldr	r1, [pc, #448]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cf      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d010      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d908      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4960      	ldr	r1, [pc, #384]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d04c      	beq.n	800187c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d121      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0a6      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d115      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e09a      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e08e      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182a:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e086      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4943      	ldr	r1, [pc, #268]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800184c:	f7ff f89a 	bl	8000984 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff f896 	bl	8000984 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e06e      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001894:	429a      	cmp	r2, r3
 8001896:	d208      	bcs.n	80018aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	492b      	ldr	r1, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d210      	bcs.n	80018da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 0207 	bic.w	r2, r3, #7
 80018c0:	4923      	ldr	r1, [pc, #140]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e036      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4918      	ldr	r1, [pc, #96]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4910      	ldr	r1, [pc, #64]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001918:	f000 f824 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	490b      	ldr	r1, [pc, #44]	; (8001958 <HAL_RCC_ClockConfig+0x1f4>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001936:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1fc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe91 	bl	8000664 <HAL_InitTick>
 8001942:	4603      	mov	r3, r0
 8001944:	72fb      	strb	r3, [r7, #11]

  return status;
 8001946:	7afb      	ldrb	r3, [r7, #11]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40022000 	.word	0x40022000
 8001954:	40021000 	.word	0x40021000
 8001958:	080053bc 	.word	0x080053bc
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001972:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d121      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d11e      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019c0:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e004      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d134      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d003      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0xac>
 8001a08:	e005      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a0c:	617b      	str	r3, [r7, #20]
      break;
 8001a0e:	e005      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a12:	617b      	str	r3, [r7, #20]
      break;
 8001a14:	e002      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	617b      	str	r3, [r7, #20]
      break;
 8001a1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	3301      	adds	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	fb03 f202 	mul.w	r2, r3, r2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0e5b      	lsrs	r3, r3, #25
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	080053d4 	.word	0x080053d4
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	080053cc 	.word	0x080053cc

08001ac0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220f      	movs	r2, #15
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_RCC_GetClockConfig+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40022000 	.word	0x40022000

08001b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b3c:	f7ff f9d2 	bl	8000ee4 <HAL_PWREx_GetVoltageRange>
 8001b40:	6178      	str	r0, [r7, #20]
 8001b42:	e014      	b.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b5c:	f7ff f9c2 	bl	8000ee4 <HAL_PWREx_GetVoltageRange>
 8001b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b74:	d10b      	bne.n	8001b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	d919      	bls.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001b80:	d902      	bls.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b82:	2302      	movs	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e013      	b.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b88:	2301      	movs	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	e010      	b.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b80      	cmp	r3, #128	; 0x80
 8001b92:	d902      	bls.n	8001b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b94:	2303      	movs	r3, #3
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	e00a      	b.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d102      	bne.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	e004      	b.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b70      	cmp	r3, #112	; 0x70
 8001baa:	d101      	bne.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bac:	2301      	movs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 0207 	bic.w	r2, r3, #7
 8001bb8:	4909      	ldr	r1, [pc, #36]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40022000 	.word	0x40022000

08001be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e049      	b.n	8001c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f841 	bl	8001c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f000 f9f8 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04f      	b.n	8001d60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01d      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x76>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cea:	d018      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x76>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x76>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00e      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x76>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d009      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x76>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d004      	beq.n	8001d1e <HAL_TIM_Base_Start_IT+0x76>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d115      	bne.n	8001d4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d015      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0xb4>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d36:	d011      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d48:	e008      	b.n	8001d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e000      	b.n	8001d5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800
 8001d78:	40000c00 	.word	0x40000c00
 8001d7c:	40013400 	.word	0x40013400
 8001d80:	40014000 	.word	0x40014000
 8001d84:	00010007 	.word	0x00010007

08001d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0202 	mvn.w	r2, #2
 8001db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f905 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8f7 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f908 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0204 	mvn.w	r2, #4
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8db 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8cd 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8de 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d122      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d11b      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0208 	mvn.w	r2, #8
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2204      	movs	r2, #4
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8b1 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8a3 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8b4 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0210 	mvn.w	r2, #16
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f887 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f879 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f88a 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0201 	mvn.w	r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fb70 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b80      	cmp	r3, #128	; 0x80
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b80      	cmp	r3, #128	; 0x80
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f914 	bl	8002160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f46:	d10e      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	d107      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f907 	bl	8002174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b40      	cmp	r3, #64	; 0x40
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	2b40      	cmp	r3, #64	; 0x40
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f838 	bl	8002002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d10e      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d107      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0220 	mvn.w	r2, #32
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8c7 	bl	800214c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	; (800212c <TIM_Base_SetConfig+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d00f      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <TIM_Base_SetConfig+0x118>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <TIM_Base_SetConfig+0x11c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <TIM_Base_SetConfig+0x120>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <TIM_Base_SetConfig+0x124>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <TIM_Base_SetConfig+0x114>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <TIM_Base_SetConfig+0x118>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <TIM_Base_SetConfig+0x11c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2a      	ldr	r2, [pc, #168]	; (8002138 <TIM_Base_SetConfig+0x120>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <TIM_Base_SetConfig+0x124>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a28      	ldr	r2, [pc, #160]	; (8002140 <TIM_Base_SetConfig+0x128>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <TIM_Base_SetConfig+0x12c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0x9a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <TIM_Base_SetConfig+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <TIM_Base_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00f      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00b      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a11      	ldr	r2, [pc, #68]	; (8002140 <TIM_Base_SetConfig+0x128>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <TIM_Base_SetConfig+0x12c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <TIM_Base_SetConfig+0x130>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40013400 	.word	0x40013400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800

0800214c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219a:	2b84      	cmp	r3, #132	; 0x84
 800219c:	d005      	beq.n	80021aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800219e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	3303      	adds	r3, #3
 80021a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021bc:	f000 fe92 	bl	8002ee4 <vTaskStartScheduler>
  
  return osOK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c8:	b089      	sub	sp, #36	; 0x24
 80021ca:	af04      	add	r7, sp, #16
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <osThreadCreate+0x54>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01c      	beq.n	800221a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685c      	ldr	r4, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681d      	ldr	r5, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691e      	ldr	r6, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ffc8 	bl	8002188 <makeFreeRtosPriority>
 80021f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002202:	9202      	str	r2, [sp, #8]
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	9100      	str	r1, [sp, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4632      	mov	r2, r6
 800220c:	4629      	mov	r1, r5
 800220e:	4620      	mov	r0, r4
 8002210:	f000 fc8a 	bl	8002b28 <xTaskCreateStatic>
 8002214:	4603      	mov	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e01c      	b.n	8002254 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685c      	ldr	r4, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002226:	b29e      	uxth	r6, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ffaa 	bl	8002188 <makeFreeRtosPriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	4632      	mov	r2, r6
 8002242:	4629      	mov	r1, r5
 8002244:	4620      	mov	r0, r4
 8002246:	f000 fccc 	bl	8002be2 <xTaskCreate>
 800224a:	4603      	mov	r3, r0
 800224c:	2b01      	cmp	r3, #1
 800224e:	d001      	beq.n	8002254 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002254:	68fb      	ldr	r3, [r7, #12]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800225e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 0208 	add.w	r2, r3, #8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0208 	add.w	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f103 0208 	add.w	r2, r3, #8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d103      	bne.n	8002320 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e00c      	b.n	800233a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3308      	adds	r3, #8
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e002      	b.n	800232e <vListInsert+0x2e>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d2f6      	bcs.n	8002328 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6892      	ldr	r2, [r2, #8]
 8002388:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6852      	ldr	r2, [r2, #4]
 8002392:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	d103      	bne.n	80023a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023f2:	f001 fbbf 	bl	8003b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	441a      	add	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	3b01      	subs	r3, #1
 8002424:	68f9      	ldr	r1, [r7, #12]
 8002426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	441a      	add	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	22ff      	movs	r2, #255	; 0xff
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d114      	bne.n	8002472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01a      	beq.n	8002486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3310      	adds	r3, #16
 8002454:	4618      	mov	r0, r3
 8002456:	f000 ff97 	bl	8003388 <xTaskRemoveFromEventList>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <xQueueGenericReset+0xcc>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	e009      	b.n	8002486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3310      	adds	r3, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fef1 	bl	800225e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3324      	adds	r3, #36	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff feec 	bl	800225e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002486:	f001 fba5 	bl	8003bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	e000ed04 	.word	0xe000ed04

08002498 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	613b      	str	r3, [r7, #16]
}
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	3348      	adds	r3, #72	; 0x48
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fc31 	bl	8003d38 <pvPortMalloc>
 80024d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d011      	beq.n	8002502 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3348      	adds	r3, #72	; 0x48
 80024e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f805 	bl	800250c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002502:	69bb      	ldr	r3, [r7, #24]
	}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e002      	b.n	800252e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800253a:	2101      	movs	r1, #1
 800253c:	69b8      	ldr	r0, [r7, #24]
 800253e:	f7ff ff43 	bl	80023c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	; 0x38
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xQueueGenericSend+0x32>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <xQueueGenericSend+0x40>
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <xQueueGenericSend+0x44>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <xQueueGenericSend+0x46>
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <xQueueGenericSend+0x60>
	__asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025a8:	bf00      	nop
 80025aa:	e7fe      	b.n	80025aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d103      	bne.n	80025ba <xQueueGenericSend+0x6e>
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <xQueueGenericSend+0x72>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xQueueGenericSend+0x74>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <xQueueGenericSend+0x8e>
	__asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	623b      	str	r3, [r7, #32]
}
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025da:	f001 f895 	bl	8003708 <xTaskGetSchedulerState>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <xQueueGenericSend+0x9e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <xQueueGenericSend+0xa2>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <xQueueGenericSend+0xa4>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericSend+0xbe>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	61fb      	str	r3, [r7, #28]
}
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800260a:	f001 fab3 	bl	8003b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <xQueueGenericSend+0xd4>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d129      	bne.n	8002674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002626:	f000 f96f 	bl	8002908 <prvCopyDataToQueue>
 800262a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d010      	beq.n	8002656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	3324      	adds	r3, #36	; 0x24
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fea5 	bl	8003388 <xTaskRemoveFromEventList>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002644:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <xQueueGenericSend+0x1f8>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	e00a      	b.n	800266c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <xQueueGenericSend+0x1f8>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800266c:	f001 fab2 	bl	8003bd4 <vPortExitCritical>
				return pdPASS;
 8002670:	2301      	movs	r3, #1
 8002672:	e063      	b.n	800273c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800267a:	f001 faab 	bl	8003bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800267e:	2300      	movs	r3, #0
 8002680:	e05c      	b.n	800273c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fedd 	bl	800344c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002692:	2301      	movs	r3, #1
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002696:	f001 fa9d 	bl	8003bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800269a:	f000 fc8d 	bl	8002fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800269e:	f001 fa69 	bl	8003b74 <vPortEnterCritical>
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d103      	bne.n	80026b8 <xQueueGenericSend+0x16c>
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d103      	bne.n	80026ce <xQueueGenericSend+0x182>
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ce:	f001 fa81 	bl	8003bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026d2:	1d3a      	adds	r2, r7, #4
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fecc 	bl	8003478 <xTaskCheckForTimeOut>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d124      	bne.n	8002730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e8:	f000 fa06 	bl	8002af8 <prvIsQueueFull>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d018      	beq.n	8002724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	3310      	adds	r3, #16
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fe20 	bl	8003340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002702:	f000 f991 	bl	8002a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002706:	f000 fc65 	bl	8002fd4 <xTaskResumeAll>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f af7c 	bne.w	800260a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <xQueueGenericSend+0x1f8>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	e772      	b.n	800260a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002726:	f000 f97f 	bl	8002a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800272a:	f000 fc53 	bl	8002fd4 <xTaskResumeAll>
 800272e:	e76c      	b.n	800260a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002732:	f000 f979 	bl	8002a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002736:	f000 fc4d 	bl	8002fd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800273a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800273c:	4618      	mov	r0, r3
 800273e:	3738      	adds	r7, #56	; 0x38
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	e000ed04 	.word	0xe000ed04

08002748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <xQueueReceive+0x30>
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	623b      	str	r3, [r7, #32]
}
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <xQueueReceive+0x3e>
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <xQueueReceive+0x42>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <xQueueReceive+0x44>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <xQueueReceive+0x5e>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	61fb      	str	r3, [r7, #28]
}
 80027a2:	bf00      	nop
 80027a4:	e7fe      	b.n	80027a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a6:	f000 ffaf 	bl	8003708 <xTaskGetSchedulerState>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <xQueueReceive+0x6e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <xQueueReceive+0x72>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <xQueueReceive+0x74>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueReceive+0x8e>
	__asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61bb      	str	r3, [r7, #24]
}
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027d6:	f001 f9cd 	bl	8003b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01f      	beq.n	8002826 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f8f7 	bl	80029dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1e5a      	subs	r2, r3, #1
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00f      	beq.n	800281e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	3310      	adds	r3, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fdc0 	bl	8003388 <xTaskRemoveFromEventList>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <xQueueReceive+0x1bc>)
 8002810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800281e:	f001 f9d9 	bl	8003bd4 <vPortExitCritical>
				return pdPASS;
 8002822:	2301      	movs	r3, #1
 8002824:	e069      	b.n	80028fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800282c:	f001 f9d2 	bl	8003bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002830:	2300      	movs	r3, #0
 8002832:	e062      	b.n	80028fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fe04 	bl	800344c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002844:	2301      	movs	r3, #1
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002848:	f001 f9c4 	bl	8003bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800284c:	f000 fbb4 	bl	8002fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002850:	f001 f990 	bl	8003b74 <vPortEnterCritical>
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800285a:	b25b      	sxtb	r3, r3
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d103      	bne.n	800286a <xQueueReceive+0x122>
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002870:	b25b      	sxtb	r3, r3
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d103      	bne.n	8002880 <xQueueReceive+0x138>
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002880:	f001 f9a8 	bl	8003bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002884:	1d3a      	adds	r2, r7, #4
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fdf3 	bl	8003478 <xTaskCheckForTimeOut>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d123      	bne.n	80028e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f000 f917 	bl	8002acc <prvIsQueueEmpty>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	3324      	adds	r3, #36	; 0x24
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fd47 	bl	8003340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b4:	f000 f8b8 	bl	8002a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028b8:	f000 fb8c 	bl	8002fd4 <xTaskResumeAll>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d189      	bne.n	80027d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <xQueueReceive+0x1bc>)
 80028c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	e780      	b.n	80027d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d6:	f000 f8a7 	bl	8002a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028da:	f000 fb7b 	bl	8002fd4 <xTaskResumeAll>
 80028de:	e77a      	b.n	80027d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e2:	f000 f8a1 	bl	8002a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028e6:	f000 fb75 	bl	8002fd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ec:	f000 f8ee 	bl	8002acc <prvIsQueueEmpty>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f43f af6f 	beq.w	80027d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3730      	adds	r7, #48	; 0x30
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d14d      	bne.n	80029ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 ff06 	bl	8003744 <xTaskPriorityDisinherit>
 8002938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	e043      	b.n	80029ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d119      	bne.n	800297c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6858      	ldr	r0, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	461a      	mov	r2, r3
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	f001 fcfd 	bl	8004352 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	441a      	add	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	d32b      	bcc.n	80029ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e026      	b.n	80029ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68d8      	ldr	r0, [r3, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	461a      	mov	r2, r3
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	f001 fce3 	bl	8004352 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	425b      	negs	r3, r3
 8002996:	441a      	add	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	425b      	negs	r3, r3
 80029b2:	441a      	add	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d105      	bne.n	80029ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029d2:	697b      	ldr	r3, [r7, #20]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	441a      	add	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d303      	bcc.n	8002a10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68d9      	ldr	r1, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f001 fc99 	bl	8004352 <memcpy>
	}
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a30:	f001 f8a0 	bl	8003b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a3c:	e011      	b.n	8002a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3324      	adds	r3, #36	; 0x24
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fc9c 	bl	8003388 <xTaskRemoveFromEventList>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a56:	f000 fd71 	bl	800353c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dce9      	bgt.n	8002a3e <prvUnlockQueue+0x16>
 8002a6a:	e000      	b.n	8002a6e <prvUnlockQueue+0x46>
					break;
 8002a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a76:	f001 f8ad 	bl	8003bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a7a:	f001 f87b 	bl	8003b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a86:	e011      	b.n	8002aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3310      	adds	r3, #16
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fc77 	bl	8003388 <xTaskRemoveFromEventList>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002aa0:	f000 fd4c 	bl	800353c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	dce9      	bgt.n	8002a88 <prvUnlockQueue+0x60>
 8002ab4:	e000      	b.n	8002ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ac0:	f001 f888 	bl	8003bd4 <vPortExitCritical>
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ad4:	f001 f84e 	bl	8003b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e001      	b.n	8002aea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aea:	f001 f873 	bl	8003bd4 <vPortExitCritical>

	return xReturn;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b00:	f001 f838 	bl	8003b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d102      	bne.n	8002b16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e001      	b.n	8002b1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b1a:	f001 f85b 	bl	8003bd4 <vPortExitCritical>

	return xReturn;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af04      	add	r7, sp, #16
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	623b      	str	r3, [r7, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xTaskCreateStatic+0x46>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61fb      	str	r3, [r7, #28]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b6e:	23b4      	movs	r3, #180	; 0xb4
 8002b70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2bb4      	cmp	r3, #180	; 0xb4
 8002b76:	d00a      	beq.n	8002b8e <xTaskCreateStatic+0x66>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	61bb      	str	r3, [r7, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01e      	beq.n	8002bd4 <xTaskCreateStatic+0xac>
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9303      	str	r3, [sp, #12]
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	9302      	str	r3, [sp, #8]
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f850 	bl	8002c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bce:	f000 f8eb 	bl	8002da8 <prvAddNewTaskToReadyList>
 8002bd2:	e001      	b.n	8002bd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bd8:	697b      	ldr	r3, [r7, #20]
	}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3728      	adds	r7, #40	; 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08c      	sub	sp, #48	; 0x30
 8002be6:	af04      	add	r7, sp, #16
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 f89e 	bl	8003d38 <pvPortMalloc>
 8002bfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c04:	20b4      	movs	r0, #180	; 0xb4
 8002c06:	f001 f897 	bl	8003d38 <pvPortMalloc>
 8002c0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
 8002c18:	e005      	b.n	8002c26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f001 f958 	bl	8003ed0 <vPortFree>
 8002c20:	e001      	b.n	8002c26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9303      	str	r3, [sp, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f80e 	bl	8002c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c50:	69f8      	ldr	r0, [r7, #28]
 8002c52:	f000 f8a9 	bl	8002da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e002      	b.n	8002c62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c62:	69bb      	ldr	r3, [r7, #24]
	}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c84:	3b01      	subs	r3, #1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f023 0307 	bic.w	r3, r3, #7
 8002c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	617b      	str	r3, [r7, #20]
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01f      	beq.n	8002cfa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e012      	b.n	8002ce6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	7819      	ldrb	r1, [r3, #0]
 8002cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3334      	adds	r3, #52	; 0x34
 8002cd0:	460a      	mov	r2, r1
 8002cd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b0f      	cmp	r3, #15
 8002cea:	d9e9      	bls.n	8002cc0 <prvInitialiseNewTask+0x54>
 8002cec:	e000      	b.n	8002cf0 <prvInitialiseNewTask+0x84>
			{
				break;
 8002cee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf8:	e003      	b.n	8002d02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d901      	bls.n	8002d0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d08:	2306      	movs	r3, #6
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fabb 	bl	800229e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	3318      	adds	r3, #24
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fab6 	bl	800229e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	f1c3 0207 	rsb	r2, r3, #7
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	334c      	adds	r3, #76	; 0x4c
 8002d5c:	2260      	movs	r2, #96	; 0x60
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fb04 	bl	800436e <memset>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <prvInitialiseNewTask+0x130>)
 8002d6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <prvInitialiseNewTask+0x134>)
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <prvInitialiseNewTask+0x138>)
 8002d76:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	69b8      	ldr	r0, [r7, #24]
 8002d7e:	f000 fdcd 	bl	800391c <pxPortInitialiseStack>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d94:	bf00      	nop
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	08005424 	.word	0x08005424
 8002da0:	08005444 	.word	0x08005444
 8002da4:	08005404 	.word	0x08005404

08002da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002db0:	f000 fee0 	bl	8003b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <prvAddNewTaskToReadyList+0xb8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <prvAddNewTaskToReadyList+0xb8>)
 8002dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <prvAddNewTaskToReadyList+0xbc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dc6:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <prvAddNewTaskToReadyList+0xbc>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <prvAddNewTaskToReadyList+0xb8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d110      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dd4:	f000 fbd6 	bl	8003584 <prvInitialiseTaskLists>
 8002dd8:	e00d      	b.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <prvAddNewTaskToReadyList+0xc0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <prvAddNewTaskToReadyList+0xbc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d802      	bhi.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002df0:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <prvAddNewTaskToReadyList+0xbc>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002dfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <prvAddNewTaskToReadyList+0xc8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <prvAddNewTaskToReadyList+0xc8>)
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <prvAddNewTaskToReadyList+0xcc>)
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f7ff fa45 	bl	80022b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e2e:	f000 fed1 	bl	8003bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <prvAddNewTaskToReadyList+0xc0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00e      	beq.n	8002e58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <prvAddNewTaskToReadyList+0xbc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <prvAddNewTaskToReadyList+0xd0>)
 8002e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200004a8 	.word	0x200004a8
 8002e64:	200003a8 	.word	0x200003a8
 8002e68:	200004b4 	.word	0x200004b4
 8002e6c:	200004c4 	.word	0x200004c4
 8002e70:	200004b0 	.word	0x200004b0
 8002e74:	200003ac 	.word	0x200003ac
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d017      	beq.n	8002ebe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <vTaskDelay+0x60>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <vTaskDelay+0x30>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	60bb      	str	r3, [r7, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002eac:	f000 f884 	bl	8002fb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fccc 	bl	8003850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002eb8:	f000 f88c 	bl	8002fd4 <xTaskResumeAll>
 8002ebc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <vTaskDelay+0x64>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200004d0 	.word	0x200004d0
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ef2:	463a      	mov	r2, r7
 8002ef4:	1d39      	adds	r1, r7, #4
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd f9b8 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	9202      	str	r2, [sp, #8]
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	460a      	mov	r2, r1
 8002f12:	4921      	ldr	r1, [pc, #132]	; (8002f98 <vTaskStartScheduler+0xb4>)
 8002f14:	4821      	ldr	r0, [pc, #132]	; (8002f9c <vTaskStartScheduler+0xb8>)
 8002f16:	f7ff fe07 	bl	8002b28 <xTaskCreateStatic>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4a20      	ldr	r2, [pc, #128]	; (8002fa0 <vTaskStartScheduler+0xbc>)
 8002f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <vTaskStartScheduler+0xbc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e001      	b.n	8002f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d11b      	bne.n	8002f70 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	613b      	str	r3, [r7, #16]
}
 8002f4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f4c:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <vTaskStartScheduler+0xc0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	334c      	adds	r3, #76	; 0x4c
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <vTaskStartScheduler+0xc4>)
 8002f54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <vTaskStartScheduler+0xc8>)
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <vTaskStartScheduler+0xcc>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <vTaskStartScheduler+0xd0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f6a:	f000 fd61 	bl	8003a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f6e:	e00e      	b.n	8002f8e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d10a      	bne.n	8002f8e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
}
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <vTaskStartScheduler+0xa8>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	080053b4 	.word	0x080053b4
 8002f9c:	08003555 	.word	0x08003555
 8002fa0:	200004cc 	.word	0x200004cc
 8002fa4:	200003a8 	.word	0x200003a8
 8002fa8:	20000010 	.word	0x20000010
 8002fac:	200004c8 	.word	0x200004c8
 8002fb0:	200004b4 	.word	0x200004b4
 8002fb4:	200004ac 	.word	0x200004ac

08002fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <vTaskSuspendAll+0x18>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <vTaskSuspendAll+0x18>)
 8002fc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	200004d0 	.word	0x200004d0

08002fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <xTaskResumeAll+0x114>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <xTaskResumeAll+0x2c>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	603b      	str	r3, [r7, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003000:	f000 fdb8 	bl	8003b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003004:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <xTaskResumeAll+0x114>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	4a37      	ldr	r2, [pc, #220]	; (80030e8 <xTaskResumeAll+0x114>)
 800300c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <xTaskResumeAll+0x114>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d161      	bne.n	80030da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003016:	4b35      	ldr	r3, [pc, #212]	; (80030ec <xTaskResumeAll+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d05d      	beq.n	80030da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800301e:	e02e      	b.n	800307e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003020:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <xTaskResumeAll+0x11c>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3318      	adds	r3, #24
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f9a0 	bl	8002372 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3304      	adds	r3, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f99b 	bl	8002372 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	2201      	movs	r2, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <xTaskResumeAll+0x120>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	4a2a      	ldr	r2, [pc, #168]	; (80030f4 <xTaskResumeAll+0x120>)
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <xTaskResumeAll+0x124>)
 800305c:	441a      	add	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f7ff f927 	bl	80022b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <xTaskResumeAll+0x128>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d302      	bcc.n	800307e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <xTaskResumeAll+0x12c>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <xTaskResumeAll+0x11c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1cc      	bne.n	8003020 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800308c:	f000 fb1c 	bl	80036c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003090:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <xTaskResumeAll+0x130>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800309c:	f000 f836 	bl	800310c <xTaskIncrementTick>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <xTaskResumeAll+0x12c>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f1      	bne.n	800309c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <xTaskResumeAll+0x130>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <xTaskResumeAll+0x12c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <xTaskResumeAll+0x134>)
 80030cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030da:	f000 fd7b 	bl	8003bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80030de:	68bb      	ldr	r3, [r7, #8]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	200004d0 	.word	0x200004d0
 80030ec:	200004a8 	.word	0x200004a8
 80030f0:	20000468 	.word	0x20000468
 80030f4:	200004b0 	.word	0x200004b0
 80030f8:	200003ac 	.word	0x200003ac
 80030fc:	200003a8 	.word	0x200003a8
 8003100:	200004bc 	.word	0x200004bc
 8003104:	200004b8 	.word	0x200004b8
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003116:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <xTaskIncrementTick+0x144>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 808e 	bne.w	800323c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <xTaskIncrementTick+0x148>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003128:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <xTaskIncrementTick+0x148>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d120      	bne.n	8003176 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003134:	4b48      	ldr	r3, [pc, #288]	; (8003258 <xTaskIncrementTick+0x14c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <xTaskIncrementTick+0x48>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	603b      	str	r3, [r7, #0]
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xTaskIncrementTick+0x46>
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <xTaskIncrementTick+0x14c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <xTaskIncrementTick+0x150>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <xTaskIncrementTick+0x14c>)
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4a3e      	ldr	r2, [pc, #248]	; (800325c <xTaskIncrementTick+0x150>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <xTaskIncrementTick+0x154>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	4a3c      	ldr	r2, [pc, #240]	; (8003260 <xTaskIncrementTick+0x154>)
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	f000 faa9 	bl	80036c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <xTaskIncrementTick+0x158>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	429a      	cmp	r2, r3
 800317e:	d348      	bcc.n	8003212 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003180:	4b35      	ldr	r3, [pc, #212]	; (8003258 <xTaskIncrementTick+0x14c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <xTaskIncrementTick+0x158>)
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	601a      	str	r2, [r3, #0]
					break;
 8003192:	e03e      	b.n	8003212 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <xTaskIncrementTick+0x14c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d203      	bcs.n	80031b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031ac:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <xTaskIncrementTick+0x158>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031b2:	e02e      	b.n	8003212 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f8da 	bl	8002372 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3318      	adds	r3, #24
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f8d1 	bl	8002372 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	4b23      	ldr	r3, [pc, #140]	; (8003268 <xTaskIncrementTick+0x15c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <xTaskIncrementTick+0x15c>)
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a1f      	ldr	r2, [pc, #124]	; (800326c <xTaskIncrementTick+0x160>)
 80031f0:	441a      	add	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f7ff f85d 	bl	80022b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <xTaskIncrementTick+0x164>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	429a      	cmp	r2, r3
 800320a:	d3b9      	bcc.n	8003180 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003210:	e7b6      	b.n	8003180 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <xTaskIncrementTick+0x164>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4914      	ldr	r1, [pc, #80]	; (800326c <xTaskIncrementTick+0x160>)
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d901      	bls.n	800322e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800322a:	2301      	movs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <xTaskIncrementTick+0x168>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003236:	2301      	movs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e004      	b.n	8003246 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <xTaskIncrementTick+0x16c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <xTaskIncrementTick+0x16c>)
 8003244:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003246:	697b      	ldr	r3, [r7, #20]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200004d0 	.word	0x200004d0
 8003254:	200004ac 	.word	0x200004ac
 8003258:	20000460 	.word	0x20000460
 800325c:	20000464 	.word	0x20000464
 8003260:	200004c0 	.word	0x200004c0
 8003264:	200004c8 	.word	0x200004c8
 8003268:	200004b0 	.word	0x200004b0
 800326c:	200003ac 	.word	0x200003ac
 8003270:	200003a8 	.word	0x200003a8
 8003274:	200004bc 	.word	0x200004bc
 8003278:	200004b8 	.word	0x200004b8

0800327c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <vTaskSwitchContext+0xac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <vTaskSwitchContext+0xb0>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003290:	e044      	b.n	800331c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <vTaskSwitchContext+0xb0>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <vTaskSwitchContext+0xb4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f1c3 031f 	rsb	r3, r3, #31
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <vTaskSwitchContext+0xb8>)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	607b      	str	r3, [r7, #4]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <vTaskSwitchContext+0x5a>
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <vTaskSwitchContext+0xb8>)
 80032e4:	4413      	add	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	3308      	adds	r3, #8
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d104      	bne.n	8003308 <vTaskSwitchContext+0x8c>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <vTaskSwitchContext+0xbc>)
 8003310:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <vTaskSwitchContext+0xbc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	334c      	adds	r3, #76	; 0x4c
 8003318:	4a08      	ldr	r2, [pc, #32]	; (800333c <vTaskSwitchContext+0xc0>)
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	200004d0 	.word	0x200004d0
 800332c:	200004bc 	.word	0x200004bc
 8003330:	200004b0 	.word	0x200004b0
 8003334:	200003ac 	.word	0x200003ac
 8003338:	200003a8 	.word	0x200003a8
 800333c:	20000010 	.word	0x20000010

08003340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	60fb      	str	r3, [r7, #12]
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <vTaskPlaceOnEventList+0x44>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3318      	adds	r3, #24
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe ffc6 	bl	8002300 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003374:	2101      	movs	r1, #1
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f000 fa6a 	bl	8003850 <prvAddCurrentTaskToDelayedList>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200003a8 	.word	0x200003a8

08003388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	60fb      	str	r3, [r7, #12]
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	3318      	adds	r3, #24
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe ffda 	bl	8002372 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <xTaskRemoveFromEventList+0xac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11c      	bne.n	8003400 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe ffd1 	bl	8002372 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <xTaskRemoveFromEventList+0xb0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4313      	orrs	r3, r2
 80033de:	4a16      	ldr	r2, [pc, #88]	; (8003438 <xTaskRemoveFromEventList+0xb0>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a13      	ldr	r2, [pc, #76]	; (800343c <xTaskRemoveFromEventList+0xb4>)
 80033f0:	441a      	add	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7fe ff5d 	bl	80022b8 <vListInsertEnd>
 80033fe:	e005      	b.n	800340c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3318      	adds	r3, #24
 8003404:	4619      	mov	r1, r3
 8003406:	480e      	ldr	r0, [pc, #56]	; (8003440 <xTaskRemoveFromEventList+0xb8>)
 8003408:	f7fe ff56 	bl	80022b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <xTaskRemoveFromEventList+0xbc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	429a      	cmp	r2, r3
 8003418:	d905      	bls.n	8003426 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <xTaskRemoveFromEventList+0xc0>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e001      	b.n	800342a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800342a:	697b      	ldr	r3, [r7, #20]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200004d0 	.word	0x200004d0
 8003438:	200004b0 	.word	0x200004b0
 800343c:	200003ac 	.word	0x200003ac
 8003440:	20000468 	.word	0x20000468
 8003444:	200003a8 	.word	0x200003a8
 8003448:	200004bc 	.word	0x200004bc

0800344c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <vTaskInternalSetTimeOutState+0x24>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <vTaskInternalSetTimeOutState+0x28>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	605a      	str	r2, [r3, #4]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	200004c0 	.word	0x200004c0
 8003474:	200004ac 	.word	0x200004ac

08003478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	613b      	str	r3, [r7, #16]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60fb      	str	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80034ba:	f000 fb5b 	bl	8003b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <xTaskCheckForTimeOut+0xbc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d102      	bne.n	80034de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e023      	b.n	8003526 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <xTaskCheckForTimeOut+0xc0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d007      	beq.n	80034fa <xTaskCheckForTimeOut+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e015      	b.n	8003526 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	d20b      	bcs.n	800351c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff9b 	bl	800344c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	e004      	b.n	8003526 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003526:	f000 fb55 	bl	8003bd4 <vPortExitCritical>

	return xReturn;
 800352a:	69fb      	ldr	r3, [r7, #28]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200004ac 	.word	0x200004ac
 8003538:	200004c0 	.word	0x200004c0

0800353c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <vTaskMissedYield+0x14>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	200004bc 	.word	0x200004bc

08003554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800355c:	f000 f852 	bl	8003604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <prvIdleTask+0x28>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d9f9      	bls.n	800355c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <prvIdleTask+0x2c>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003578:	e7f0      	b.n	800355c <prvIdleTask+0x8>
 800357a:	bf00      	nop
 800357c:	200003ac 	.word	0x200003ac
 8003580:	e000ed04 	.word	0xe000ed04

08003584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	e00c      	b.n	80035aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <prvInitialiseTaskLists+0x60>)
 800359c:	4413      	add	r3, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fe5d 	bl	800225e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3301      	adds	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d9ef      	bls.n	8003590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035b0:	480d      	ldr	r0, [pc, #52]	; (80035e8 <prvInitialiseTaskLists+0x64>)
 80035b2:	f7fe fe54 	bl	800225e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035b6:	480d      	ldr	r0, [pc, #52]	; (80035ec <prvInitialiseTaskLists+0x68>)
 80035b8:	f7fe fe51 	bl	800225e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <prvInitialiseTaskLists+0x6c>)
 80035be:	f7fe fe4e 	bl	800225e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035c2:	480c      	ldr	r0, [pc, #48]	; (80035f4 <prvInitialiseTaskLists+0x70>)
 80035c4:	f7fe fe4b 	bl	800225e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035c8:	480b      	ldr	r0, [pc, #44]	; (80035f8 <prvInitialiseTaskLists+0x74>)
 80035ca:	f7fe fe48 	bl	800225e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <prvInitialiseTaskLists+0x78>)
 80035d0:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <prvInitialiseTaskLists+0x64>)
 80035d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <prvInitialiseTaskLists+0x7c>)
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <prvInitialiseTaskLists+0x68>)
 80035d8:	601a      	str	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200003ac 	.word	0x200003ac
 80035e8:	20000438 	.word	0x20000438
 80035ec:	2000044c 	.word	0x2000044c
 80035f0:	20000468 	.word	0x20000468
 80035f4:	2000047c 	.word	0x2000047c
 80035f8:	20000494 	.word	0x20000494
 80035fc:	20000460 	.word	0x20000460
 8003600:	20000464 	.word	0x20000464

08003604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800360a:	e019      	b.n	8003640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800360c:	f000 fab2 	bl	8003b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <prvCheckTasksWaitingTermination+0x50>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fea8 	bl	8002372 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <prvCheckTasksWaitingTermination+0x54>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3b01      	subs	r3, #1
 8003628:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <prvCheckTasksWaitingTermination+0x54>)
 800362a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <prvCheckTasksWaitingTermination+0x58>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <prvCheckTasksWaitingTermination+0x58>)
 8003634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003636:	f000 facd 	bl	8003bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f810 	bl	8003660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <prvCheckTasksWaitingTermination+0x58>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e1      	bne.n	800360c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000047c 	.word	0x2000047c
 8003658:	200004a8 	.word	0x200004a8
 800365c:	20000490 	.word	0x20000490

08003660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	334c      	adds	r3, #76	; 0x4c
 800366c:	4618      	mov	r0, r3
 800366e:	f000 ffb7 	bl	80045e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fc25 	bl	8003ed0 <vPortFree>
				vPortFree( pxTCB );
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fc22 	bl	8003ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800368c:	e018      	b.n	80036c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d103      	bne.n	80036a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fc19 	bl	8003ed0 <vPortFree>
	}
 800369e:	e00f      	b.n	80036c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d00a      	beq.n	80036c0 <prvDeleteTCB+0x60>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60fb      	str	r3, [r7, #12]
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <prvDeleteTCB+0x5e>
	}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <prvResetNextTaskUnblockTime+0x38>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <prvResetNextTaskUnblockTime+0x3c>)
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036e0:	e008      	b.n	80036f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <prvResetNextTaskUnblockTime+0x38>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <prvResetNextTaskUnblockTime+0x3c>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000460 	.word	0x20000460
 8003704:	200004c8 	.word	0x200004c8

08003708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <xTaskGetSchedulerState+0x34>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003716:	2301      	movs	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	e008      	b.n	800372e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <xTaskGetSchedulerState+0x38>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003724:	2302      	movs	r3, #2
 8003726:	607b      	str	r3, [r7, #4]
 8003728:	e001      	b.n	800372e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800372e:	687b      	ldr	r3, [r7, #4]
	}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	200004b4 	.word	0x200004b4
 8003740:	200004d0 	.word	0x200004d0

08003744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d06e      	beq.n	8003838 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <xTaskPriorityDisinherit+0x100>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d00a      	beq.n	800377a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	60bb      	str	r3, [r7, #8]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d044      	beq.n	8003838 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d140      	bne.n	8003838 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fdd9 	bl	8002372 <uxListRemove>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	491f      	ldr	r1, [pc, #124]	; (8003848 <xTaskPriorityDisinherit+0x104>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskPriorityDisinherit+0xae>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <xTaskPriorityDisinherit+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4013      	ands	r3, r2
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <xTaskPriorityDisinherit+0x108>)
 80037f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	f1c3 0207 	rsb	r2, r3, #7
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <xTaskPriorityDisinherit+0x108>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <xTaskPriorityDisinherit+0x108>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <xTaskPriorityDisinherit+0x104>)
 8003826:	441a      	add	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7fe fd42 	bl	80022b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003838:	697b      	ldr	r3, [r7, #20]
	}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200003a8 	.word	0x200003a8
 8003848:	200003ac 	.word	0x200003ac
 800384c:	200004b0 	.word	0x200004b0

08003850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <prvAddCurrentTaskToDelayedList+0xb0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3304      	adds	r3, #4
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fd83 	bl	8002372 <uxListRemove>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	2201      	movs	r2, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	4b21      	ldr	r3, [pc, #132]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4013      	ands	r3, r2
 8003886:	4a20      	ldr	r2, [pc, #128]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003888:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d10a      	bne.n	80038a8 <prvAddCurrentTaskToDelayedList+0x58>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	481a      	ldr	r0, [pc, #104]	; (800390c <prvAddCurrentTaskToDelayedList+0xbc>)
 80038a2:	f7fe fd09 	bl	80022b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038a6:	e026      	b.n	80038f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d209      	bcs.n	80038d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7fe fd17 	bl	8002300 <vListInsert>
}
 80038d2:	e010      	b.n	80038f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3304      	adds	r3, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f7fe fd0d 	bl	8002300 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d202      	bcs.n	80038f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f0:	4a09      	ldr	r2, [pc, #36]	; (8003918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6013      	str	r3, [r2, #0]
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200004ac 	.word	0x200004ac
 8003904:	200003a8 	.word	0x200003a8
 8003908:	200004b0 	.word	0x200004b0
 800390c:	20000494 	.word	0x20000494
 8003910:	20000464 	.word	0x20000464
 8003914:	20000460 	.word	0x20000460
 8003918:	200004c8 	.word	0x200004c8

0800391c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b04      	subs	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b04      	subs	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0201 	bic.w	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b04      	subs	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <pxPortInitialiseStack+0x64>)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3b14      	subs	r3, #20
 8003956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3b04      	subs	r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f06f 0202 	mvn.w	r2, #2
 800396a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b20      	subs	r3, #32
 8003970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	08003985 	.word	0x08003985

08003984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <prvTaskExitError+0x54>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d00a      	beq.n	80039ae <prvTaskExitError+0x2a>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fb      	str	r3, [r7, #12]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <prvTaskExitError+0x28>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	60bb      	str	r3, [r7, #8]
}
 80039c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039c2:	bf00      	nop
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0fc      	beq.n	80039c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	2000000c 	.word	0x2000000c
 80039dc:	00000000 	.word	0x00000000

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	4770      	bx	lr
 80039fc:	f3af 8000 	nop.w

08003a00 <pxCurrentTCBConst2>:
 8003a00:	200003a8 	.word	0x200003a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <prvPortStartFirstTask+0x24>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f380 8814 	msr	CONTROL, r0
 8003a1a:	b662      	cpsie	i
 8003a1c:	b661      	cpsie	f
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	df00      	svc	0
 8003a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed08 	.word	0xe000ed08

08003a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a36:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a46      	ldr	r2, [pc, #280]	; (8003b54 <xPortStartScheduler+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10a      	bne.n	8003a56 <xPortStartScheduler+0x26>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	613b      	str	r3, [r7, #16]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3f      	ldr	r2, [pc, #252]	; (8003b58 <xPortStartScheduler+0x128>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10a      	bne.n	8003a76 <xPortStartScheduler+0x46>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60fb      	str	r3, [r7, #12]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <xPortStartScheduler+0x130>)
 8003a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aa4:	e009      	b.n	8003aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d0ef      	beq.n	8003aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <xPortStartScheduler+0x134>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1c3 0307 	rsb	r3, r3, #7
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d00a      	beq.n	8003ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60bb      	str	r3, [r7, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <xPortStartScheduler+0x134>)
 8003af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <xPortStartScheduler+0x134>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <xPortStartScheduler+0x134>)
 8003afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b1e:	f000 f8dd 	bl	8003cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <xPortStartScheduler+0x13c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b28:	f000 f8fc 	bl	8003d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <xPortStartScheduler+0x140>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <xPortStartScheduler+0x140>)
 8003b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b38:	f7ff ff66 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b3c:	f7ff fb9e 	bl	800327c <vTaskSwitchContext>
	prvTaskExitError();
 8003b40:	f7ff ff20 	bl	8003984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	410fc271 	.word	0x410fc271
 8003b58:	410fc270 	.word	0x410fc270
 8003b5c:	e000e400 	.word	0xe000e400
 8003b60:	200004d4 	.word	0x200004d4
 8003b64:	200004d8 	.word	0x200004d8
 8003b68:	e000ed20 	.word	0xe000ed20
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	e000ef34 	.word	0xe000ef34

08003b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10f      	bne.n	8003bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <vPortEnterCritical+0x5c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	603b      	str	r3, [r7, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <vPortEnterCritical+0x4a>
	}
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <vPortExitCritical+0x50>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vPortExitCritical+0x24>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <vPortExitCritical+0x50>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <vPortExitCritical+0x50>)
 8003c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <vPortExitCritical+0x50>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <vPortExitCritical+0x42>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
	...

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <pxCurrentTCBConst>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f01e 0f10 	tst.w	lr, #16
 8003c40:	bf08      	it	eq
 8003c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	6010      	str	r0, [r2, #0]
 8003c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c54:	f380 8811 	msr	BASEPRI, r0
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f7ff fb0c 	bl	800327c <vTaskSwitchContext>
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f380 8811 	msr	BASEPRI, r0
 8003c6c:	bc09      	pop	{r0, r3}
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	6808      	ldr	r0, [r1, #0]
 8003c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c76:	f01e 0f10 	tst.w	lr, #16
 8003c7a:	bf08      	it	eq
 8003c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c80:	f380 8809 	msr	PSP, r0
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w

08003c90 <pxCurrentTCBConst>:
 8003c90:	200003a8 	.word	0x200003a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cb2:	f7ff fa2b 	bl	800310c <xTaskIncrementTick>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <SysTick_Handler+0x40>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f383 8811 	msr	BASEPRI, r3
}
 8003cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <vPortSetupTimerInterrupt+0x38>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <vPortSetupTimerInterrupt+0x3c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <vPortSetupTimerInterrupt+0x40>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <vPortSetupTimerInterrupt+0x44>)
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010
 8003d14:	e000e018 	.word	0xe000e018
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	10624dd3 	.word	0x10624dd3
 8003d20:	e000e014 	.word	0xe000e014

08003d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d34 <vPortEnableVFP+0x10>
 8003d28:	6801      	ldr	r1, [r0, #0]
 8003d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d2e:	6001      	str	r1, [r0, #0]
 8003d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d32:	bf00      	nop
 8003d34:	e000ed88 	.word	0xe000ed88

08003d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d44:	f7ff f938 	bl	8002fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d48:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <pvPortMalloc+0x180>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d50:	f000 f920 	bl	8003f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d54:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <pvPortMalloc+0x184>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 8093 	bne.w	8003e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01d      	beq.n	8003da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d68:	2208      	movs	r2, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <pvPortMalloc+0x6c>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	617b      	str	r3, [r7, #20]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d06e      	beq.n	8003e88 <pvPortMalloc+0x150>
 8003daa:	4b45      	ldr	r3, [pc, #276]	; (8003ec0 <pvPortMalloc+0x188>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d869      	bhi.n	8003e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003db4:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <pvPortMalloc+0x18c>)
 8003db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003db8:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <pvPortMalloc+0x18c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dbe:	e004      	b.n	8003dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d903      	bls.n	8003ddc <pvPortMalloc+0xa4>
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f1      	bne.n	8003dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <pvPortMalloc+0x180>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d050      	beq.n	8003e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2208      	movs	r2, #8
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	2308      	movs	r3, #8
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d91f      	bls.n	8003e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <pvPortMalloc+0xf8>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	613b      	str	r3, [r7, #16]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e42:	69b8      	ldr	r0, [r7, #24]
 8003e44:	f000 f908 	bl	8004058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <pvPortMalloc+0x188>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <pvPortMalloc+0x188>)
 8003e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <pvPortMalloc+0x188>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <pvPortMalloc+0x190>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d203      	bcs.n	8003e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e62:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <pvPortMalloc+0x188>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <pvPortMalloc+0x190>)
 8003e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <pvPortMalloc+0x184>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <pvPortMalloc+0x194>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <pvPortMalloc+0x194>)
 8003e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e88:	f7ff f8a4 	bl	8002fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <pvPortMalloc+0x174>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60fb      	str	r3, [r7, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <pvPortMalloc+0x172>
	return pvReturn;
 8003eac:	69fb      	ldr	r3, [r7, #28]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3728      	adds	r7, #40	; 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000109c 	.word	0x2000109c
 8003ebc:	200010b0 	.word	0x200010b0
 8003ec0:	200010a0 	.word	0x200010a0
 8003ec4:	20001094 	.word	0x20001094
 8003ec8:	200010a4 	.word	0x200010a4
 8003ecc:	200010a8 	.word	0x200010a8

08003ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d04d      	beq.n	8003f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	425b      	negs	r3, r3
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4413      	add	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <vPortFree+0xb8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <vPortFree+0x44>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60fb      	str	r3, [r7, #12]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <vPortFree+0x62>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	60bb      	str	r3, [r7, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <vPortFree+0xb8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01e      	beq.n	8003f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11a      	bne.n	8003f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <vPortFree+0xb8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	401a      	ands	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f58:	f7ff f82e 	bl	8002fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <vPortFree+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4413      	add	r3, r2
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <vPortFree+0xbc>)
 8003f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f6a:	6938      	ldr	r0, [r7, #16]
 8003f6c:	f000 f874 	bl	8004058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <vPortFree+0xc0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <vPortFree+0xc0>)
 8003f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f7a:	f7ff f82b 	bl	8002fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f7e:	bf00      	nop
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200010b0 	.word	0x200010b0
 8003f8c:	200010a0 	.word	0x200010a0
 8003f90:	200010ac 	.word	0x200010ac

08003f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fa0:	4b27      	ldr	r3, [pc, #156]	; (8004040 <prvHeapInit+0xac>)
 8003fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3307      	adds	r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0307 	bic.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <prvHeapInit+0xac>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <prvHeapInit+0xb0>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <prvHeapInit+0xb0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <prvHeapInit+0xb4>)
 8003ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <prvHeapInit+0xb4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <prvHeapInit+0xb4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <prvHeapInit+0xb4>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <prvHeapInit+0xb8>)
 8004022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <prvHeapInit+0xbc>)
 800402a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <prvHeapInit+0xc0>)
 800402e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	200004dc 	.word	0x200004dc
 8004044:	20001094 	.word	0x20001094
 8004048:	2000109c 	.word	0x2000109c
 800404c:	200010a4 	.word	0x200010a4
 8004050:	200010a0 	.word	0x200010a0
 8004054:	200010b0 	.word	0x200010b0

08004058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <prvInsertBlockIntoFreeList+0xac>)
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e002      	b.n	800406c <prvInsertBlockIntoFreeList+0x14>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d8f7      	bhi.n	8004066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d108      	bne.n	800409a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	441a      	add	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	441a      	add	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d118      	bne.n	80040e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <prvInsertBlockIntoFreeList+0xb0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d00d      	beq.n	80040d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	441a      	add	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e008      	b.n	80040e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <prvInsertBlockIntoFreeList+0xb0>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e003      	b.n	80040e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d002      	beq.n	80040f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20001094 	.word	0x20001094
 8004108:	2000109c 	.word	0x2000109c

0800410c <__errno>:
 800410c:	4b01      	ldr	r3, [pc, #4]	; (8004114 <__errno+0x8>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000010 	.word	0x20000010

08004118 <std>:
 8004118:	2300      	movs	r3, #0
 800411a:	b510      	push	{r4, lr}
 800411c:	4604      	mov	r4, r0
 800411e:	e9c0 3300 	strd	r3, r3, [r0]
 8004122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004126:	6083      	str	r3, [r0, #8]
 8004128:	8181      	strh	r1, [r0, #12]
 800412a:	6643      	str	r3, [r0, #100]	; 0x64
 800412c:	81c2      	strh	r2, [r0, #14]
 800412e:	6183      	str	r3, [r0, #24]
 8004130:	4619      	mov	r1, r3
 8004132:	2208      	movs	r2, #8
 8004134:	305c      	adds	r0, #92	; 0x5c
 8004136:	f000 f91a 	bl	800436e <memset>
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <std+0x38>)
 800413c:	6263      	str	r3, [r4, #36]	; 0x24
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <std+0x3c>)
 8004140:	62a3      	str	r3, [r4, #40]	; 0x28
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <std+0x40>)
 8004144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <std+0x44>)
 8004148:	6224      	str	r4, [r4, #32]
 800414a:	6323      	str	r3, [r4, #48]	; 0x30
 800414c:	bd10      	pop	{r4, pc}
 800414e:	bf00      	nop
 8004150:	080046b9 	.word	0x080046b9
 8004154:	080046db 	.word	0x080046db
 8004158:	08004713 	.word	0x08004713
 800415c:	08004737 	.word	0x08004737

08004160 <_cleanup_r>:
 8004160:	4901      	ldr	r1, [pc, #4]	; (8004168 <_cleanup_r+0x8>)
 8004162:	f000 b8af 	b.w	80042c4 <_fwalk_reent>
 8004166:	bf00      	nop
 8004168:	08004a11 	.word	0x08004a11

0800416c <__sfmoreglue>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2268      	movs	r2, #104	; 0x68
 8004170:	1e4d      	subs	r5, r1, #1
 8004172:	4355      	muls	r5, r2
 8004174:	460e      	mov	r6, r1
 8004176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800417a:	f000 f921 	bl	80043c0 <_malloc_r>
 800417e:	4604      	mov	r4, r0
 8004180:	b140      	cbz	r0, 8004194 <__sfmoreglue+0x28>
 8004182:	2100      	movs	r1, #0
 8004184:	e9c0 1600 	strd	r1, r6, [r0]
 8004188:	300c      	adds	r0, #12
 800418a:	60a0      	str	r0, [r4, #8]
 800418c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004190:	f000 f8ed 	bl	800436e <memset>
 8004194:	4620      	mov	r0, r4
 8004196:	bd70      	pop	{r4, r5, r6, pc}

08004198 <__sfp_lock_acquire>:
 8004198:	4801      	ldr	r0, [pc, #4]	; (80041a0 <__sfp_lock_acquire+0x8>)
 800419a:	f000 b8d8 	b.w	800434e <__retarget_lock_acquire_recursive>
 800419e:	bf00      	nop
 80041a0:	200010b5 	.word	0x200010b5

080041a4 <__sfp_lock_release>:
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <__sfp_lock_release+0x8>)
 80041a6:	f000 b8d3 	b.w	8004350 <__retarget_lock_release_recursive>
 80041aa:	bf00      	nop
 80041ac:	200010b5 	.word	0x200010b5

080041b0 <__sinit_lock_acquire>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__sinit_lock_acquire+0x8>)
 80041b2:	f000 b8cc 	b.w	800434e <__retarget_lock_acquire_recursive>
 80041b6:	bf00      	nop
 80041b8:	200010b6 	.word	0x200010b6

080041bc <__sinit_lock_release>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__sinit_lock_release+0x8>)
 80041be:	f000 b8c7 	b.w	8004350 <__retarget_lock_release_recursive>
 80041c2:	bf00      	nop
 80041c4:	200010b6 	.word	0x200010b6

080041c8 <__sinit>:
 80041c8:	b510      	push	{r4, lr}
 80041ca:	4604      	mov	r4, r0
 80041cc:	f7ff fff0 	bl	80041b0 <__sinit_lock_acquire>
 80041d0:	69a3      	ldr	r3, [r4, #24]
 80041d2:	b11b      	cbz	r3, 80041dc <__sinit+0x14>
 80041d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d8:	f7ff bff0 	b.w	80041bc <__sinit_lock_release>
 80041dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041e0:	6523      	str	r3, [r4, #80]	; 0x50
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <__sinit+0x68>)
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <__sinit+0x6c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	bf04      	itt	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	61a3      	streq	r3, [r4, #24]
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 f820 	bl	8004238 <__sfp>
 80041f8:	6060      	str	r0, [r4, #4]
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 f81c 	bl	8004238 <__sfp>
 8004200:	60a0      	str	r0, [r4, #8]
 8004202:	4620      	mov	r0, r4
 8004204:	f000 f818 	bl	8004238 <__sfp>
 8004208:	2200      	movs	r2, #0
 800420a:	60e0      	str	r0, [r4, #12]
 800420c:	2104      	movs	r1, #4
 800420e:	6860      	ldr	r0, [r4, #4]
 8004210:	f7ff ff82 	bl	8004118 <std>
 8004214:	68a0      	ldr	r0, [r4, #8]
 8004216:	2201      	movs	r2, #1
 8004218:	2109      	movs	r1, #9
 800421a:	f7ff ff7d 	bl	8004118 <std>
 800421e:	68e0      	ldr	r0, [r4, #12]
 8004220:	2202      	movs	r2, #2
 8004222:	2112      	movs	r1, #18
 8004224:	f7ff ff78 	bl	8004118 <std>
 8004228:	2301      	movs	r3, #1
 800422a:	61a3      	str	r3, [r4, #24]
 800422c:	e7d2      	b.n	80041d4 <__sinit+0xc>
 800422e:	bf00      	nop
 8004230:	08005464 	.word	0x08005464
 8004234:	08004161 	.word	0x08004161

08004238 <__sfp>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	4607      	mov	r7, r0
 800423c:	f7ff ffac 	bl	8004198 <__sfp_lock_acquire>
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <__sfp+0x84>)
 8004242:	681e      	ldr	r6, [r3, #0]
 8004244:	69b3      	ldr	r3, [r6, #24]
 8004246:	b913      	cbnz	r3, 800424e <__sfp+0x16>
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff ffbd 	bl	80041c8 <__sinit>
 800424e:	3648      	adds	r6, #72	; 0x48
 8004250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004254:	3b01      	subs	r3, #1
 8004256:	d503      	bpl.n	8004260 <__sfp+0x28>
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	b30b      	cbz	r3, 80042a0 <__sfp+0x68>
 800425c:	6836      	ldr	r6, [r6, #0]
 800425e:	e7f7      	b.n	8004250 <__sfp+0x18>
 8004260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004264:	b9d5      	cbnz	r5, 800429c <__sfp+0x64>
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <__sfp+0x88>)
 8004268:	60e3      	str	r3, [r4, #12]
 800426a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800426e:	6665      	str	r5, [r4, #100]	; 0x64
 8004270:	f000 f86c 	bl	800434c <__retarget_lock_init_recursive>
 8004274:	f7ff ff96 	bl	80041a4 <__sfp_lock_release>
 8004278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800427c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004280:	6025      	str	r5, [r4, #0]
 8004282:	61a5      	str	r5, [r4, #24]
 8004284:	2208      	movs	r2, #8
 8004286:	4629      	mov	r1, r5
 8004288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800428c:	f000 f86f 	bl	800436e <memset>
 8004290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004298:	4620      	mov	r0, r4
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429c:	3468      	adds	r4, #104	; 0x68
 800429e:	e7d9      	b.n	8004254 <__sfp+0x1c>
 80042a0:	2104      	movs	r1, #4
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7ff ff62 	bl	800416c <__sfmoreglue>
 80042a8:	4604      	mov	r4, r0
 80042aa:	6030      	str	r0, [r6, #0]
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d1d5      	bne.n	800425c <__sfp+0x24>
 80042b0:	f7ff ff78 	bl	80041a4 <__sfp_lock_release>
 80042b4:	230c      	movs	r3, #12
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	e7ee      	b.n	8004298 <__sfp+0x60>
 80042ba:	bf00      	nop
 80042bc:	08005464 	.word	0x08005464
 80042c0:	ffff0001 	.word	0xffff0001

080042c4 <_fwalk_reent>:
 80042c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c8:	4606      	mov	r6, r0
 80042ca:	4688      	mov	r8, r1
 80042cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042d0:	2700      	movs	r7, #0
 80042d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042d6:	f1b9 0901 	subs.w	r9, r9, #1
 80042da:	d505      	bpl.n	80042e8 <_fwalk_reent+0x24>
 80042dc:	6824      	ldr	r4, [r4, #0]
 80042de:	2c00      	cmp	r4, #0
 80042e0:	d1f7      	bne.n	80042d2 <_fwalk_reent+0xe>
 80042e2:	4638      	mov	r0, r7
 80042e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e8:	89ab      	ldrh	r3, [r5, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d907      	bls.n	80042fe <_fwalk_reent+0x3a>
 80042ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042f2:	3301      	adds	r3, #1
 80042f4:	d003      	beq.n	80042fe <_fwalk_reent+0x3a>
 80042f6:	4629      	mov	r1, r5
 80042f8:	4630      	mov	r0, r6
 80042fa:	47c0      	blx	r8
 80042fc:	4307      	orrs	r7, r0
 80042fe:	3568      	adds	r5, #104	; 0x68
 8004300:	e7e9      	b.n	80042d6 <_fwalk_reent+0x12>
	...

08004304 <__libc_init_array>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	4d0d      	ldr	r5, [pc, #52]	; (800433c <__libc_init_array+0x38>)
 8004308:	4c0d      	ldr	r4, [pc, #52]	; (8004340 <__libc_init_array+0x3c>)
 800430a:	1b64      	subs	r4, r4, r5
 800430c:	10a4      	asrs	r4, r4, #2
 800430e:	2600      	movs	r6, #0
 8004310:	42a6      	cmp	r6, r4
 8004312:	d109      	bne.n	8004328 <__libc_init_array+0x24>
 8004314:	4d0b      	ldr	r5, [pc, #44]	; (8004344 <__libc_init_array+0x40>)
 8004316:	4c0c      	ldr	r4, [pc, #48]	; (8004348 <__libc_init_array+0x44>)
 8004318:	f000 ffa8 	bl	800526c <_init>
 800431c:	1b64      	subs	r4, r4, r5
 800431e:	10a4      	asrs	r4, r4, #2
 8004320:	2600      	movs	r6, #0
 8004322:	42a6      	cmp	r6, r4
 8004324:	d105      	bne.n	8004332 <__libc_init_array+0x2e>
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	f855 3b04 	ldr.w	r3, [r5], #4
 800432c:	4798      	blx	r3
 800432e:	3601      	adds	r6, #1
 8004330:	e7ee      	b.n	8004310 <__libc_init_array+0xc>
 8004332:	f855 3b04 	ldr.w	r3, [r5], #4
 8004336:	4798      	blx	r3
 8004338:	3601      	adds	r6, #1
 800433a:	e7f2      	b.n	8004322 <__libc_init_array+0x1e>
 800433c:	0800549c 	.word	0x0800549c
 8004340:	0800549c 	.word	0x0800549c
 8004344:	0800549c 	.word	0x0800549c
 8004348:	080054a0 	.word	0x080054a0

0800434c <__retarget_lock_init_recursive>:
 800434c:	4770      	bx	lr

0800434e <__retarget_lock_acquire_recursive>:
 800434e:	4770      	bx	lr

08004350 <__retarget_lock_release_recursive>:
 8004350:	4770      	bx	lr

08004352 <memcpy>:
 8004352:	440a      	add	r2, r1
 8004354:	4291      	cmp	r1, r2
 8004356:	f100 33ff 	add.w	r3, r0, #4294967295
 800435a:	d100      	bne.n	800435e <memcpy+0xc>
 800435c:	4770      	bx	lr
 800435e:	b510      	push	{r4, lr}
 8004360:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004368:	4291      	cmp	r1, r2
 800436a:	d1f9      	bne.n	8004360 <memcpy+0xe>
 800436c:	bd10      	pop	{r4, pc}

0800436e <memset>:
 800436e:	4402      	add	r2, r0
 8004370:	4603      	mov	r3, r0
 8004372:	4293      	cmp	r3, r2
 8004374:	d100      	bne.n	8004378 <memset+0xa>
 8004376:	4770      	bx	lr
 8004378:	f803 1b01 	strb.w	r1, [r3], #1
 800437c:	e7f9      	b.n	8004372 <memset+0x4>
	...

08004380 <sbrk_aligned>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4e0e      	ldr	r6, [pc, #56]	; (80043bc <sbrk_aligned+0x3c>)
 8004384:	460c      	mov	r4, r1
 8004386:	6831      	ldr	r1, [r6, #0]
 8004388:	4605      	mov	r5, r0
 800438a:	b911      	cbnz	r1, 8004392 <sbrk_aligned+0x12>
 800438c:	f000 f984 	bl	8004698 <_sbrk_r>
 8004390:	6030      	str	r0, [r6, #0]
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f97f 	bl	8004698 <_sbrk_r>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	d00a      	beq.n	80043b4 <sbrk_aligned+0x34>
 800439e:	1cc4      	adds	r4, r0, #3
 80043a0:	f024 0403 	bic.w	r4, r4, #3
 80043a4:	42a0      	cmp	r0, r4
 80043a6:	d007      	beq.n	80043b8 <sbrk_aligned+0x38>
 80043a8:	1a21      	subs	r1, r4, r0
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 f974 	bl	8004698 <_sbrk_r>
 80043b0:	3001      	adds	r0, #1
 80043b2:	d101      	bne.n	80043b8 <sbrk_aligned+0x38>
 80043b4:	f04f 34ff 	mov.w	r4, #4294967295
 80043b8:	4620      	mov	r0, r4
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	200010bc 	.word	0x200010bc

080043c0 <_malloc_r>:
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	1ccd      	adds	r5, r1, #3
 80043c6:	f025 0503 	bic.w	r5, r5, #3
 80043ca:	3508      	adds	r5, #8
 80043cc:	2d0c      	cmp	r5, #12
 80043ce:	bf38      	it	cc
 80043d0:	250c      	movcc	r5, #12
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	4607      	mov	r7, r0
 80043d6:	db01      	blt.n	80043dc <_malloc_r+0x1c>
 80043d8:	42a9      	cmp	r1, r5
 80043da:	d905      	bls.n	80043e8 <_malloc_r+0x28>
 80043dc:	230c      	movs	r3, #12
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	2600      	movs	r6, #0
 80043e2:	4630      	mov	r0, r6
 80043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e8:	4e2e      	ldr	r6, [pc, #184]	; (80044a4 <_malloc_r+0xe4>)
 80043ea:	f000 fbc5 	bl	8004b78 <__malloc_lock>
 80043ee:	6833      	ldr	r3, [r6, #0]
 80043f0:	461c      	mov	r4, r3
 80043f2:	bb34      	cbnz	r4, 8004442 <_malloc_r+0x82>
 80043f4:	4629      	mov	r1, r5
 80043f6:	4638      	mov	r0, r7
 80043f8:	f7ff ffc2 	bl	8004380 <sbrk_aligned>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	4604      	mov	r4, r0
 8004400:	d14d      	bne.n	800449e <_malloc_r+0xde>
 8004402:	6834      	ldr	r4, [r6, #0]
 8004404:	4626      	mov	r6, r4
 8004406:	2e00      	cmp	r6, #0
 8004408:	d140      	bne.n	800448c <_malloc_r+0xcc>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	4631      	mov	r1, r6
 800440e:	4638      	mov	r0, r7
 8004410:	eb04 0803 	add.w	r8, r4, r3
 8004414:	f000 f940 	bl	8004698 <_sbrk_r>
 8004418:	4580      	cmp	r8, r0
 800441a:	d13a      	bne.n	8004492 <_malloc_r+0xd2>
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	3503      	adds	r5, #3
 8004420:	1a6d      	subs	r5, r5, r1
 8004422:	f025 0503 	bic.w	r5, r5, #3
 8004426:	3508      	adds	r5, #8
 8004428:	2d0c      	cmp	r5, #12
 800442a:	bf38      	it	cc
 800442c:	250c      	movcc	r5, #12
 800442e:	4629      	mov	r1, r5
 8004430:	4638      	mov	r0, r7
 8004432:	f7ff ffa5 	bl	8004380 <sbrk_aligned>
 8004436:	3001      	adds	r0, #1
 8004438:	d02b      	beq.n	8004492 <_malloc_r+0xd2>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	442b      	add	r3, r5
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	e00e      	b.n	8004460 <_malloc_r+0xa0>
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	1b52      	subs	r2, r2, r5
 8004446:	d41e      	bmi.n	8004486 <_malloc_r+0xc6>
 8004448:	2a0b      	cmp	r2, #11
 800444a:	d916      	bls.n	800447a <_malloc_r+0xba>
 800444c:	1961      	adds	r1, r4, r5
 800444e:	42a3      	cmp	r3, r4
 8004450:	6025      	str	r5, [r4, #0]
 8004452:	bf18      	it	ne
 8004454:	6059      	strne	r1, [r3, #4]
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	bf08      	it	eq
 800445a:	6031      	streq	r1, [r6, #0]
 800445c:	5162      	str	r2, [r4, r5]
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	4638      	mov	r0, r7
 8004462:	f104 060b 	add.w	r6, r4, #11
 8004466:	f000 fb8d 	bl	8004b84 <__malloc_unlock>
 800446a:	f026 0607 	bic.w	r6, r6, #7
 800446e:	1d23      	adds	r3, r4, #4
 8004470:	1af2      	subs	r2, r6, r3
 8004472:	d0b6      	beq.n	80043e2 <_malloc_r+0x22>
 8004474:	1b9b      	subs	r3, r3, r6
 8004476:	50a3      	str	r3, [r4, r2]
 8004478:	e7b3      	b.n	80043e2 <_malloc_r+0x22>
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	42a3      	cmp	r3, r4
 800447e:	bf0c      	ite	eq
 8004480:	6032      	streq	r2, [r6, #0]
 8004482:	605a      	strne	r2, [r3, #4]
 8004484:	e7ec      	b.n	8004460 <_malloc_r+0xa0>
 8004486:	4623      	mov	r3, r4
 8004488:	6864      	ldr	r4, [r4, #4]
 800448a:	e7b2      	b.n	80043f2 <_malloc_r+0x32>
 800448c:	4634      	mov	r4, r6
 800448e:	6876      	ldr	r6, [r6, #4]
 8004490:	e7b9      	b.n	8004406 <_malloc_r+0x46>
 8004492:	230c      	movs	r3, #12
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4638      	mov	r0, r7
 8004498:	f000 fb74 	bl	8004b84 <__malloc_unlock>
 800449c:	e7a1      	b.n	80043e2 <_malloc_r+0x22>
 800449e:	6025      	str	r5, [r4, #0]
 80044a0:	e7de      	b.n	8004460 <_malloc_r+0xa0>
 80044a2:	bf00      	nop
 80044a4:	200010b8 	.word	0x200010b8

080044a8 <iprintf>:
 80044a8:	b40f      	push	{r0, r1, r2, r3}
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <iprintf+0x2c>)
 80044ac:	b513      	push	{r0, r1, r4, lr}
 80044ae:	681c      	ldr	r4, [r3, #0]
 80044b0:	b124      	cbz	r4, 80044bc <iprintf+0x14>
 80044b2:	69a3      	ldr	r3, [r4, #24]
 80044b4:	b913      	cbnz	r3, 80044bc <iprintf+0x14>
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff fe86 	bl	80041c8 <__sinit>
 80044bc:	ab05      	add	r3, sp, #20
 80044be:	9a04      	ldr	r2, [sp, #16]
 80044c0:	68a1      	ldr	r1, [r4, #8]
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	4620      	mov	r0, r4
 80044c6:	f000 fbd9 	bl	8004c7c <_vfiprintf_r>
 80044ca:	b002      	add	sp, #8
 80044cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d0:	b004      	add	sp, #16
 80044d2:	4770      	bx	lr
 80044d4:	20000010 	.word	0x20000010

080044d8 <_puts_r>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	460e      	mov	r6, r1
 80044dc:	4605      	mov	r5, r0
 80044de:	b118      	cbz	r0, 80044e8 <_puts_r+0x10>
 80044e0:	6983      	ldr	r3, [r0, #24]
 80044e2:	b90b      	cbnz	r3, 80044e8 <_puts_r+0x10>
 80044e4:	f7ff fe70 	bl	80041c8 <__sinit>
 80044e8:	69ab      	ldr	r3, [r5, #24]
 80044ea:	68ac      	ldr	r4, [r5, #8]
 80044ec:	b913      	cbnz	r3, 80044f4 <_puts_r+0x1c>
 80044ee:	4628      	mov	r0, r5
 80044f0:	f7ff fe6a 	bl	80041c8 <__sinit>
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <_puts_r+0xd0>)
 80044f6:	429c      	cmp	r4, r3
 80044f8:	d120      	bne.n	800453c <_puts_r+0x64>
 80044fa:	686c      	ldr	r4, [r5, #4]
 80044fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044fe:	07db      	lsls	r3, r3, #31
 8004500:	d405      	bmi.n	800450e <_puts_r+0x36>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	0598      	lsls	r0, r3, #22
 8004506:	d402      	bmi.n	800450e <_puts_r+0x36>
 8004508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450a:	f7ff ff20 	bl	800434e <__retarget_lock_acquire_recursive>
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	0719      	lsls	r1, r3, #28
 8004512:	d51d      	bpl.n	8004550 <_puts_r+0x78>
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	b1db      	cbz	r3, 8004550 <_puts_r+0x78>
 8004518:	3e01      	subs	r6, #1
 800451a:	68a3      	ldr	r3, [r4, #8]
 800451c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004520:	3b01      	subs	r3, #1
 8004522:	60a3      	str	r3, [r4, #8]
 8004524:	bb39      	cbnz	r1, 8004576 <_puts_r+0x9e>
 8004526:	2b00      	cmp	r3, #0
 8004528:	da38      	bge.n	800459c <_puts_r+0xc4>
 800452a:	4622      	mov	r2, r4
 800452c:	210a      	movs	r1, #10
 800452e:	4628      	mov	r0, r5
 8004530:	f000 f906 	bl	8004740 <__swbuf_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d011      	beq.n	800455c <_puts_r+0x84>
 8004538:	250a      	movs	r5, #10
 800453a:	e011      	b.n	8004560 <_puts_r+0x88>
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <_puts_r+0xd4>)
 800453e:	429c      	cmp	r4, r3
 8004540:	d101      	bne.n	8004546 <_puts_r+0x6e>
 8004542:	68ac      	ldr	r4, [r5, #8]
 8004544:	e7da      	b.n	80044fc <_puts_r+0x24>
 8004546:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <_puts_r+0xd8>)
 8004548:	429c      	cmp	r4, r3
 800454a:	bf08      	it	eq
 800454c:	68ec      	ldreq	r4, [r5, #12]
 800454e:	e7d5      	b.n	80044fc <_puts_r+0x24>
 8004550:	4621      	mov	r1, r4
 8004552:	4628      	mov	r0, r5
 8004554:	f000 f958 	bl	8004808 <__swsetup_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	d0dd      	beq.n	8004518 <_puts_r+0x40>
 800455c:	f04f 35ff 	mov.w	r5, #4294967295
 8004560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004562:	07da      	lsls	r2, r3, #31
 8004564:	d405      	bmi.n	8004572 <_puts_r+0x9a>
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	059b      	lsls	r3, r3, #22
 800456a:	d402      	bmi.n	8004572 <_puts_r+0x9a>
 800456c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800456e:	f7ff feef 	bl	8004350 <__retarget_lock_release_recursive>
 8004572:	4628      	mov	r0, r5
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	2b00      	cmp	r3, #0
 8004578:	da04      	bge.n	8004584 <_puts_r+0xac>
 800457a:	69a2      	ldr	r2, [r4, #24]
 800457c:	429a      	cmp	r2, r3
 800457e:	dc06      	bgt.n	800458e <_puts_r+0xb6>
 8004580:	290a      	cmp	r1, #10
 8004582:	d004      	beq.n	800458e <_puts_r+0xb6>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	6022      	str	r2, [r4, #0]
 800458a:	7019      	strb	r1, [r3, #0]
 800458c:	e7c5      	b.n	800451a <_puts_r+0x42>
 800458e:	4622      	mov	r2, r4
 8004590:	4628      	mov	r0, r5
 8004592:	f000 f8d5 	bl	8004740 <__swbuf_r>
 8004596:	3001      	adds	r0, #1
 8004598:	d1bf      	bne.n	800451a <_puts_r+0x42>
 800459a:	e7df      	b.n	800455c <_puts_r+0x84>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	250a      	movs	r5, #10
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	6022      	str	r2, [r4, #0]
 80045a4:	701d      	strb	r5, [r3, #0]
 80045a6:	e7db      	b.n	8004560 <_puts_r+0x88>
 80045a8:	08005424 	.word	0x08005424
 80045ac:	08005444 	.word	0x08005444
 80045b0:	08005404 	.word	0x08005404

080045b4 <puts>:
 80045b4:	4b02      	ldr	r3, [pc, #8]	; (80045c0 <puts+0xc>)
 80045b6:	4601      	mov	r1, r0
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f7ff bf8d 	b.w	80044d8 <_puts_r>
 80045be:	bf00      	nop
 80045c0:	20000010 	.word	0x20000010

080045c4 <cleanup_glue>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	460c      	mov	r4, r1
 80045c8:	6809      	ldr	r1, [r1, #0]
 80045ca:	4605      	mov	r5, r0
 80045cc:	b109      	cbz	r1, 80045d2 <cleanup_glue+0xe>
 80045ce:	f7ff fff9 	bl	80045c4 <cleanup_glue>
 80045d2:	4621      	mov	r1, r4
 80045d4:	4628      	mov	r0, r5
 80045d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045da:	f000 bad9 	b.w	8004b90 <_free_r>
	...

080045e0 <_reclaim_reent>:
 80045e0:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <_reclaim_reent+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4283      	cmp	r3, r0
 80045e6:	b570      	push	{r4, r5, r6, lr}
 80045e8:	4604      	mov	r4, r0
 80045ea:	d051      	beq.n	8004690 <_reclaim_reent+0xb0>
 80045ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045ee:	b143      	cbz	r3, 8004602 <_reclaim_reent+0x22>
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d14a      	bne.n	800468c <_reclaim_reent+0xac>
 80045f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	b111      	cbz	r1, 8004602 <_reclaim_reent+0x22>
 80045fc:	4620      	mov	r0, r4
 80045fe:	f000 fac7 	bl	8004b90 <_free_r>
 8004602:	6961      	ldr	r1, [r4, #20]
 8004604:	b111      	cbz	r1, 800460c <_reclaim_reent+0x2c>
 8004606:	4620      	mov	r0, r4
 8004608:	f000 fac2 	bl	8004b90 <_free_r>
 800460c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800460e:	b111      	cbz	r1, 8004616 <_reclaim_reent+0x36>
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fabd 	bl	8004b90 <_free_r>
 8004616:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004618:	b111      	cbz	r1, 8004620 <_reclaim_reent+0x40>
 800461a:	4620      	mov	r0, r4
 800461c:	f000 fab8 	bl	8004b90 <_free_r>
 8004620:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004622:	b111      	cbz	r1, 800462a <_reclaim_reent+0x4a>
 8004624:	4620      	mov	r0, r4
 8004626:	f000 fab3 	bl	8004b90 <_free_r>
 800462a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800462c:	b111      	cbz	r1, 8004634 <_reclaim_reent+0x54>
 800462e:	4620      	mov	r0, r4
 8004630:	f000 faae 	bl	8004b90 <_free_r>
 8004634:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004636:	b111      	cbz	r1, 800463e <_reclaim_reent+0x5e>
 8004638:	4620      	mov	r0, r4
 800463a:	f000 faa9 	bl	8004b90 <_free_r>
 800463e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004640:	b111      	cbz	r1, 8004648 <_reclaim_reent+0x68>
 8004642:	4620      	mov	r0, r4
 8004644:	f000 faa4 	bl	8004b90 <_free_r>
 8004648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800464a:	b111      	cbz	r1, 8004652 <_reclaim_reent+0x72>
 800464c:	4620      	mov	r0, r4
 800464e:	f000 fa9f 	bl	8004b90 <_free_r>
 8004652:	69a3      	ldr	r3, [r4, #24]
 8004654:	b1e3      	cbz	r3, 8004690 <_reclaim_reent+0xb0>
 8004656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004658:	4620      	mov	r0, r4
 800465a:	4798      	blx	r3
 800465c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800465e:	b1b9      	cbz	r1, 8004690 <_reclaim_reent+0xb0>
 8004660:	4620      	mov	r0, r4
 8004662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004666:	f7ff bfad 	b.w	80045c4 <cleanup_glue>
 800466a:	5949      	ldr	r1, [r1, r5]
 800466c:	b941      	cbnz	r1, 8004680 <_reclaim_reent+0xa0>
 800466e:	3504      	adds	r5, #4
 8004670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004672:	2d80      	cmp	r5, #128	; 0x80
 8004674:	68d9      	ldr	r1, [r3, #12]
 8004676:	d1f8      	bne.n	800466a <_reclaim_reent+0x8a>
 8004678:	4620      	mov	r0, r4
 800467a:	f000 fa89 	bl	8004b90 <_free_r>
 800467e:	e7ba      	b.n	80045f6 <_reclaim_reent+0x16>
 8004680:	680e      	ldr	r6, [r1, #0]
 8004682:	4620      	mov	r0, r4
 8004684:	f000 fa84 	bl	8004b90 <_free_r>
 8004688:	4631      	mov	r1, r6
 800468a:	e7ef      	b.n	800466c <_reclaim_reent+0x8c>
 800468c:	2500      	movs	r5, #0
 800468e:	e7ef      	b.n	8004670 <_reclaim_reent+0x90>
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	bf00      	nop
 8004694:	20000010 	.word	0x20000010

08004698 <_sbrk_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d06      	ldr	r5, [pc, #24]	; (80046b4 <_sbrk_r+0x1c>)
 800469c:	2300      	movs	r3, #0
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc f8c8 	bl	8000838 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_sbrk_r+0x1a>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_sbrk_r+0x1a>
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	200010c0 	.word	0x200010c0

080046b8 <__sread>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	460c      	mov	r4, r1
 80046bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c0:	f000 fda0 	bl	8005204 <_read_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	bfab      	itete	ge
 80046c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ca:	89a3      	ldrhlt	r3, [r4, #12]
 80046cc:	181b      	addge	r3, r3, r0
 80046ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046d2:	bfac      	ite	ge
 80046d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80046d6:	81a3      	strhlt	r3, [r4, #12]
 80046d8:	bd10      	pop	{r4, pc}

080046da <__swrite>:
 80046da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	461f      	mov	r7, r3
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	05db      	lsls	r3, r3, #23
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	4616      	mov	r6, r2
 80046ea:	d505      	bpl.n	80046f8 <__swrite+0x1e>
 80046ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f0:	2302      	movs	r3, #2
 80046f2:	2200      	movs	r2, #0
 80046f4:	f000 f9c8 	bl	8004a88 <_lseek_r>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	4632      	mov	r2, r6
 8004706:	463b      	mov	r3, r7
 8004708:	4628      	mov	r0, r5
 800470a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	f000 b869 	b.w	80047e4 <_write_r>

08004712 <__sseek>:
 8004712:	b510      	push	{r4, lr}
 8004714:	460c      	mov	r4, r1
 8004716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471a:	f000 f9b5 	bl	8004a88 <_lseek_r>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	bf15      	itete	ne
 8004724:	6560      	strne	r0, [r4, #84]	; 0x54
 8004726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800472a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800472e:	81a3      	strheq	r3, [r4, #12]
 8004730:	bf18      	it	ne
 8004732:	81a3      	strhne	r3, [r4, #12]
 8004734:	bd10      	pop	{r4, pc}

08004736 <__sclose>:
 8004736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473a:	f000 b8d3 	b.w	80048e4 <_close_r>
	...

08004740 <__swbuf_r>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	460e      	mov	r6, r1
 8004744:	4614      	mov	r4, r2
 8004746:	4605      	mov	r5, r0
 8004748:	b118      	cbz	r0, 8004752 <__swbuf_r+0x12>
 800474a:	6983      	ldr	r3, [r0, #24]
 800474c:	b90b      	cbnz	r3, 8004752 <__swbuf_r+0x12>
 800474e:	f7ff fd3b 	bl	80041c8 <__sinit>
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <__swbuf_r+0x98>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d12b      	bne.n	80047b0 <__swbuf_r+0x70>
 8004758:	686c      	ldr	r4, [r5, #4]
 800475a:	69a3      	ldr	r3, [r4, #24]
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	071a      	lsls	r2, r3, #28
 8004762:	d52f      	bpl.n	80047c4 <__swbuf_r+0x84>
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	b36b      	cbz	r3, 80047c4 <__swbuf_r+0x84>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1ac0      	subs	r0, r0, r3
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	b2f6      	uxtb	r6, r6
 8004772:	4283      	cmp	r3, r0
 8004774:	4637      	mov	r7, r6
 8004776:	dc04      	bgt.n	8004782 <__swbuf_r+0x42>
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f948 	bl	8004a10 <_fflush_r>
 8004780:	bb30      	cbnz	r0, 80047d0 <__swbuf_r+0x90>
 8004782:	68a3      	ldr	r3, [r4, #8]
 8004784:	3b01      	subs	r3, #1
 8004786:	60a3      	str	r3, [r4, #8]
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	6022      	str	r2, [r4, #0]
 800478e:	701e      	strb	r6, [r3, #0]
 8004790:	6963      	ldr	r3, [r4, #20]
 8004792:	3001      	adds	r0, #1
 8004794:	4283      	cmp	r3, r0
 8004796:	d004      	beq.n	80047a2 <__swbuf_r+0x62>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	07db      	lsls	r3, r3, #31
 800479c:	d506      	bpl.n	80047ac <__swbuf_r+0x6c>
 800479e:	2e0a      	cmp	r6, #10
 80047a0:	d104      	bne.n	80047ac <__swbuf_r+0x6c>
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 f933 	bl	8004a10 <_fflush_r>
 80047aa:	b988      	cbnz	r0, 80047d0 <__swbuf_r+0x90>
 80047ac:	4638      	mov	r0, r7
 80047ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <__swbuf_r+0x9c>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d101      	bne.n	80047ba <__swbuf_r+0x7a>
 80047b6:	68ac      	ldr	r4, [r5, #8]
 80047b8:	e7cf      	b.n	800475a <__swbuf_r+0x1a>
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <__swbuf_r+0xa0>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	bf08      	it	eq
 80047c0:	68ec      	ldreq	r4, [r5, #12]
 80047c2:	e7ca      	b.n	800475a <__swbuf_r+0x1a>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 f81e 	bl	8004808 <__swsetup_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d0cb      	beq.n	8004768 <__swbuf_r+0x28>
 80047d0:	f04f 37ff 	mov.w	r7, #4294967295
 80047d4:	e7ea      	b.n	80047ac <__swbuf_r+0x6c>
 80047d6:	bf00      	nop
 80047d8:	08005424 	.word	0x08005424
 80047dc:	08005444 	.word	0x08005444
 80047e0:	08005404 	.word	0x08005404

080047e4 <_write_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	; (8004804 <_write_r+0x20>)
 80047e8:	4604      	mov	r4, r0
 80047ea:	4608      	mov	r0, r1
 80047ec:	4611      	mov	r1, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fb fd7d 	bl	80002f2 <_write>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_write_r+0x1e>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_write_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200010c0 	.word	0x200010c0

08004808 <__swsetup_r>:
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <__swsetup_r+0xcc>)
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	b125      	cbz	r5, 800481e <__swsetup_r+0x16>
 8004814:	69ab      	ldr	r3, [r5, #24]
 8004816:	b913      	cbnz	r3, 800481e <__swsetup_r+0x16>
 8004818:	4628      	mov	r0, r5
 800481a:	f7ff fcd5 	bl	80041c8 <__sinit>
 800481e:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <__swsetup_r+0xd0>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d10f      	bne.n	8004844 <__swsetup_r+0x3c>
 8004824:	686c      	ldr	r4, [r5, #4]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800482c:	0719      	lsls	r1, r3, #28
 800482e:	d42c      	bmi.n	800488a <__swsetup_r+0x82>
 8004830:	06dd      	lsls	r5, r3, #27
 8004832:	d411      	bmi.n	8004858 <__swsetup_r+0x50>
 8004834:	2309      	movs	r3, #9
 8004836:	6033      	str	r3, [r6, #0]
 8004838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	e03e      	b.n	80048c2 <__swsetup_r+0xba>
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <__swsetup_r+0xd4>)
 8004846:	429c      	cmp	r4, r3
 8004848:	d101      	bne.n	800484e <__swsetup_r+0x46>
 800484a:	68ac      	ldr	r4, [r5, #8]
 800484c:	e7eb      	b.n	8004826 <__swsetup_r+0x1e>
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <__swsetup_r+0xd8>)
 8004850:	429c      	cmp	r4, r3
 8004852:	bf08      	it	eq
 8004854:	68ec      	ldreq	r4, [r5, #12]
 8004856:	e7e6      	b.n	8004826 <__swsetup_r+0x1e>
 8004858:	0758      	lsls	r0, r3, #29
 800485a:	d512      	bpl.n	8004882 <__swsetup_r+0x7a>
 800485c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800485e:	b141      	cbz	r1, 8004872 <__swsetup_r+0x6a>
 8004860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <__swsetup_r+0x66>
 8004868:	4630      	mov	r0, r6
 800486a:	f000 f991 	bl	8004b90 <_free_r>
 800486e:	2300      	movs	r3, #0
 8004870:	6363      	str	r3, [r4, #52]	; 0x34
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	2300      	movs	r3, #0
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	b94b      	cbnz	r3, 80048a2 <__swsetup_r+0x9a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d003      	beq.n	80048a2 <__swsetup_r+0x9a>
 800489a:	4621      	mov	r1, r4
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f92b 	bl	8004af8 <__smakebuf_r>
 80048a2:	89a0      	ldrh	r0, [r4, #12]
 80048a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048a8:	f010 0301 	ands.w	r3, r0, #1
 80048ac:	d00a      	beq.n	80048c4 <__swsetup_r+0xbc>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6963      	ldr	r3, [r4, #20]
 80048b4:	425b      	negs	r3, r3
 80048b6:	61a3      	str	r3, [r4, #24]
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b943      	cbnz	r3, 80048ce <__swsetup_r+0xc6>
 80048bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048c0:	d1ba      	bne.n	8004838 <__swsetup_r+0x30>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	0781      	lsls	r1, r0, #30
 80048c6:	bf58      	it	pl
 80048c8:	6963      	ldrpl	r3, [r4, #20]
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	e7f4      	b.n	80048b8 <__swsetup_r+0xb0>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e7f7      	b.n	80048c2 <__swsetup_r+0xba>
 80048d2:	bf00      	nop
 80048d4:	20000010 	.word	0x20000010
 80048d8:	08005424 	.word	0x08005424
 80048dc:	08005444 	.word	0x08005444
 80048e0:	08005404 	.word	0x08005404

080048e4 <_close_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	; (8004900 <_close_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fb ff6d 	bl	80007ce <_close>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_close_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_close_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200010c0 	.word	0x200010c0

08004904 <__sflush_r>:
 8004904:	898a      	ldrh	r2, [r1, #12]
 8004906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490a:	4605      	mov	r5, r0
 800490c:	0710      	lsls	r0, r2, #28
 800490e:	460c      	mov	r4, r1
 8004910:	d458      	bmi.n	80049c4 <__sflush_r+0xc0>
 8004912:	684b      	ldr	r3, [r1, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	dc05      	bgt.n	8004924 <__sflush_r+0x20>
 8004918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	dc02      	bgt.n	8004924 <__sflush_r+0x20>
 800491e:	2000      	movs	r0, #0
 8004920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004926:	2e00      	cmp	r6, #0
 8004928:	d0f9      	beq.n	800491e <__sflush_r+0x1a>
 800492a:	2300      	movs	r3, #0
 800492c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004930:	682f      	ldr	r7, [r5, #0]
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	d032      	beq.n	800499c <__sflush_r+0x98>
 8004936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	075a      	lsls	r2, r3, #29
 800493c:	d505      	bpl.n	800494a <__sflush_r+0x46>
 800493e:	6863      	ldr	r3, [r4, #4]
 8004940:	1ac0      	subs	r0, r0, r3
 8004942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004944:	b10b      	cbz	r3, 800494a <__sflush_r+0x46>
 8004946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004948:	1ac0      	subs	r0, r0, r3
 800494a:	2300      	movs	r3, #0
 800494c:	4602      	mov	r2, r0
 800494e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004950:	6a21      	ldr	r1, [r4, #32]
 8004952:	4628      	mov	r0, r5
 8004954:	47b0      	blx	r6
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	d106      	bne.n	800496a <__sflush_r+0x66>
 800495c:	6829      	ldr	r1, [r5, #0]
 800495e:	291d      	cmp	r1, #29
 8004960:	d82c      	bhi.n	80049bc <__sflush_r+0xb8>
 8004962:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <__sflush_r+0x108>)
 8004964:	40ca      	lsrs	r2, r1
 8004966:	07d6      	lsls	r6, r2, #31
 8004968:	d528      	bpl.n	80049bc <__sflush_r+0xb8>
 800496a:	2200      	movs	r2, #0
 800496c:	6062      	str	r2, [r4, #4]
 800496e:	04d9      	lsls	r1, r3, #19
 8004970:	6922      	ldr	r2, [r4, #16]
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	d504      	bpl.n	8004980 <__sflush_r+0x7c>
 8004976:	1c42      	adds	r2, r0, #1
 8004978:	d101      	bne.n	800497e <__sflush_r+0x7a>
 800497a:	682b      	ldr	r3, [r5, #0]
 800497c:	b903      	cbnz	r3, 8004980 <__sflush_r+0x7c>
 800497e:	6560      	str	r0, [r4, #84]	; 0x54
 8004980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004982:	602f      	str	r7, [r5, #0]
 8004984:	2900      	cmp	r1, #0
 8004986:	d0ca      	beq.n	800491e <__sflush_r+0x1a>
 8004988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800498c:	4299      	cmp	r1, r3
 800498e:	d002      	beq.n	8004996 <__sflush_r+0x92>
 8004990:	4628      	mov	r0, r5
 8004992:	f000 f8fd 	bl	8004b90 <_free_r>
 8004996:	2000      	movs	r0, #0
 8004998:	6360      	str	r0, [r4, #52]	; 0x34
 800499a:	e7c1      	b.n	8004920 <__sflush_r+0x1c>
 800499c:	6a21      	ldr	r1, [r4, #32]
 800499e:	2301      	movs	r3, #1
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	1c41      	adds	r1, r0, #1
 80049a6:	d1c7      	bne.n	8004938 <__sflush_r+0x34>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0c4      	beq.n	8004938 <__sflush_r+0x34>
 80049ae:	2b1d      	cmp	r3, #29
 80049b0:	d001      	beq.n	80049b6 <__sflush_r+0xb2>
 80049b2:	2b16      	cmp	r3, #22
 80049b4:	d101      	bne.n	80049ba <__sflush_r+0xb6>
 80049b6:	602f      	str	r7, [r5, #0]
 80049b8:	e7b1      	b.n	800491e <__sflush_r+0x1a>
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	e7ad      	b.n	8004920 <__sflush_r+0x1c>
 80049c4:	690f      	ldr	r7, [r1, #16]
 80049c6:	2f00      	cmp	r7, #0
 80049c8:	d0a9      	beq.n	800491e <__sflush_r+0x1a>
 80049ca:	0793      	lsls	r3, r2, #30
 80049cc:	680e      	ldr	r6, [r1, #0]
 80049ce:	bf08      	it	eq
 80049d0:	694b      	ldreq	r3, [r1, #20]
 80049d2:	600f      	str	r7, [r1, #0]
 80049d4:	bf18      	it	ne
 80049d6:	2300      	movne	r3, #0
 80049d8:	eba6 0807 	sub.w	r8, r6, r7
 80049dc:	608b      	str	r3, [r1, #8]
 80049de:	f1b8 0f00 	cmp.w	r8, #0
 80049e2:	dd9c      	ble.n	800491e <__sflush_r+0x1a>
 80049e4:	6a21      	ldr	r1, [r4, #32]
 80049e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049e8:	4643      	mov	r3, r8
 80049ea:	463a      	mov	r2, r7
 80049ec:	4628      	mov	r0, r5
 80049ee:	47b0      	blx	r6
 80049f0:	2800      	cmp	r0, #0
 80049f2:	dc06      	bgt.n	8004a02 <__sflush_r+0xfe>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	e78e      	b.n	8004920 <__sflush_r+0x1c>
 8004a02:	4407      	add	r7, r0
 8004a04:	eba8 0800 	sub.w	r8, r8, r0
 8004a08:	e7e9      	b.n	80049de <__sflush_r+0xda>
 8004a0a:	bf00      	nop
 8004a0c:	20400001 	.word	0x20400001

08004a10 <_fflush_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	4605      	mov	r5, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	b913      	cbnz	r3, 8004a20 <_fflush_r+0x10>
 8004a1a:	2500      	movs	r5, #0
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	b118      	cbz	r0, 8004a2a <_fflush_r+0x1a>
 8004a22:	6983      	ldr	r3, [r0, #24]
 8004a24:	b90b      	cbnz	r3, 8004a2a <_fflush_r+0x1a>
 8004a26:	f7ff fbcf 	bl	80041c8 <__sinit>
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <_fflush_r+0x6c>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	d11b      	bne.n	8004a68 <_fflush_r+0x58>
 8004a30:	686c      	ldr	r4, [r5, #4]
 8004a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ef      	beq.n	8004a1a <_fflush_r+0xa>
 8004a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a3c:	07d0      	lsls	r0, r2, #31
 8004a3e:	d404      	bmi.n	8004a4a <_fflush_r+0x3a>
 8004a40:	0599      	lsls	r1, r3, #22
 8004a42:	d402      	bmi.n	8004a4a <_fflush_r+0x3a>
 8004a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a46:	f7ff fc82 	bl	800434e <__retarget_lock_acquire_recursive>
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f7ff ff59 	bl	8004904 <__sflush_r>
 8004a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a54:	07da      	lsls	r2, r3, #31
 8004a56:	4605      	mov	r5, r0
 8004a58:	d4e0      	bmi.n	8004a1c <_fflush_r+0xc>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	059b      	lsls	r3, r3, #22
 8004a5e:	d4dd      	bmi.n	8004a1c <_fflush_r+0xc>
 8004a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a62:	f7ff fc75 	bl	8004350 <__retarget_lock_release_recursive>
 8004a66:	e7d9      	b.n	8004a1c <_fflush_r+0xc>
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <_fflush_r+0x70>)
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d101      	bne.n	8004a72 <_fflush_r+0x62>
 8004a6e:	68ac      	ldr	r4, [r5, #8]
 8004a70:	e7df      	b.n	8004a32 <_fflush_r+0x22>
 8004a72:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <_fflush_r+0x74>)
 8004a74:	429c      	cmp	r4, r3
 8004a76:	bf08      	it	eq
 8004a78:	68ec      	ldreq	r4, [r5, #12]
 8004a7a:	e7da      	b.n	8004a32 <_fflush_r+0x22>
 8004a7c:	08005424 	.word	0x08005424
 8004a80:	08005444 	.word	0x08005444
 8004a84:	08005404 	.word	0x08005404

08004a88 <_lseek_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d07      	ldr	r5, [pc, #28]	; (8004aa8 <_lseek_r+0x20>)
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	4608      	mov	r0, r1
 8004a90:	4611      	mov	r1, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7fb fec0 	bl	800081c <_lseek>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_lseek_r+0x1e>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_lseek_r+0x1e>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	200010c0 	.word	0x200010c0

08004aac <__swhatbuf_r>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	460e      	mov	r6, r1
 8004ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	b096      	sub	sp, #88	; 0x58
 8004ab8:	4614      	mov	r4, r2
 8004aba:	461d      	mov	r5, r3
 8004abc:	da08      	bge.n	8004ad0 <__swhatbuf_r+0x24>
 8004abe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	602a      	str	r2, [r5, #0]
 8004ac6:	061a      	lsls	r2, r3, #24
 8004ac8:	d410      	bmi.n	8004aec <__swhatbuf_r+0x40>
 8004aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ace:	e00e      	b.n	8004aee <__swhatbuf_r+0x42>
 8004ad0:	466a      	mov	r2, sp
 8004ad2:	f000 fba9 	bl	8005228 <_fstat_r>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	dbf1      	blt.n	8004abe <__swhatbuf_r+0x12>
 8004ada:	9a01      	ldr	r2, [sp, #4]
 8004adc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ae0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ae4:	425a      	negs	r2, r3
 8004ae6:	415a      	adcs	r2, r3
 8004ae8:	602a      	str	r2, [r5, #0]
 8004aea:	e7ee      	b.n	8004aca <__swhatbuf_r+0x1e>
 8004aec:	2340      	movs	r3, #64	; 0x40
 8004aee:	2000      	movs	r0, #0
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	b016      	add	sp, #88	; 0x58
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004af8 <__smakebuf_r>:
 8004af8:	898b      	ldrh	r3, [r1, #12]
 8004afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004afc:	079d      	lsls	r5, r3, #30
 8004afe:	4606      	mov	r6, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	d507      	bpl.n	8004b14 <__smakebuf_r+0x1c>
 8004b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	6123      	str	r3, [r4, #16]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	6163      	str	r3, [r4, #20]
 8004b10:	b002      	add	sp, #8
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	ab01      	add	r3, sp, #4
 8004b16:	466a      	mov	r2, sp
 8004b18:	f7ff ffc8 	bl	8004aac <__swhatbuf_r>
 8004b1c:	9900      	ldr	r1, [sp, #0]
 8004b1e:	4605      	mov	r5, r0
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff fc4d 	bl	80043c0 <_malloc_r>
 8004b26:	b948      	cbnz	r0, 8004b3c <__smakebuf_r+0x44>
 8004b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d4ef      	bmi.n	8004b10 <__smakebuf_r+0x18>
 8004b30:	f023 0303 	bic.w	r3, r3, #3
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	e7e3      	b.n	8004b04 <__smakebuf_r+0xc>
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <__smakebuf_r+0x7c>)
 8004b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	6020      	str	r0, [r4, #0]
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	9b00      	ldr	r3, [sp, #0]
 8004b4c:	6163      	str	r3, [r4, #20]
 8004b4e:	9b01      	ldr	r3, [sp, #4]
 8004b50:	6120      	str	r0, [r4, #16]
 8004b52:	b15b      	cbz	r3, 8004b6c <__smakebuf_r+0x74>
 8004b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f000 fb77 	bl	800524c <_isatty_r>
 8004b5e:	b128      	cbz	r0, 8004b6c <__smakebuf_r+0x74>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	89a0      	ldrh	r0, [r4, #12]
 8004b6e:	4305      	orrs	r5, r0
 8004b70:	81a5      	strh	r5, [r4, #12]
 8004b72:	e7cd      	b.n	8004b10 <__smakebuf_r+0x18>
 8004b74:	08004161 	.word	0x08004161

08004b78 <__malloc_lock>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__malloc_lock+0x8>)
 8004b7a:	f7ff bbe8 	b.w	800434e <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	200010b4 	.word	0x200010b4

08004b84 <__malloc_unlock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_unlock+0x8>)
 8004b86:	f7ff bbe3 	b.w	8004350 <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	200010b4 	.word	0x200010b4

08004b90 <_free_r>:
 8004b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b92:	2900      	cmp	r1, #0
 8004b94:	d044      	beq.n	8004c20 <_free_r+0x90>
 8004b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9a:	9001      	str	r0, [sp, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004ba2:	bfb8      	it	lt
 8004ba4:	18e4      	addlt	r4, r4, r3
 8004ba6:	f7ff ffe7 	bl	8004b78 <__malloc_lock>
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <_free_r+0x94>)
 8004bac:	9801      	ldr	r0, [sp, #4]
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	b933      	cbnz	r3, 8004bc0 <_free_r+0x30>
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	6014      	str	r4, [r2, #0]
 8004bb6:	b003      	add	sp, #12
 8004bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bbc:	f7ff bfe2 	b.w	8004b84 <__malloc_unlock>
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	d908      	bls.n	8004bd6 <_free_r+0x46>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf01      	itttt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	1949      	addeq	r1, r1, r5
 8004bd2:	6021      	streq	r1, [r4, #0]
 8004bd4:	e7ed      	b.n	8004bb2 <_free_r+0x22>
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b10b      	cbz	r3, 8004be0 <_free_r+0x50>
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d9fa      	bls.n	8004bd6 <_free_r+0x46>
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	1855      	adds	r5, r2, r1
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	d10b      	bne.n	8004c00 <_free_r+0x70>
 8004be8:	6824      	ldr	r4, [r4, #0]
 8004bea:	4421      	add	r1, r4
 8004bec:	1854      	adds	r4, r2, r1
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	d1e0      	bne.n	8004bb6 <_free_r+0x26>
 8004bf4:	681c      	ldr	r4, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	6053      	str	r3, [r2, #4]
 8004bfa:	4421      	add	r1, r4
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	e7da      	b.n	8004bb6 <_free_r+0x26>
 8004c00:	d902      	bls.n	8004c08 <_free_r+0x78>
 8004c02:	230c      	movs	r3, #12
 8004c04:	6003      	str	r3, [r0, #0]
 8004c06:	e7d6      	b.n	8004bb6 <_free_r+0x26>
 8004c08:	6825      	ldr	r5, [r4, #0]
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf04      	itt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	6063      	str	r3, [r4, #4]
 8004c16:	bf04      	itt	eq
 8004c18:	1949      	addeq	r1, r1, r5
 8004c1a:	6021      	streq	r1, [r4, #0]
 8004c1c:	6054      	str	r4, [r2, #4]
 8004c1e:	e7ca      	b.n	8004bb6 <_free_r+0x26>
 8004c20:	b003      	add	sp, #12
 8004c22:	bd30      	pop	{r4, r5, pc}
 8004c24:	200010b8 	.word	0x200010b8

08004c28 <__sfputc_r>:
 8004c28:	6893      	ldr	r3, [r2, #8]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	b410      	push	{r4}
 8004c30:	6093      	str	r3, [r2, #8]
 8004c32:	da08      	bge.n	8004c46 <__sfputc_r+0x1e>
 8004c34:	6994      	ldr	r4, [r2, #24]
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	db01      	blt.n	8004c3e <__sfputc_r+0x16>
 8004c3a:	290a      	cmp	r1, #10
 8004c3c:	d103      	bne.n	8004c46 <__sfputc_r+0x1e>
 8004c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c42:	f7ff bd7d 	b.w	8004740 <__swbuf_r>
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	1c58      	adds	r0, r3, #1
 8004c4a:	6010      	str	r0, [r2, #0]
 8004c4c:	7019      	strb	r1, [r3, #0]
 8004c4e:	4608      	mov	r0, r1
 8004c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <__sfputs_r>:
 8004c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c58:	4606      	mov	r6, r0
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	18d5      	adds	r5, r2, r3
 8004c60:	42ac      	cmp	r4, r5
 8004c62:	d101      	bne.n	8004c68 <__sfputs_r+0x12>
 8004c64:	2000      	movs	r0, #0
 8004c66:	e007      	b.n	8004c78 <__sfputs_r+0x22>
 8004c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6c:	463a      	mov	r2, r7
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff ffda 	bl	8004c28 <__sfputc_r>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d1f3      	bne.n	8004c60 <__sfputs_r+0xa>
 8004c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c7c <_vfiprintf_r>:
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	460d      	mov	r5, r1
 8004c82:	b09d      	sub	sp, #116	; 0x74
 8004c84:	4614      	mov	r4, r2
 8004c86:	4698      	mov	r8, r3
 8004c88:	4606      	mov	r6, r0
 8004c8a:	b118      	cbz	r0, 8004c94 <_vfiprintf_r+0x18>
 8004c8c:	6983      	ldr	r3, [r0, #24]
 8004c8e:	b90b      	cbnz	r3, 8004c94 <_vfiprintf_r+0x18>
 8004c90:	f7ff fa9a 	bl	80041c8 <__sinit>
 8004c94:	4b89      	ldr	r3, [pc, #548]	; (8004ebc <_vfiprintf_r+0x240>)
 8004c96:	429d      	cmp	r5, r3
 8004c98:	d11b      	bne.n	8004cd2 <_vfiprintf_r+0x56>
 8004c9a:	6875      	ldr	r5, [r6, #4]
 8004c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c9e:	07d9      	lsls	r1, r3, #31
 8004ca0:	d405      	bmi.n	8004cae <_vfiprintf_r+0x32>
 8004ca2:	89ab      	ldrh	r3, [r5, #12]
 8004ca4:	059a      	lsls	r2, r3, #22
 8004ca6:	d402      	bmi.n	8004cae <_vfiprintf_r+0x32>
 8004ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004caa:	f7ff fb50 	bl	800434e <__retarget_lock_acquire_recursive>
 8004cae:	89ab      	ldrh	r3, [r5, #12]
 8004cb0:	071b      	lsls	r3, r3, #28
 8004cb2:	d501      	bpl.n	8004cb8 <_vfiprintf_r+0x3c>
 8004cb4:	692b      	ldr	r3, [r5, #16]
 8004cb6:	b9eb      	cbnz	r3, 8004cf4 <_vfiprintf_r+0x78>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7ff fda4 	bl	8004808 <__swsetup_r>
 8004cc0:	b1c0      	cbz	r0, 8004cf4 <_vfiprintf_r+0x78>
 8004cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc4:	07dc      	lsls	r4, r3, #31
 8004cc6:	d50e      	bpl.n	8004ce6 <_vfiprintf_r+0x6a>
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	b01d      	add	sp, #116	; 0x74
 8004cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	; (8004ec0 <_vfiprintf_r+0x244>)
 8004cd4:	429d      	cmp	r5, r3
 8004cd6:	d101      	bne.n	8004cdc <_vfiprintf_r+0x60>
 8004cd8:	68b5      	ldr	r5, [r6, #8]
 8004cda:	e7df      	b.n	8004c9c <_vfiprintf_r+0x20>
 8004cdc:	4b79      	ldr	r3, [pc, #484]	; (8004ec4 <_vfiprintf_r+0x248>)
 8004cde:	429d      	cmp	r5, r3
 8004ce0:	bf08      	it	eq
 8004ce2:	68f5      	ldreq	r5, [r6, #12]
 8004ce4:	e7da      	b.n	8004c9c <_vfiprintf_r+0x20>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	0598      	lsls	r0, r3, #22
 8004cea:	d4ed      	bmi.n	8004cc8 <_vfiprintf_r+0x4c>
 8004cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cee:	f7ff fb2f 	bl	8004350 <__retarget_lock_release_recursive>
 8004cf2:	e7e9      	b.n	8004cc8 <_vfiprintf_r+0x4c>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d02:	2330      	movs	r3, #48	; 0x30
 8004d04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ec8 <_vfiprintf_r+0x24c>
 8004d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d0c:	f04f 0901 	mov.w	r9, #1
 8004d10:	4623      	mov	r3, r4
 8004d12:	469a      	mov	sl, r3
 8004d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d18:	b10a      	cbz	r2, 8004d1e <_vfiprintf_r+0xa2>
 8004d1a:	2a25      	cmp	r2, #37	; 0x25
 8004d1c:	d1f9      	bne.n	8004d12 <_vfiprintf_r+0x96>
 8004d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d22:	d00b      	beq.n	8004d3c <_vfiprintf_r+0xc0>
 8004d24:	465b      	mov	r3, fp
 8004d26:	4622      	mov	r2, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ff93 	bl	8004c56 <__sfputs_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	f000 80aa 	beq.w	8004e8a <_vfiprintf_r+0x20e>
 8004d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d38:	445a      	add	r2, fp
 8004d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a2 	beq.w	8004e8a <_vfiprintf_r+0x20e>
 8004d46:	2300      	movs	r3, #0
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d50:	f10a 0a01 	add.w	sl, sl, #1
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	9307      	str	r3, [sp, #28]
 8004d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d5e:	4654      	mov	r4, sl
 8004d60:	2205      	movs	r2, #5
 8004d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d66:	4858      	ldr	r0, [pc, #352]	; (8004ec8 <_vfiprintf_r+0x24c>)
 8004d68:	f7fb fa32 	bl	80001d0 <memchr>
 8004d6c:	9a04      	ldr	r2, [sp, #16]
 8004d6e:	b9d8      	cbnz	r0, 8004da8 <_vfiprintf_r+0x12c>
 8004d70:	06d1      	lsls	r1, r2, #27
 8004d72:	bf44      	itt	mi
 8004d74:	2320      	movmi	r3, #32
 8004d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d7a:	0713      	lsls	r3, r2, #28
 8004d7c:	bf44      	itt	mi
 8004d7e:	232b      	movmi	r3, #43	; 0x2b
 8004d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d84:	f89a 3000 	ldrb.w	r3, [sl]
 8004d88:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8a:	d015      	beq.n	8004db8 <_vfiprintf_r+0x13c>
 8004d8c:	9a07      	ldr	r2, [sp, #28]
 8004d8e:	4654      	mov	r4, sl
 8004d90:	2000      	movs	r0, #0
 8004d92:	f04f 0c0a 	mov.w	ip, #10
 8004d96:	4621      	mov	r1, r4
 8004d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9c:	3b30      	subs	r3, #48	; 0x30
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	d94e      	bls.n	8004e40 <_vfiprintf_r+0x1c4>
 8004da2:	b1b0      	cbz	r0, 8004dd2 <_vfiprintf_r+0x156>
 8004da4:	9207      	str	r2, [sp, #28]
 8004da6:	e014      	b.n	8004dd2 <_vfiprintf_r+0x156>
 8004da8:	eba0 0308 	sub.w	r3, r0, r8
 8004dac:	fa09 f303 	lsl.w	r3, r9, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	46a2      	mov	sl, r4
 8004db6:	e7d2      	b.n	8004d5e <_vfiprintf_r+0xe2>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	1d19      	adds	r1, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9103      	str	r1, [sp, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bfbb      	ittet	lt
 8004dc4:	425b      	neglt	r3, r3
 8004dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8004dca:	9307      	strge	r3, [sp, #28]
 8004dcc:	9307      	strlt	r3, [sp, #28]
 8004dce:	bfb8      	it	lt
 8004dd0:	9204      	strlt	r2, [sp, #16]
 8004dd2:	7823      	ldrb	r3, [r4, #0]
 8004dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd6:	d10c      	bne.n	8004df2 <_vfiprintf_r+0x176>
 8004dd8:	7863      	ldrb	r3, [r4, #1]
 8004dda:	2b2a      	cmp	r3, #42	; 0x2a
 8004ddc:	d135      	bne.n	8004e4a <_vfiprintf_r+0x1ce>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	1d1a      	adds	r2, r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	9203      	str	r2, [sp, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfb8      	it	lt
 8004dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dee:	3402      	adds	r4, #2
 8004df0:	9305      	str	r3, [sp, #20]
 8004df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ed8 <_vfiprintf_r+0x25c>
 8004df6:	7821      	ldrb	r1, [r4, #0]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f7fb f9e8 	bl	80001d0 <memchr>
 8004e00:	b140      	cbz	r0, 8004e14 <_vfiprintf_r+0x198>
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	eba0 000a 	sub.w	r0, r0, sl
 8004e08:	fa03 f000 	lsl.w	r0, r3, r0
 8004e0c:	9b04      	ldr	r3, [sp, #16]
 8004e0e:	4303      	orrs	r3, r0
 8004e10:	3401      	adds	r4, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	482c      	ldr	r0, [pc, #176]	; (8004ecc <_vfiprintf_r+0x250>)
 8004e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e1e:	2206      	movs	r2, #6
 8004e20:	f7fb f9d6 	bl	80001d0 <memchr>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d03f      	beq.n	8004ea8 <_vfiprintf_r+0x22c>
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <_vfiprintf_r+0x254>)
 8004e2a:	bb1b      	cbnz	r3, 8004e74 <_vfiprintf_r+0x1f8>
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	3307      	adds	r3, #7
 8004e30:	f023 0307 	bic.w	r3, r3, #7
 8004e34:	3308      	adds	r3, #8
 8004e36:	9303      	str	r3, [sp, #12]
 8004e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3a:	443b      	add	r3, r7
 8004e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3e:	e767      	b.n	8004d10 <_vfiprintf_r+0x94>
 8004e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e44:	460c      	mov	r4, r1
 8004e46:	2001      	movs	r0, #1
 8004e48:	e7a5      	b.n	8004d96 <_vfiprintf_r+0x11a>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	3401      	adds	r4, #1
 8004e4e:	9305      	str	r3, [sp, #20]
 8004e50:	4619      	mov	r1, r3
 8004e52:	f04f 0c0a 	mov.w	ip, #10
 8004e56:	4620      	mov	r0, r4
 8004e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e5c:	3a30      	subs	r2, #48	; 0x30
 8004e5e:	2a09      	cmp	r2, #9
 8004e60:	d903      	bls.n	8004e6a <_vfiprintf_r+0x1ee>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0c5      	beq.n	8004df2 <_vfiprintf_r+0x176>
 8004e66:	9105      	str	r1, [sp, #20]
 8004e68:	e7c3      	b.n	8004df2 <_vfiprintf_r+0x176>
 8004e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e6e:	4604      	mov	r4, r0
 8004e70:	2301      	movs	r3, #1
 8004e72:	e7f0      	b.n	8004e56 <_vfiprintf_r+0x1da>
 8004e74:	ab03      	add	r3, sp, #12
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	462a      	mov	r2, r5
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <_vfiprintf_r+0x258>)
 8004e7c:	a904      	add	r1, sp, #16
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f3af 8000 	nop.w
 8004e84:	4607      	mov	r7, r0
 8004e86:	1c78      	adds	r0, r7, #1
 8004e88:	d1d6      	bne.n	8004e38 <_vfiprintf_r+0x1bc>
 8004e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e8c:	07d9      	lsls	r1, r3, #31
 8004e8e:	d405      	bmi.n	8004e9c <_vfiprintf_r+0x220>
 8004e90:	89ab      	ldrh	r3, [r5, #12]
 8004e92:	059a      	lsls	r2, r3, #22
 8004e94:	d402      	bmi.n	8004e9c <_vfiprintf_r+0x220>
 8004e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e98:	f7ff fa5a 	bl	8004350 <__retarget_lock_release_recursive>
 8004e9c:	89ab      	ldrh	r3, [r5, #12]
 8004e9e:	065b      	lsls	r3, r3, #25
 8004ea0:	f53f af12 	bmi.w	8004cc8 <_vfiprintf_r+0x4c>
 8004ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea6:	e711      	b.n	8004ccc <_vfiprintf_r+0x50>
 8004ea8:	ab03      	add	r3, sp, #12
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	462a      	mov	r2, r5
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <_vfiprintf_r+0x258>)
 8004eb0:	a904      	add	r1, sp, #16
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f000 f880 	bl	8004fb8 <_printf_i>
 8004eb8:	e7e4      	b.n	8004e84 <_vfiprintf_r+0x208>
 8004eba:	bf00      	nop
 8004ebc:	08005424 	.word	0x08005424
 8004ec0:	08005444 	.word	0x08005444
 8004ec4:	08005404 	.word	0x08005404
 8004ec8:	08005468 	.word	0x08005468
 8004ecc:	08005472 	.word	0x08005472
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	08004c57 	.word	0x08004c57
 8004ed8:	0800546e 	.word	0x0800546e

08004edc <_printf_common>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	4699      	mov	r9, r3
 8004ee4:	688a      	ldr	r2, [r1, #8]
 8004ee6:	690b      	ldr	r3, [r1, #16]
 8004ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bfb8      	it	lt
 8004ef0:	4613      	movlt	r3, r2
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b10a      	cbz	r2, 8004f02 <_printf_common+0x26>
 8004efe:	3301      	adds	r3, #1
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	0699      	lsls	r1, r3, #26
 8004f06:	bf42      	ittt	mi
 8004f08:	6833      	ldrmi	r3, [r6, #0]
 8004f0a:	3302      	addmi	r3, #2
 8004f0c:	6033      	strmi	r3, [r6, #0]
 8004f0e:	6825      	ldr	r5, [r4, #0]
 8004f10:	f015 0506 	ands.w	r5, r5, #6
 8004f14:	d106      	bne.n	8004f24 <_printf_common+0x48>
 8004f16:	f104 0a19 	add.w	sl, r4, #25
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	6832      	ldr	r2, [r6, #0]
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dc26      	bgt.n	8004f72 <_printf_common+0x96>
 8004f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f28:	1e13      	subs	r3, r2, #0
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	bf18      	it	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	0692      	lsls	r2, r2, #26
 8004f32:	d42b      	bmi.n	8004f8c <_printf_common+0xb0>
 8004f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f38:	4649      	mov	r1, r9
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c0      	blx	r8
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d01e      	beq.n	8004f80 <_printf_common+0xa4>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	68e5      	ldr	r5, [r4, #12]
 8004f46:	6832      	ldr	r2, [r6, #0]
 8004f48:	f003 0306 	and.w	r3, r3, #6
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	bf08      	it	eq
 8004f50:	1aad      	subeq	r5, r5, r2
 8004f52:	68a3      	ldr	r3, [r4, #8]
 8004f54:	6922      	ldr	r2, [r4, #16]
 8004f56:	bf0c      	ite	eq
 8004f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f5c:	2500      	movne	r5, #0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	bfc4      	itt	gt
 8004f62:	1a9b      	subgt	r3, r3, r2
 8004f64:	18ed      	addgt	r5, r5, r3
 8004f66:	2600      	movs	r6, #0
 8004f68:	341a      	adds	r4, #26
 8004f6a:	42b5      	cmp	r5, r6
 8004f6c:	d11a      	bne.n	8004fa4 <_printf_common+0xc8>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e008      	b.n	8004f84 <_printf_common+0xa8>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4652      	mov	r2, sl
 8004f76:	4649      	mov	r1, r9
 8004f78:	4638      	mov	r0, r7
 8004f7a:	47c0      	blx	r8
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_printf_common+0xac>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	3501      	adds	r5, #1
 8004f8a:	e7c6      	b.n	8004f1a <_printf_common+0x3e>
 8004f8c:	18e1      	adds	r1, r4, r3
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	2030      	movs	r0, #48	; 0x30
 8004f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f96:	4422      	add	r2, r4
 8004f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	e7c7      	b.n	8004f34 <_printf_common+0x58>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d0e6      	beq.n	8004f80 <_printf_common+0xa4>
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7d9      	b.n	8004f6a <_printf_common+0x8e>
	...

08004fb8 <_printf_i>:
 8004fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbc:	7e0f      	ldrb	r7, [r1, #24]
 8004fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fc0:	2f78      	cmp	r7, #120	; 0x78
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fce:	d807      	bhi.n	8004fe0 <_printf_i+0x28>
 8004fd0:	2f62      	cmp	r7, #98	; 0x62
 8004fd2:	d80a      	bhi.n	8004fea <_printf_i+0x32>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	f000 80d8 	beq.w	800518a <_printf_i+0x1d2>
 8004fda:	2f58      	cmp	r7, #88	; 0x58
 8004fdc:	f000 80a3 	beq.w	8005126 <_printf_i+0x16e>
 8004fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe8:	e03a      	b.n	8005060 <_printf_i+0xa8>
 8004fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fee:	2b15      	cmp	r3, #21
 8004ff0:	d8f6      	bhi.n	8004fe0 <_printf_i+0x28>
 8004ff2:	a101      	add	r1, pc, #4	; (adr r1, 8004ff8 <_printf_i+0x40>)
 8004ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005065 	.word	0x08005065
 8005000:	08004fe1 	.word	0x08004fe1
 8005004:	08004fe1 	.word	0x08004fe1
 8005008:	08004fe1 	.word	0x08004fe1
 800500c:	08004fe1 	.word	0x08004fe1
 8005010:	08005065 	.word	0x08005065
 8005014:	08004fe1 	.word	0x08004fe1
 8005018:	08004fe1 	.word	0x08004fe1
 800501c:	08004fe1 	.word	0x08004fe1
 8005020:	08004fe1 	.word	0x08004fe1
 8005024:	08005171 	.word	0x08005171
 8005028:	08005095 	.word	0x08005095
 800502c:	08005153 	.word	0x08005153
 8005030:	08004fe1 	.word	0x08004fe1
 8005034:	08004fe1 	.word	0x08004fe1
 8005038:	08005193 	.word	0x08005193
 800503c:	08004fe1 	.word	0x08004fe1
 8005040:	08005095 	.word	0x08005095
 8005044:	08004fe1 	.word	0x08004fe1
 8005048:	08004fe1 	.word	0x08004fe1
 800504c:	0800515b 	.word	0x0800515b
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	602a      	str	r2, [r5, #0]
 8005058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800505c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005060:	2301      	movs	r3, #1
 8005062:	e0a3      	b.n	80051ac <_printf_i+0x1f4>
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	6829      	ldr	r1, [r5, #0]
 8005068:	0606      	lsls	r6, r0, #24
 800506a:	f101 0304 	add.w	r3, r1, #4
 800506e:	d50a      	bpl.n	8005086 <_printf_i+0xce>
 8005070:	680e      	ldr	r6, [r1, #0]
 8005072:	602b      	str	r3, [r5, #0]
 8005074:	2e00      	cmp	r6, #0
 8005076:	da03      	bge.n	8005080 <_printf_i+0xc8>
 8005078:	232d      	movs	r3, #45	; 0x2d
 800507a:	4276      	negs	r6, r6
 800507c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005080:	485e      	ldr	r0, [pc, #376]	; (80051fc <_printf_i+0x244>)
 8005082:	230a      	movs	r3, #10
 8005084:	e019      	b.n	80050ba <_printf_i+0x102>
 8005086:	680e      	ldr	r6, [r1, #0]
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800508e:	bf18      	it	ne
 8005090:	b236      	sxthne	r6, r6
 8005092:	e7ef      	b.n	8005074 <_printf_i+0xbc>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	6029      	str	r1, [r5, #0]
 800509c:	0601      	lsls	r1, r0, #24
 800509e:	d501      	bpl.n	80050a4 <_printf_i+0xec>
 80050a0:	681e      	ldr	r6, [r3, #0]
 80050a2:	e002      	b.n	80050aa <_printf_i+0xf2>
 80050a4:	0646      	lsls	r6, r0, #25
 80050a6:	d5fb      	bpl.n	80050a0 <_printf_i+0xe8>
 80050a8:	881e      	ldrh	r6, [r3, #0]
 80050aa:	4854      	ldr	r0, [pc, #336]	; (80051fc <_printf_i+0x244>)
 80050ac:	2f6f      	cmp	r7, #111	; 0x6f
 80050ae:	bf0c      	ite	eq
 80050b0:	2308      	moveq	r3, #8
 80050b2:	230a      	movne	r3, #10
 80050b4:	2100      	movs	r1, #0
 80050b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ba:	6865      	ldr	r5, [r4, #4]
 80050bc:	60a5      	str	r5, [r4, #8]
 80050be:	2d00      	cmp	r5, #0
 80050c0:	bfa2      	ittt	ge
 80050c2:	6821      	ldrge	r1, [r4, #0]
 80050c4:	f021 0104 	bicge.w	r1, r1, #4
 80050c8:	6021      	strge	r1, [r4, #0]
 80050ca:	b90e      	cbnz	r6, 80050d0 <_printf_i+0x118>
 80050cc:	2d00      	cmp	r5, #0
 80050ce:	d04d      	beq.n	800516c <_printf_i+0x1b4>
 80050d0:	4615      	mov	r5, r2
 80050d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80050d6:	fb03 6711 	mls	r7, r3, r1, r6
 80050da:	5dc7      	ldrb	r7, [r0, r7]
 80050dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e0:	4637      	mov	r7, r6
 80050e2:	42bb      	cmp	r3, r7
 80050e4:	460e      	mov	r6, r1
 80050e6:	d9f4      	bls.n	80050d2 <_printf_i+0x11a>
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d10b      	bne.n	8005104 <_printf_i+0x14c>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	07de      	lsls	r6, r3, #31
 80050f0:	d508      	bpl.n	8005104 <_printf_i+0x14c>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	6861      	ldr	r1, [r4, #4]
 80050f6:	4299      	cmp	r1, r3
 80050f8:	bfde      	ittt	le
 80050fa:	2330      	movle	r3, #48	; 0x30
 80050fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005100:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005104:	1b52      	subs	r2, r2, r5
 8005106:	6122      	str	r2, [r4, #16]
 8005108:	f8cd a000 	str.w	sl, [sp]
 800510c:	464b      	mov	r3, r9
 800510e:	aa03      	add	r2, sp, #12
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f7ff fee2 	bl	8004edc <_printf_common>
 8005118:	3001      	adds	r0, #1
 800511a:	d14c      	bne.n	80051b6 <_printf_i+0x1fe>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	b004      	add	sp, #16
 8005122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005126:	4835      	ldr	r0, [pc, #212]	; (80051fc <_printf_i+0x244>)
 8005128:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800512c:	6829      	ldr	r1, [r5, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f851 6b04 	ldr.w	r6, [r1], #4
 8005134:	6029      	str	r1, [r5, #0]
 8005136:	061d      	lsls	r5, r3, #24
 8005138:	d514      	bpl.n	8005164 <_printf_i+0x1ac>
 800513a:	07df      	lsls	r7, r3, #31
 800513c:	bf44      	itt	mi
 800513e:	f043 0320 	orrmi.w	r3, r3, #32
 8005142:	6023      	strmi	r3, [r4, #0]
 8005144:	b91e      	cbnz	r6, 800514e <_printf_i+0x196>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	f023 0320 	bic.w	r3, r3, #32
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	2310      	movs	r3, #16
 8005150:	e7b0      	b.n	80050b4 <_printf_i+0xfc>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	f043 0320 	orr.w	r3, r3, #32
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	2378      	movs	r3, #120	; 0x78
 800515c:	4828      	ldr	r0, [pc, #160]	; (8005200 <_printf_i+0x248>)
 800515e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005162:	e7e3      	b.n	800512c <_printf_i+0x174>
 8005164:	0659      	lsls	r1, r3, #25
 8005166:	bf48      	it	mi
 8005168:	b2b6      	uxthmi	r6, r6
 800516a:	e7e6      	b.n	800513a <_printf_i+0x182>
 800516c:	4615      	mov	r5, r2
 800516e:	e7bb      	b.n	80050e8 <_printf_i+0x130>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	6826      	ldr	r6, [r4, #0]
 8005174:	6961      	ldr	r1, [r4, #20]
 8005176:	1d18      	adds	r0, r3, #4
 8005178:	6028      	str	r0, [r5, #0]
 800517a:	0635      	lsls	r5, r6, #24
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	d501      	bpl.n	8005184 <_printf_i+0x1cc>
 8005180:	6019      	str	r1, [r3, #0]
 8005182:	e002      	b.n	800518a <_printf_i+0x1d2>
 8005184:	0670      	lsls	r0, r6, #25
 8005186:	d5fb      	bpl.n	8005180 <_printf_i+0x1c8>
 8005188:	8019      	strh	r1, [r3, #0]
 800518a:	2300      	movs	r3, #0
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	4615      	mov	r5, r2
 8005190:	e7ba      	b.n	8005108 <_printf_i+0x150>
 8005192:	682b      	ldr	r3, [r5, #0]
 8005194:	1d1a      	adds	r2, r3, #4
 8005196:	602a      	str	r2, [r5, #0]
 8005198:	681d      	ldr	r5, [r3, #0]
 800519a:	6862      	ldr	r2, [r4, #4]
 800519c:	2100      	movs	r1, #0
 800519e:	4628      	mov	r0, r5
 80051a0:	f7fb f816 	bl	80001d0 <memchr>
 80051a4:	b108      	cbz	r0, 80051aa <_printf_i+0x1f2>
 80051a6:	1b40      	subs	r0, r0, r5
 80051a8:	6060      	str	r0, [r4, #4]
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	6123      	str	r3, [r4, #16]
 80051ae:	2300      	movs	r3, #0
 80051b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b4:	e7a8      	b.n	8005108 <_printf_i+0x150>
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	462a      	mov	r2, r5
 80051ba:	4649      	mov	r1, r9
 80051bc:	4640      	mov	r0, r8
 80051be:	47d0      	blx	sl
 80051c0:	3001      	adds	r0, #1
 80051c2:	d0ab      	beq.n	800511c <_printf_i+0x164>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	079b      	lsls	r3, r3, #30
 80051c8:	d413      	bmi.n	80051f2 <_printf_i+0x23a>
 80051ca:	68e0      	ldr	r0, [r4, #12]
 80051cc:	9b03      	ldr	r3, [sp, #12]
 80051ce:	4298      	cmp	r0, r3
 80051d0:	bfb8      	it	lt
 80051d2:	4618      	movlt	r0, r3
 80051d4:	e7a4      	b.n	8005120 <_printf_i+0x168>
 80051d6:	2301      	movs	r3, #1
 80051d8:	4632      	mov	r2, r6
 80051da:	4649      	mov	r1, r9
 80051dc:	4640      	mov	r0, r8
 80051de:	47d0      	blx	sl
 80051e0:	3001      	adds	r0, #1
 80051e2:	d09b      	beq.n	800511c <_printf_i+0x164>
 80051e4:	3501      	adds	r5, #1
 80051e6:	68e3      	ldr	r3, [r4, #12]
 80051e8:	9903      	ldr	r1, [sp, #12]
 80051ea:	1a5b      	subs	r3, r3, r1
 80051ec:	42ab      	cmp	r3, r5
 80051ee:	dcf2      	bgt.n	80051d6 <_printf_i+0x21e>
 80051f0:	e7eb      	b.n	80051ca <_printf_i+0x212>
 80051f2:	2500      	movs	r5, #0
 80051f4:	f104 0619 	add.w	r6, r4, #25
 80051f8:	e7f5      	b.n	80051e6 <_printf_i+0x22e>
 80051fa:	bf00      	nop
 80051fc:	08005479 	.word	0x08005479
 8005200:	0800548a 	.word	0x0800548a

08005204 <_read_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	; (8005224 <_read_r+0x20>)
 8005208:	4604      	mov	r4, r0
 800520a:	4608      	mov	r0, r1
 800520c:	4611      	mov	r1, r2
 800520e:	2200      	movs	r2, #0
 8005210:	602a      	str	r2, [r5, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f7fb fabe 	bl	8000794 <_read>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_read_r+0x1e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_read_r+0x1e>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	200010c0 	.word	0x200010c0

08005228 <_fstat_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	; (8005248 <_fstat_r+0x20>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	4611      	mov	r1, r2
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	f7fb fad6 	bl	80007e6 <_fstat>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d102      	bne.n	8005244 <_fstat_r+0x1c>
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	b103      	cbz	r3, 8005244 <_fstat_r+0x1c>
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	bd38      	pop	{r3, r4, r5, pc}
 8005246:	bf00      	nop
 8005248:	200010c0 	.word	0x200010c0

0800524c <_isatty_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_isatty_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fb fad5 	bl	8000806 <_isatty>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_isatty_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_isatty_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	200010c0 	.word	0x200010c0

0800526c <_init>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr

08005278 <_fini>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr
