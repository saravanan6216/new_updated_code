
i2c_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002960  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b28  08002b28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b28  08002b28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002b3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002b3c  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095d7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180d  00000000  00000000  00029613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b28  00000000  00000000  0002c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad96  00000000  00000000  00050b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1614  00000000  00000000  0005b8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ceda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  0013cf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ad0 	.word	0x08002ad0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ad0 	.word	0x08002ad0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 f9e5 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f825 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8b5 	bl	8000344 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f873 	bl	80002c4 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_I2C_Slave_Receive(&hi2c1, &pData, 1, 30);
 80001de:	1df9      	adds	r1, r7, #7
 80001e0:	231e      	movs	r3, #30
 80001e2:	2201      	movs	r2, #1
 80001e4:	480d      	ldr	r0, [pc, #52]	; (800021c <main+0x54>)
 80001e6:	f000 fdb0 	bl	8000d4a <HAL_I2C_Slave_Receive>
	  if(pData==1)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d10a      	bne.n	8000206 <main+0x3e>
	  {
		  HAL_GPIO_WritePin(GPIOA, 5, SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	2105      	movs	r1, #5
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f8:	f000 fd00 	bl	8000bfc <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80001fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000200:	f000 fa48 	bl	8000694 <HAL_Delay>
 8000204:	e7eb      	b.n	80001de <main+0x16>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, 5, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2105      	movs	r1, #5
 800020a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020e:	f000 fcf5 	bl	8000bfc <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000216:	f000 fa3d 	bl	8000694 <HAL_Delay>
	  HAL_I2C_Slave_Receive(&hi2c1, &pData, 1, 30);
 800021a:	e7e0      	b.n	80001de <main+0x16>
 800021c:	20000028 	.word	0x20000028

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2244      	movs	r2, #68	; 0x44
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fc46 	bl	8002ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000242:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000246:	f001 f93d 	bl	80014c4 <HAL_PWREx_ControlVoltageScaling>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000250:	f000 f8b6 	bl	80003c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	2302      	movs	r3, #2
 8000256:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800026a:	2301      	movs	r3, #1
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800026e:	230a      	movs	r3, #10
 8000270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000272:	2307      	movs	r3, #7
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027a:	2302      	movs	r3, #2
 800027c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	4618      	mov	r0, r3
 8000284:	f001 f974 	bl	8001570 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800028e:	f000 f897 	bl	80003c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2303      	movs	r3, #3
 8000298:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	2104      	movs	r1, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd3c 	bl	8001d28 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002b6:	f000 f883 	bl	80003c0 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3758      	adds	r7, #88	; 0x58
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_I2C1_Init+0x74>)
 80002ca:	4a1c      	ldr	r2, [pc, #112]	; (800033c <MX_I2C1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <MX_I2C1_Init+0x74>)
 80002d0:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <MX_I2C1_Init+0x7c>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_I2C1_Init+0x74>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_I2C1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_I2C1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002fe:	480e      	ldr	r0, [pc, #56]	; (8000338 <MX_I2C1_Init+0x74>)
 8000300:	f000 fc94 	bl	8000c2c <HAL_I2C_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030a:	f000 f859 	bl	80003c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800030e:	2100      	movs	r1, #0
 8000310:	4809      	ldr	r0, [pc, #36]	; (8000338 <MX_I2C1_Init+0x74>)
 8000312:	f001 f831 	bl	8001378 <HAL_I2CEx_ConfigAnalogFilter>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800031c:	f000 f850 	bl	80003c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000320:	2100      	movs	r1, #0
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_I2C1_Init+0x74>)
 8000324:	f001 f873 	bl	800140e <HAL_I2CEx_ConfigDigitalFilter>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800032e:	f000 f847 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000028 	.word	0x20000028
 800033c:	40005400 	.word	0x40005400
 8000340:	10909cec 	.word	0x10909cec

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0x78>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_GPIO_Init+0x78>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_GPIO_Init+0x78>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_GPIO_Init+0x78>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a11      	ldr	r2, [pc, #68]	; (80003bc <MX_GPIO_Init+0x78>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_GPIO_Init+0x78>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0302 	and.w	r3, r3, #2
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000392:	f000 fc33 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000396:	2320      	movs	r3, #32
 8000398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a6:	f107 030c 	add.w	r3, r7, #12
 80003aa:	4619      	mov	r1, r3
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f000 fa7a 	bl	80008a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x44>)
 80003d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x44>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6613      	str	r3, [r2, #96]	; 0x60
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x44>)
 80003e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <HAL_MspInit+0x44>)
 80003ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <HAL_MspInit+0x44>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	6593      	str	r3, [r2, #88]	; 0x58
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_MspInit+0x44>)
 80003f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b0ac      	sub	sp, #176	; 0xb0
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2288      	movs	r2, #136	; 0x88
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f002 fb43 	bl	8002ac0 <memset>
  if(hi2c->Instance==I2C1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <HAL_I2C_MspInit+0xb0>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d13b      	bne.n	80004bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000444:	2340      	movs	r3, #64	; 0x40
 8000446:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000448:	2300      	movs	r3, #0
 800044a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fe55 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800045c:	f7ff ffb0 	bl	80003c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <HAL_I2C_MspInit+0xb4>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000464:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <HAL_I2C_MspInit+0xb4>)
 8000466:	f043 0302 	orr.w	r3, r3, #2
 800046a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <HAL_I2C_MspInit+0xb4>)
 800046e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000470:	f003 0302 	and.w	r3, r3, #2
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800047c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000480:	2312      	movs	r3, #18
 8000482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800048c:	2303      	movs	r3, #3
 800048e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000492:	2304      	movs	r3, #4
 8000494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000498:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800049c:	4619      	mov	r1, r3
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <HAL_I2C_MspInit+0xb8>)
 80004a0:	f000 fa02 	bl	80008a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_I2C_MspInit+0xb4>)
 80004a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_I2C_MspInit+0xb4>)
 80004aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ae:	6593      	str	r3, [r2, #88]	; 0x58
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_I2C_MspInit+0xb4>)
 80004b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004bc:	bf00      	nop
 80004be:	37b0      	adds	r7, #176	; 0xb0
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40005400 	.word	0x40005400
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler+0x4>

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f000 f89a 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000580 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800054c:	f7ff ffea 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopForever+0x6>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <LoopForever+0xe>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <LoopForever+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000576:	f002 fa7f 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800057a:	f7ff fe25 	bl	80001c8 <main>

0800057e <LoopForever>:

LoopForever:
    b LoopForever
 800057e:	e7fe      	b.n	800057e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000580:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800058c:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 8000590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000594:	20000080 	.word	0x20000080

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_Init+0x3c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <HAL_Init+0x3c>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f944 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f80f 	bl	80005dc <HAL_InitTick>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005c4:	2301      	movs	r3, #1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	e001      	b.n	80005ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005ca:	f7ff feff 	bl	80003cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_InitTick+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d023      	beq.n	8000638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_InitTick+0x70>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_InitTick+0x6c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f941 	bl	800088e <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10f      	bne.n	8000632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f919 	bl	8000856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <HAL_InitTick+0x74>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e007      	b.n	800063c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e004      	b.n	800063c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e001      	b.n	800063c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000008 	.word	0x20000008
 800064c:	20000000 	.word	0x20000000
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008
 8000678:	2000007c 	.word	0x2000007c

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000007c 	.word	0x2000007c

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_Delay+0x44>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff47 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff5c 	bl	8000724 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ffb0 	bl	80007fc <SysTick_Config>
 800089c:	4603      	mov	r3, r0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b6:	e17f      	b.n	8000bb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 8171 	beq.w	8000bb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d005      	beq.n	80008e8 <HAL_GPIO_Init+0x40>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d130      	bne.n	800094a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800091e:	2201      	movs	r2, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	f003 0201 	and.w	r2, r3, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	2b03      	cmp	r3, #3
 8000954:	d118      	bne.n	8000988 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800095c:	2201      	movs	r2, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	f003 0201 	and.w	r2, r3, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b03      	cmp	r3, #3
 8000992:	d017      	beq.n	80009c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d123      	bne.n	8000a18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	691a      	ldr	r2, [r3, #16]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	6939      	ldr	r1, [r7, #16]
 8000a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0203 	and.w	r2, r3, #3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f000 80ac 	beq.w	8000bb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	; (8000bd8 <HAL_GPIO_Init+0x330>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a5e      	ldr	r2, [pc, #376]	; (8000bd8 <HAL_GPIO_Init+0x330>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <HAL_GPIO_Init+0x330>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a72:	4a5a      	ldr	r2, [pc, #360]	; (8000bdc <HAL_GPIO_Init+0x334>)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a9c:	d025      	beq.n	8000aea <HAL_GPIO_Init+0x242>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a4f      	ldr	r2, [pc, #316]	; (8000be0 <HAL_GPIO_Init+0x338>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d01f      	beq.n	8000ae6 <HAL_GPIO_Init+0x23e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_GPIO_Init+0x33c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d019      	beq.n	8000ae2 <HAL_GPIO_Init+0x23a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_GPIO_Init+0x340>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0x236>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <HAL_GPIO_Init+0x344>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00d      	beq.n	8000ada <HAL_GPIO_Init+0x232>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4b      	ldr	r2, [pc, #300]	; (8000bf0 <HAL_GPIO_Init+0x348>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x22e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4a      	ldr	r2, [pc, #296]	; (8000bf4 <HAL_GPIO_Init+0x34c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_GPIO_Init+0x22a>
 8000ace:	2306      	movs	r3, #6
 8000ad0:	e00c      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	e00a      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e008      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ada:	2304      	movs	r3, #4
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e004      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000aea:	2300      	movs	r3, #0
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	f002 0203 	and.w	r2, r2, #3
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	4093      	lsls	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afc:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x334>)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b2e:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_GPIO_Init+0x350>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f47f ae78 	bne.w	80008b8 <HAL_GPIO_Init+0x10>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	48001400 	.word	0x48001400
 8000bf4:	48001800 	.word	0x48001800
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e081      	b.n	8000d42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d106      	bne.n	8000c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fbde 	bl	8000414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2224      	movs	r2, #36	; 0x24
 8000c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0201 	bic.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d107      	bne.n	8000ca6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e006      	b.n	8000cb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000cb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d104      	bne.n	8000cc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69d9      	ldr	r1, [r3, #28]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1a      	ldr	r2, [r3, #32]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0201 	orr.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b088      	sub	sp, #32
 8000d4e:	af02      	add	r7, sp, #8
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b20      	cmp	r3, #32
 8000d64:	f040 80fc 	bne.w	8000f60 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <HAL_I2C_Slave_Receive+0x2a>
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e0f0      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_I2C_Slave_Receive+0x44>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e0e9      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d96:	f7ff fc71 	bl	800067c <HAL_GetTick>
 8000d9a:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2222      	movs	r2, #34	; 0x22
 8000da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2220      	movs	r2, #32
 8000da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	88fa      	ldrh	r2, [r7, #6]
 8000dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ddc:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	2108      	movs	r1, #8
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f8e2 	bl	8000fb2 <I2C_WaitOnFlagUntilTimeout>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d009      	beq.n	8000e08 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e02:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e0ac      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f000 f8c8 	bl	8000fb2 <I2C_WaitOnFlagUntilTimeout>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d054      	beq.n	8000ed2 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e36:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e092      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f000 f933 	bl	80010ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d029      	beq.n	8000ea0 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e5a:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d118      	bne.n	8000e9c <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e060      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1af      	bne.n	8000e3c <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f8a6 	bl	8001032 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000efa:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e030      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2220      	movs	r2, #32
 8000f06:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f84c 	bl	8000fb2 <I2C_WaitOnFlagUntilTimeout>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f2e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e016      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f42:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2220      	movs	r2, #32
 8000f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 8000f60:	2302      	movs	r3, #2
  }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d103      	bne.n	8000f88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0201 	orr.w	r2, r2, #1
 8000fa4:	619a      	str	r2, [r3, #24]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fc2:	e022      	b.n	800100a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fca:	d01e      	beq.n	800100a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fcc:	f7ff fb56 	bl	800067c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d302      	bcc.n	8000fe2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d113      	bne.n	800100a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f043 0220 	orr.w	r2, r3, #32
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	699a      	ldr	r2, [r3, #24]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4013      	ands	r3, r2
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	429a      	cmp	r2, r3
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	429a      	cmp	r2, r3
 8001026:	d0cd      	beq.n	8000fc4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800103e:	e028      	b.n	8001092 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f8ab 	bl	80011a0 <I2C_IsErrorOccurred>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e026      	b.n	80010a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001054:	f7ff fb12 	bl	800067c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	429a      	cmp	r2, r3
 8001062:	d302      	bcc.n	800106a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d113      	bne.n	8001092 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f043 0220 	orr.w	r2, r3, #32
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2220      	movs	r2, #32
 800107a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e007      	b.n	80010a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	2b20      	cmp	r3, #32
 800109e:	d1cf      	bne.n	8001040 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80010b8:	e064      	b.n	8001184 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 f86e 	bl	80011a0 <I2C_IsErrorOccurred>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e062      	b.n	8001194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	2b20      	cmp	r3, #32
 80010da:	d138      	bne.n	800114e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d105      	bne.n	80010f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e04e      	b.n	8001194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b10      	cmp	r3, #16
 8001102:	d107      	bne.n	8001114 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2210      	movs	r2, #16
 800110a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2204      	movs	r2, #4
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
 8001112:	e002      	b.n	800111a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2220      	movs	r2, #32
 8001120:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800112e:	400b      	ands	r3, r1
 8001130:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2220      	movs	r2, #32
 8001136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e022      	b.n	8001194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800114e:	f7ff fa95 	bl	800067c <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	d302      	bcc.n	8001164 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f043 0220 	orr.w	r2, r3, #32
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2220      	movs	r2, #32
 8001174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e007      	b.n	8001194 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b04      	cmp	r3, #4
 8001190:	d193      	bne.n	80010ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	fe00e800 	.word	0xfe00e800

080011a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d075      	beq.n	80012b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2210      	movs	r2, #16
 80011d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80011d4:	e056      	b.n	8001284 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d052      	beq.n	8001284 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011de:	f7ff fa4d 	bl	800067c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d302      	bcc.n	80011f4 <I2C_IsErrorOccurred+0x54>
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d147      	bne.n	8001284 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001206:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001216:	d12e      	bne.n	8001276 <I2C_IsErrorOccurred+0xd6>
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800121e:	d02a      	beq.n	8001276 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001220:	7cfb      	ldrb	r3, [r7, #19]
 8001222:	2b20      	cmp	r3, #32
 8001224:	d027      	beq.n	8001276 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001234:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001236:	f7ff fa21 	bl	800067c <HAL_GetTick>
 800123a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800123c:	e01b      	b.n	8001276 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800123e:	f7ff fa1d 	bl	800067c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b19      	cmp	r3, #25
 800124a:	d914      	bls.n	8001276 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f043 0220 	orr.w	r2, r3, #32
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2220      	movs	r2, #32
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	2b20      	cmp	r3, #32
 8001282:	d1dc      	bne.n	800123e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	2b20      	cmp	r3, #32
 8001290:	d003      	beq.n	800129a <I2C_IsErrorOccurred+0xfa>
 8001292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001296:	2b00      	cmp	r3, #0
 8001298:	d09d      	beq.n	80011d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800129a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2220      	movs	r2, #32
 80012a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00b      	beq.n	8001304 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01c      	beq.n	8001368 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fe1b 	bl	8000f6a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6859      	ldr	r1, [r3, #4]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <I2C_IsErrorOccurred+0x1d4>)
 8001340:	400b      	ands	r3, r1
 8001342:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2220      	movs	r2, #32
 8001354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800136c:	4618      	mov	r0, r3
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	fe00e800 	.word	0xfe00e800

08001378 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b20      	cmp	r3, #32
 800138c:	d138      	bne.n	8001400 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001398:	2302      	movs	r3, #2
 800139a:	e032      	b.n	8001402 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6819      	ldr	r1, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e000      	b.n	8001402 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001400:	2302      	movs	r3, #2
  }
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b20      	cmp	r3, #32
 8001422:	d139      	bne.n	8001498 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800142e:	2302      	movs	r3, #2
 8001430:	e033      	b.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2224      	movs	r2, #36	; 0x24
 800143e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001460:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000

080014c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d2:	d130      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e0:	d038      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001508:	e002      	b.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d102      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x60>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f2      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001530:	d110      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e00f      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d007      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40007000 	.word	0x40007000
 8001568:	20000000 	.word	0x20000000
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e3ca      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001582:	4b97      	ldr	r3, [pc, #604]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158c:	4b94      	ldr	r3, [pc, #592]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80e4 	beq.w	800176c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_RCC_OscConfig+0x4a>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	f040 808b 	bne.w	80016c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f040 8087 	bne.w	80016c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x62>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3a2      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_RCC_OscConfig+0x7c>
 80015e2:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ea:	e005      	b.n	80015f8 <HAL_RCC_OscConfig+0x88>
 80015ec:	4b7c      	ldr	r3, [pc, #496]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d223      	bcs.n	8001644 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fd1d 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e383      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001610:	4b73      	ldr	r3, [pc, #460]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	496d      	ldr	r1, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162e:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	4968      	ldr	r1, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
 8001642:	e025      	b.n	8001690 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4960      	ldr	r1, [pc, #384]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	495b      	ldr	r1, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fcdd 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e343      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001690:	f000 fc4a 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	4950      	ldr	r1, [pc, #320]	; (80017e4 <HAL_RCC_OscConfig+0x274>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_RCC_OscConfig+0x278>)
 80016ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016b0:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff91 	bl	80005dc <HAL_InitTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d052      	beq.n	800176a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	e327      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d032      	beq.n	8001736 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016dc:	f7fe ffce 	bl	800067c <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e4:	f7fe ffca 	bl	800067c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e310      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a36      	ldr	r2, [pc, #216]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4931      	ldr	r1, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	492c      	ldr	r1, [pc, #176]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e01a      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001742:	f7fe ff9b 	bl	800067c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174a:	f7fe ff97 	bl	800067c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e2dd      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x1da>
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d074      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x21a>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	d10e      	bne.n	80017a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d064      	beq.n	8001860 <HAL_RCC_OscConfig+0x2f0>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d160      	bne.n	8001860 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e2ba      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x24a>
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x298>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c2:	d115      	bne.n	80017f0 <HAL_RCC_OscConfig+0x280>
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a02      	ldr	r2, [pc, #8]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x298>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08002ae8 	.word	0x08002ae8
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004
 80017f0:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a9c      	ldr	r2, [pc, #624]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7fe ff34 	bl	800067c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7fe ff30 	bl	800067c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e276      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182a:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x2a8>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7fe ff20 	bl	800067c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7fe ff1c 	bl	800067c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e262      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d0>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d060      	beq.n	8001930 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x310>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d119      	bne.n	80018ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d116      	bne.n	80018ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001880:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x328>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e23f      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	4973      	ldr	r1, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	e040      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d023      	beq.n	80018fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7fe fedb 	bl	800067c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7fe fed7 	bl	800067c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e21d      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	4b65      	ldr	r3, [pc, #404]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b62      	ldr	r3, [pc, #392]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	495f      	ldr	r1, [pc, #380]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
 80018fc:	e018      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5c      	ldr	r2, [pc, #368]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7fe feb7 	bl	800067c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7fe feb3 	bl	800067c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1f9      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7fe fe92 	bl	800067c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7fe fe8e 	bl	800067c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1d4      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ef      	beq.n	800195c <HAL_RCC_OscConfig+0x3ec>
 800197c:	e01b      	b.n	80019b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001984:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7fe fe75 	bl	800067c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7fe fe71 	bl	800067c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1b7      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a6 	beq.w	8001b10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d118      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a08:	f7fe fe38 	bl	800067c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a10:	f7fe fe34 	bl	800067c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e17a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4d8>
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a46:	e029      	b.n	8001a9c <HAL_RCC_OscConfig+0x52c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d115      	bne.n	8001a7c <HAL_RCC_OscConfig+0x50c>
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x52c>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	4b9c      	ldr	r3, [pc, #624]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a9b      	ldr	r2, [pc, #620]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8c:	4b98      	ldr	r3, [pc, #608]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	4a97      	ldr	r2, [pc, #604]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d016      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fdea 	bl	800067c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7fe fde6 	bl	800067c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e12a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ed      	beq.n	8001aac <HAL_RCC_OscConfig+0x53c>
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7fe fdd3 	bl	800067c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7fe fdcf 	bl	800067c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e113      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ed      	bne.n	8001ada <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80fe 	beq.w	8001d16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	f040 80d0 	bne.w	8001cc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b24:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d130      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	3b01      	subs	r3, #1
 8001b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d127      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d11f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b64:	2a07      	cmp	r2, #7
 8001b66:	bf14      	ite	ne
 8001b68:	2201      	movne	r2, #1
 8001b6a:	2200      	moveq	r2, #0
 8001b6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d113      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d06e      	beq.n	8001c78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d069      	beq.n	8001c74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0ad      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc8:	f7fe fd58 	bl	800067c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe fd54 	bl	800067c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e09a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_RCC_OscConfig+0x784>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bfe:	3a01      	subs	r2, #1
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c08:	0212      	lsls	r2, r2, #8
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c10:	0852      	lsrs	r2, r2, #1
 8001c12:	3a01      	subs	r2, #1
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1c:	0852      	lsrs	r2, r2, #1
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	0652      	lsls	r2, r2, #25
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c28:	0912      	lsrs	r2, r2, #4
 8001c2a:	0452      	lsls	r2, r2, #17
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4930      	ldr	r1, [pc, #192]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c4c:	f7fe fd16 	bl	800067c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe fd12 	bl	800067c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e058      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c72:	e050      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e04f      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d148      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c9c:	f7fe fcee 	bl	800067c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe fcea 	bl	800067c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e030      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x734>
 8001cc2:	e028      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d023      	beq.n	8001d12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fcd1 	bl	800067c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	e00c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7fe fccd 	bl	800067c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d905      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e013      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x7b0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ec      	bne.n	8001cde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x7b0>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4905      	ldr	r1, [pc, #20]	; (8001d20 <HAL_RCC_OscConfig+0x7b0>)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x7b4>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
 8001d10:	e001      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	feeefffc 	.word	0xfeeefffc

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0e7      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4970      	ldr	r1, [pc, #448]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cf      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d010      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d908      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4960      	ldr	r1, [pc, #384]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d04c      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d121      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0a6      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e09a      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e08e      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e086      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4943      	ldr	r1, [pc, #268]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7fe fc34 	bl	800067c <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7fe fc30 	bl	800067c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e06e      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d208      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	492b      	ldr	r1, [pc, #172]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d210      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 0207 	bic.w	r2, r3, #7
 8001e84:	4923      	ldr	r1, [pc, #140]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e036      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	4918      	ldr	r1, [pc, #96]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4910      	ldr	r1, [pc, #64]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001edc:	f000 f824 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	490b      	ldr	r1, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x1f4>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1fc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb6b 	bl	80005dc <HAL_InitTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08002ae8 	.word	0x08002ae8
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x34>
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d121      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d11e      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e005      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f84:	4a2b      	ldr	r2, [pc, #172]	; (8002034 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10d      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e004      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d134      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0xa6>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d003      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fcc:	e005      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd0:	617b      	str	r3, [r7, #20]
      break;
 8001fd2:	e005      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd6:	617b      	str	r3, [r7, #20]
      break;
 8001fd8:	e002      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	617b      	str	r3, [r7, #20]
      break;
 8001fde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	fb03 f202 	mul.w	r2, r3, r2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	0e5b      	lsrs	r3, r3, #25
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	3301      	adds	r3, #1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002020:	69bb      	ldr	r3, [r7, #24]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	08002af8 	.word	0x08002af8
 8002038:	00f42400 	.word	0x00f42400
 800203c:	007a1200 	.word	0x007a1200

08002040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002058:	f7ff fa26 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 800205c:	6178      	str	r0, [r7, #20]
 800205e:	e014      	b.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002078:	f7ff fa16 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 800207c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002090:	d10b      	bne.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d919      	bls.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2ba0      	cmp	r3, #160	; 0xa0
 800209c:	d902      	bls.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800209e:	2302      	movs	r3, #2
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e013      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e010      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d902      	bls.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020b0:	2303      	movs	r3, #3
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e00a      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d102      	bne.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e004      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b70      	cmp	r3, #112	; 0x70
 80020c6:	d101      	bne.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c8:	2301      	movs	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0207 	bic.w	r2, r3, #7
 80020d4:	4909      	ldr	r1, [pc, #36]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002108:	2300      	movs	r3, #0
 800210a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800210c:	2300      	movs	r3, #0
 800210e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002118:	2b00      	cmp	r3, #0
 800211a:	d041      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002120:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002124:	d02a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002126:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800212a:	d824      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800212c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002132:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002136:	d81e      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800213c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002140:	d010      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002142:	e018      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002144:	4b86      	ldr	r3, [pc, #536]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a85      	ldr	r2, [pc, #532]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002150:	e015      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fabb 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 800215e:	4603      	mov	r3, r0
 8002160:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002162:	e00c      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3320      	adds	r3, #32
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fba6 	bl	80028bc <RCCEx_PLLSAI2_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002174:	e003      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	74fb      	strb	r3, [r7, #19]
      break;
 800217a:	e000      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800217c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002184:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002192:	4973      	ldr	r1, [pc, #460]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800219a:	e001      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d041      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021b4:	d02a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021ba:	d824      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021c6:	d81e      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d010      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021d2:	e018      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d4:	4b62      	ldr	r3, [pc, #392]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a61      	ldr	r2, [pc, #388]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021e0:	e015      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fa73 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021f2:	e00c      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3320      	adds	r3, #32
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fb5e 	bl	80028bc <RCCEx_PLLSAI2_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002204:	e003      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	74fb      	strb	r3, [r7, #19]
      break;
 800220a:	e000      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800220c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002214:	4b52      	ldr	r3, [pc, #328]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002222:	494f      	ldr	r1, [pc, #316]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800222a:	e001      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a0 	beq.w	800237e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	4a40      	ldr	r2, [pc, #256]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6593      	str	r3, [r2, #88]	; 0x58
 8002264:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002280:	f7fe f9fc 	bl	800067c <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe f9f8 	bl	800067c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d902      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	74fb      	strb	r3, [r7, #19]
        break;
 800229a:	e005      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800229c:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ef      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d15c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01f      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d019      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe f9b7 	bl	800067c <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002310:	e00b      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe f9b3 	bl	800067c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d902      	bls.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	74fb      	strb	r3, [r7, #19]
            break;
 8002328:	e006      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ec      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234e:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002356:	e009      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
 800235c:	e006      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236c:	7c7b      	ldrb	r3, [r7, #17]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4b9e      	ldr	r3, [pc, #632]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	4a9d      	ldr	r2, [pc, #628]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238a:	4b98      	ldr	r3, [pc, #608]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	4994      	ldr	r1, [pc, #592]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ac:	4b8f      	ldr	r3, [pc, #572]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 020c 	bic.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	498c      	ldr	r1, [pc, #560]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ce:	4b87      	ldr	r3, [pc, #540]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4983      	ldr	r1, [pc, #524]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f0:	4b7e      	ldr	r3, [pc, #504]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	497b      	ldr	r1, [pc, #492]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002412:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	4972      	ldr	r1, [pc, #456]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002434:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	496a      	ldr	r1, [pc, #424]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	4961      	ldr	r1, [pc, #388]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002478:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	4959      	ldr	r1, [pc, #356]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a8:	4950      	ldr	r1, [pc, #320]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	4948      	ldr	r1, [pc, #288]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	493f      	ldr	r1, [pc, #252]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d028      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002500:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250e:	4937      	ldr	r1, [pc, #220]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251e:	d106      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002520:	4b32      	ldr	r3, [pc, #200]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a31      	ldr	r2, [pc, #196]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252a:	60d3      	str	r3, [r2, #12]
 800252c:	e011      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002536:	d10c      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f8c8 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d028      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	491f      	ldr	r1, [pc, #124]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257c:	d106      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002588:	60d3      	str	r3, [r2, #12]
 800258a:	e011      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f899 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02b      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025da:	d109      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a02      	ldr	r2, [pc, #8]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
 80025e8:	e014      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2101      	movs	r1, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f867 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d02f      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800262e:	4928      	ldr	r1, [pc, #160]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800263a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800263e:	d10d      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	2102      	movs	r1, #2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f844 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d014      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	74bb      	strb	r3, [r7, #18]
 800265a:	e011      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002664:	d10c      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3320      	adds	r3, #32
 800266a:	2102      	movs	r1, #2
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f925 	bl	80028bc <RCCEx_PLLSAI2_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800269a:	490d      	ldr	r1, [pc, #52]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026be:	4904      	ldr	r1, [pc, #16]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000

080026d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e2:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ee:	4b72      	ldr	r3, [pc, #456]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10d      	bne.n	800271a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
       ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002706:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
       ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d047      	beq.n	80027aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e044      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d018      	beq.n	800275a <RCCEx_PLLSAI1_Config+0x86>
 8002728:	2b03      	cmp	r3, #3
 800272a:	d825      	bhi.n	8002778 <RCCEx_PLLSAI1_Config+0xa4>
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x62>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d009      	beq.n	8002748 <RCCEx_PLLSAI1_Config+0x74>
 8002734:	e020      	b.n	8002778 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002736:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11d      	bne.n	800277e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e01a      	b.n	800277e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d116      	bne.n	8002782 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002758:	e013      	b.n	8002782 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275a:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002766:	4b54      	ldr	r3, [pc, #336]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002776:	e006      	b.n	8002786 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e004      	b.n	8002788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002786:	bf00      	nop
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	430b      	orrs	r3, r1
 80027a4:	4944      	ldr	r1, [pc, #272]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d17d      	bne.n	80028ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027b0:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f7fd ff5e 	bl	800067c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c2:	e009      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c4:	f7fd ff5a 	bl	800067c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	73fb      	strb	r3, [r7, #15]
        break;
 80027d6:	e005      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ef      	bne.n	80027c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d160      	bne.n	80028ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f0:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6892      	ldr	r2, [r2, #8]
 8002800:	0211      	lsls	r1, r2, #8
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	0912      	lsrs	r2, r2, #4
 8002808:	0452      	lsls	r2, r2, #17
 800280a:	430a      	orrs	r2, r1
 800280c:	492a      	ldr	r1, [pc, #168]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	610b      	str	r3, [r1, #16]
 8002812:	e027      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d112      	bne.n	8002840 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002822:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6892      	ldr	r2, [r2, #8]
 800282a:	0211      	lsls	r1, r2, #8
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6912      	ldr	r2, [r2, #16]
 8002830:	0852      	lsrs	r2, r2, #1
 8002832:	3a01      	subs	r2, #1
 8002834:	0552      	lsls	r2, r2, #21
 8002836:	430a      	orrs	r2, r1
 8002838:	491f      	ldr	r1, [pc, #124]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]
 800283e:	e011      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002848:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6892      	ldr	r2, [r2, #8]
 8002850:	0211      	lsls	r1, r2, #8
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6952      	ldr	r2, [r2, #20]
 8002856:	0852      	lsrs	r2, r2, #1
 8002858:	3a01      	subs	r2, #1
 800285a:	0652      	lsls	r2, r2, #25
 800285c:	430a      	orrs	r2, r1
 800285e:	4916      	ldr	r1, [pc, #88]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800286e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fd ff04 	bl	800067c <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002876:	e009      	b.n	800288c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002878:	f7fd ff00 	bl	800067c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	73fb      	strb	r3, [r7, #15]
          break;
 800288a:	e005      	b.n	8002898 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	4904      	ldr	r1, [pc, #16]	; (80028b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000

080028bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ca:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d018      	beq.n	8002908 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028d6:	4b67      	ldr	r3, [pc, #412]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0203 	and.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d10d      	bne.n	8002902 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
       ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d047      	beq.n	8002992 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e044      	b.n	8002992 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d018      	beq.n	8002942 <RCCEx_PLLSAI2_Config+0x86>
 8002910:	2b03      	cmp	r3, #3
 8002912:	d825      	bhi.n	8002960 <RCCEx_PLLSAI2_Config+0xa4>
 8002914:	2b01      	cmp	r3, #1
 8002916:	d002      	beq.n	800291e <RCCEx_PLLSAI2_Config+0x62>
 8002918:	2b02      	cmp	r3, #2
 800291a:	d009      	beq.n	8002930 <RCCEx_PLLSAI2_Config+0x74>
 800291c:	e020      	b.n	8002960 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800291e:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11d      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292e:	e01a      	b.n	8002966 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d116      	bne.n	800296a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002940:	e013      	b.n	800296a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10f      	bne.n	800296e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800295e:	e006      	b.n	800296e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e004      	b.n	8002970 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002966:	bf00      	nop
 8002968:	e002      	b.n	8002970 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800296e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002976:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	430b      	orrs	r3, r1
 800298c:	4939      	ldr	r1, [pc, #228]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d167      	bne.n	8002a68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a35      	ldr	r2, [pc, #212]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7fd fe6a 	bl	800067c <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029aa:	e009      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029ac:	f7fd fe66 	bl	800067c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	73fb      	strb	r3, [r7, #15]
        break;
 80029be:	e005      	b.n	80029cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029c0:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ef      	bne.n	80029ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d14a      	bne.n	8002a68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6892      	ldr	r2, [r2, #8]
 80029e8:	0211      	lsls	r1, r2, #8
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	0912      	lsrs	r2, r2, #4
 80029f0:	0452      	lsls	r2, r2, #17
 80029f2:	430a      	orrs	r2, r1
 80029f4:	491f      	ldr	r1, [pc, #124]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	614b      	str	r3, [r1, #20]
 80029fa:	e011      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6892      	ldr	r2, [r2, #8]
 8002a0c:	0211      	lsls	r1, r2, #8
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6912      	ldr	r2, [r2, #16]
 8002a12:	0852      	lsrs	r2, r2, #1
 8002a14:	3a01      	subs	r2, #1
 8002a16:	0652      	lsls	r2, r2, #25
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	4916      	ldr	r1, [pc, #88]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fd fe26 	bl	800067c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a32:	e009      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a34:	f7fd fe22 	bl	800067c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	73fb      	strb	r3, [r7, #15]
          break;
 8002a46:	e005      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	4904      	ldr	r1, [pc, #16]	; (8002a74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	4d0d      	ldr	r5, [pc, #52]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7c:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a7e:	1b64      	subs	r4, r4, r5
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	2600      	movs	r6, #0
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	4d0b      	ldr	r5, [pc, #44]	; (8002ab8 <__libc_init_array+0x40>)
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <__libc_init_array+0x44>)
 8002a8c:	f000 f820 	bl	8002ad0 <_init>
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	2600      	movs	r6, #0
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08002b28 	.word	0x08002b28
 8002ab4:	08002b28 	.word	0x08002b28
 8002ab8:	08002b28 	.word	0x08002b28
 8002abc:	08002b2c 	.word	0x08002b2c

08002ac0 <memset>:
 8002ac0:	4402      	add	r2, r0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <memset+0xa>
 8002ac8:	4770      	bx	lr
 8002aca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ace:	e7f9      	b.n	8002ac4 <memset+0x4>

08002ad0 <_init>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr

08002adc <_fini>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr
