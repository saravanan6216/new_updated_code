
i2cmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc0  08003fc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fc0  08003fc0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fc0  08003fc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08004038  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004038  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a19e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  0002a23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264c7  00000000  00000000  0002d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd51  00000000  00000000  000535df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6b74  00000000  00000000  0005f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003054  00000000  00000000  00145ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003eb8 	.word	0x08003eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003eb8 	.word	0x08003eb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdio.h"
int _write(int file,char *ptr,int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	int i=0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e009      	b.n	80002e8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60ba      	str	r2, [r7, #8]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffc7 	bl	8000270 <ITM_SendChar>
	for(i=0;i<len;i++)
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3301      	adds	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf1      	blt.n	80002d4 <_write+0x16>
	return len;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <findadd>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
int findadd()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	for(int i=0;i<127;i++)
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	e013      	b.n	8000330 <findadd+0x34>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 2,100)==HAL_OK)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	b299      	uxth	r1, r3
 800030c:	2364      	movs	r3, #100	; 0x64
 800030e:	2202      	movs	r2, #2
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <findadd+0x44>)
 8000312:	f000 ff8b 	bl	800122c <HAL_I2C_IsDeviceReady>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d106      	bne.n	800032a <findadd+0x2e>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f000 fde5 	bl	8000ef0 <HAL_GPIO_TogglePin>
			return i;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	e006      	b.n	8000338 <findadd+0x3c>
	for(int i=0;i<127;i++)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b7e      	cmp	r3, #126	; 0x7e
 8000334:	dde8      	ble.n	8000308 <findadd+0xc>
		}
	}
	return 0;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	2000008c 	.word	0x2000008c

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 fa89 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f841 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f000 f8d1 	bl	80004f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000356:	f000 f88f 	bl	8000478 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t pData[6]={1,2,3,4,5,6};
 800035a:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <main+0x80>)
 800035c:	463b      	mov	r3, r7
 800035e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000362:	6018      	str	r0, [r3, #0]
 8000364:	3304      	adds	r3, #4
 8000366:	8019      	strh	r1, [r3, #0]
	uint16_t add=findadd();
 8000368:	f7ff ffc8 	bl	80002fc <findadd>
 800036c:	4603      	mov	r3, r0
 800036e:	817b      	strh	r3, [r7, #10]
	uint8_t s=1;
 8000370:	2301      	movs	r3, #1
 8000372:	727b      	strb	r3, [r7, #9]
	uint8_t r=2;
 8000374:	2302      	movs	r3, #2
 8000376:	723b      	strb	r3, [r7, #8]
	int i=0;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
    /* USER CODE END WHILE */
		  HAL_I2C_Master_Transmit(&hi2c1, add, s, 2, 1000);
 800037c:	7a7b      	ldrb	r3, [r7, #9]
 800037e:	461a      	mov	r2, r3
 8000380:	8979      	ldrh	r1, [r7, #10]
 8000382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2302      	movs	r3, #2
 800038a:	480f      	ldr	r0, [pc, #60]	; (80003c8 <main+0x84>)
 800038c:	f000 fe5a 	bl	8001044 <HAL_I2C_Master_Transmit>
		  HAL_Delay(1000);
 8000390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000394:	f000 fae0 	bl	8000958 <HAL_Delay>

		  printf("%d\n",pData[i]);
 8000398:	463a      	mov	r2, r7
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	4413      	add	r3, r2
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4619      	mov	r1, r3
 80003a2:	480a      	ldr	r0, [pc, #40]	; (80003cc <main+0x88>)
 80003a4:	f002 fdfa 	bl	8002f9c <iprintf>
		  i++;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
		  if(i==6)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d101      	bne.n	80003b8 <main+0x74>
		  {
			  i=0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
		  }
		  printf("add is %x\n",add);
 80003b8:	897b      	ldrh	r3, [r7, #10]
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <main+0x8c>)
 80003be:	f002 fded 	bl	8002f9c <iprintf>
		  HAL_I2C_Master_Transmit(&hi2c1, add, s, 2, 1000);
 80003c2:	e7db      	b.n	800037c <main+0x38>
 80003c4:	08003ee0 	.word	0x08003ee0
 80003c8:	2000008c 	.word	0x2000008c
 80003cc:	08003ed0 	.word	0x08003ed0
 80003d0:	08003ed4 	.word	0x08003ed4

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b096      	sub	sp, #88	; 0x58
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2244      	movs	r2, #68	; 0x44
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 fdd2 	bl	8002f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	463b      	mov	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003fa:	f001 fac3 	bl	8001984 <HAL_PWREx_ControlVoltageScaling>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000404:	f000 f8b6 	bl	8000574 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	2302      	movs	r3, #2
 800040a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000410:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000412:	2310      	movs	r3, #16
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800041e:	2301      	movs	r3, #1
 8000420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000422:	230a      	movs	r3, #10
 8000424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000426:	2307      	movs	r3, #7
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800042a:	2302      	movs	r3, #2
 800042c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800042e:	2302      	movs	r3, #2
 8000430:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fafa 	bl	8001a30 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000442:	f000 f897 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2303      	movs	r3, #3
 800044c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800045a:	463b      	mov	r3, r7
 800045c:	2104      	movs	r1, #4
 800045e:	4618      	mov	r0, r3
 8000460:	f001 fec2 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800046a:	f000 f883 	bl	8000574 <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3758      	adds	r7, #88	; 0x58
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_I2C1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_I2C1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_I2C1_Init+0x74>)
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <MX_I2C1_Init+0x7c>)
 8000486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_I2C1_Init+0x74>)
 8000490:	2201      	movs	r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_I2C1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b2:	480e      	ldr	r0, [pc, #56]	; (80004ec <MX_I2C1_Init+0x74>)
 80004b4:	f000 fd36 	bl	8000f24 <HAL_I2C_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004be:	f000 f859 	bl	8000574 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c2:	2100      	movs	r1, #0
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <MX_I2C1_Init+0x74>)
 80004c6:	f001 f9b7 	bl	8001838 <HAL_I2CEx_ConfigAnalogFilter>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d0:	f000 f850 	bl	8000574 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d4:	2100      	movs	r1, #0
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_I2C1_Init+0x74>)
 80004d8:	f001 f9f9 	bl	80018ce <HAL_I2CEx_ConfigDigitalFilter>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f847 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	40005400 	.word	0x40005400
 80004f4:	10909cec 	.word	0x10909cec

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0x78>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_GPIO_Init+0x78>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_GPIO_Init+0x78>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_GPIO_Init+0x78>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a11      	ldr	r2, [pc, #68]	; (8000570 <MX_GPIO_Init+0x78>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_GPIO_Init+0x78>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f000 fcbb 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800054a:	2320      	movs	r3, #32
 800054c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4619      	mov	r1, r3
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f000 fb02 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6613      	str	r3, [r2, #96]	; 0x60
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6593      	str	r3, [r2, #88]	; 0x58
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0ac      	sub	sp, #176	; 0xb0
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2288      	movs	r2, #136	; 0x88
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fccf 	bl	8002f8c <memset>
  if(hi2c->Instance==I2C1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d13b      	bne.n	8000670 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f001 ffdb 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000610:	f7ff ffb0 	bl	8000574 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <HAL_I2C_MspInit+0xb4>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800062c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000634:	2312      	movs	r3, #18
 8000636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000646:	2304      	movs	r3, #4
 8000648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000650:	4619      	mov	r1, r3
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <HAL_I2C_MspInit+0xb8>)
 8000654:	f000 fa8a 	bl	8000b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_I2C_MspInit+0xb4>)
 800065a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_I2C_MspInit+0xb4>)
 800065e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000662:	6593      	str	r3, [r2, #88]	; 0x58
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000670:	bf00      	nop
 8000672:	37b0      	adds	r7, #176	; 0xb0
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000
 8000680:	48000400 	.word	0x48000400

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f922 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	e00a      	b.n	8000700 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ea:	f3af 8000 	nop.w
 80006ee:	4601      	mov	r1, r0
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	60ba      	str	r2, [r7, #8]
 80006f6:	b2ca      	uxtb	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf0      	blt.n	80006ea <_read+0x12>
  }

  return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073a:	605a      	str	r2, [r3, #4]
  return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <_isatty>:

int _isatty(int file)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000784:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <_sbrk+0x5c>)
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <_sbrk+0x60>)
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_sbrk+0x64>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <_sbrk+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d207      	bcs.n	80007bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ac:	f002 fbc4 	bl	8002f38 <__errno>
 80007b0:	4603      	mov	r3, r0
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	e009      	b.n	80007d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <_sbrk+0x64>)
 80007cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20018000 	.word	0x20018000
 80007dc:	00000400 	.word	0x00000400
 80007e0:	200000e0 	.word	0x200000e0
 80007e4:	200000f8 	.word	0x200000f8

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000810:	f7ff ffea 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <LoopForever+0x6>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LoopForever+0xe>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <LoopForever+0x16>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f002 fb83 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083e:	f7ff fd81 	bl	8000344 <main>

08000842 <LoopForever>:

LoopForever:
    b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000844:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000850:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 8000854:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000858:	200000f8 	.word	0x200000f8

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_Init+0x3c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <HAL_Init+0x3c>)
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000876:	2003      	movs	r0, #3
 8000878:	f000 f944 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800087c:	2000      	movs	r0, #0
 800087e:	f000 f80f 	bl	80008a0 <HAL_InitTick>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	e001      	b.n	8000892 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800088e:	f7ff fe77 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000892:	79fb      	ldrb	r3, [r7, #7]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_InitTick+0x6c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d023      	beq.n	80008fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <HAL_InitTick+0x70>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_InitTick+0x6c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f941 	bl	8000b52 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10f      	bne.n	80008f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d809      	bhi.n	80008f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f919 	bl	8000b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_InitTick+0x74>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e007      	b.n	8000900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e004      	b.n	8000900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	e001      	b.n	8000900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008
 8000910:	20000000 	.word	0x20000000
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x20>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x24>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_IncTick+0x24>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	200000e4 	.word	0x200000e4

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200000e4 	.word	0x200000e4

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000960:	f7ff ffee 	bl	8000940 <HAL_GetTick>
 8000964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d005      	beq.n	800097e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_Delay+0x44>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097e:	bf00      	nop
 8000980:	f7ff ffde 	bl	8000940 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f7      	bhi.n	8000980 <HAL_Delay+0x28>
  {
  }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008

080009a0 <__NVIC_SetPriorityGrouping>:
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_SetPriority>:
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SysTick_Config>:
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff8e 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff47 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff5c 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff8e 	bl	8000a58 <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffb0 	bl	8000ac0 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e17f      	b.n	8000e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8171 	beq.w	8000e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x40>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	f003 0201 	and.w	r2, r3, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d118      	bne.n	8000c4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c20:	2201      	movs	r2, #1
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	f003 0201 	and.w	r2, r3, #1
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d017      	beq.n	8000c88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	6939      	ldr	r1, [r7, #16]
 8000cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0203 	and.w	r2, r3, #3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80ac 	beq.w	8000e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a5e      	ldr	r2, [pc, #376]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b5c      	ldr	r3, [pc, #368]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d36:	4a5a      	ldr	r2, [pc, #360]	; (8000ea0 <HAL_GPIO_Init+0x334>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d60:	d025      	beq.n	8000dae <HAL_GPIO_Init+0x242>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_GPIO_Init+0x338>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01f      	beq.n	8000daa <HAL_GPIO_Init+0x23e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <HAL_GPIO_Init+0x33c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x23a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4d      	ldr	r2, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x340>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x236>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_GPIO_Init+0x344>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x232>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_GPIO_Init+0x348>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x22e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <HAL_GPIO_Init+0x34c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x22a>
 8000d92:	2306      	movs	r3, #6
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x244>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc0:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <HAL_GPIO_Init+0x334>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_GPIO_Init+0x350>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa22 f303 	lsr.w	r3, r2, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f47f ae78 	bne.w	8000b7c <HAL_GPIO_Init+0x10>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	371c      	adds	r7, #28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	48001400 	.word	0x48001400
 8000eb8:	48001800 	.word	0x48001800
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43d9      	mvns	r1, r3
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	400b      	ands	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e081      	b.n	800103a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d106      	bne.n	8000f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fb3c 	bl	80005c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2224      	movs	r2, #36	; 0x24
 8000f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0201 	bic.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d107      	bne.n	8000f9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e006      	b.n	8000fac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000faa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d104      	bne.n	8000fbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69d9      	ldr	r1, [r3, #28]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	461a      	mov	r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	817b      	strh	r3, [r7, #10]
 8001054:	4613      	mov	r3, r2
 8001056:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b20      	cmp	r3, #32
 8001062:	f040 80da 	bne.w	800121a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <HAL_I2C_Master_Transmit+0x30>
 8001070:	2302      	movs	r3, #2
 8001072:	e0d3      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d8>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800107c:	f7ff fc60 	bl	8000940 <HAL_GetTick>
 8001080:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2319      	movs	r3, #25
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f9f7 	bl	8001482 <I2C_WaitOnFlagUntilTimeout>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0be      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2221      	movs	r2, #33	; 0x21
 80010a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2210      	movs	r2, #16
 80010aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	893a      	ldrh	r2, [r7, #8]
 80010be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	d90e      	bls.n	80010ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	8979      	ldrh	r1, [r7, #10]
 80010de:	4b51      	ldr	r3, [pc, #324]	; (8001224 <HAL_I2C_Master_Transmit+0x1e0>)
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 fb74 	bl	80017d4 <I2C_TransferConfig>
 80010ec:	e06c      	b.n	80011c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	8979      	ldrh	r1, [r7, #10]
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HAL_I2C_Master_Transmit+0x1e0>)
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 fb63 	bl	80017d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800110e:	e05b      	b.n	80011c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	6a39      	ldr	r1, [r7, #32]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f9f4 	bl	8001502 <I2C_WaitOnTXISFlagUntilTimeout>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e07b      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113e:	b29b      	uxth	r3, r3
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	3b01      	subs	r3, #1
 800114e:	b29a      	uxth	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001158:	b29b      	uxth	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d034      	beq.n	80011c8 <HAL_I2C_Master_Transmit+0x184>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001162:	2b00      	cmp	r3, #0
 8001164:	d130      	bne.n	80011c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	2200      	movs	r2, #0
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f000 f986 	bl	8001482 <I2C_WaitOnFlagUntilTimeout>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e04d      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	2bff      	cmp	r3, #255	; 0xff
 8001188:	d90e      	bls.n	80011a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001194:	b2da      	uxtb	r2, r3
 8001196:	8979      	ldrh	r1, [r7, #10]
 8001198:	2300      	movs	r3, #0
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 fb17 	bl	80017d4 <I2C_TransferConfig>
 80011a6:	e00f      	b.n	80011c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	8979      	ldrh	r1, [r7, #10]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 fb06 	bl	80017d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d19e      	bne.n	8001110 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f9d3 	bl	8001582 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e01a      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2220      	movs	r2, #32
 80011ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_I2C_Master_Transmit+0x1e4>)
 80011fa:	400b      	ands	r3, r1
 80011fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2220      	movs	r2, #32
 8001202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800121a:	2302      	movs	r3, #2
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	80002000 	.word	0x80002000
 8001228:	fe00e800 	.word	0xfe00e800

0800122c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af02      	add	r7, sp, #8
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	460b      	mov	r3, r1
 800123a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b20      	cmp	r3, #32
 800124a:	f040 80f1 	bne.w	8001430 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125c:	d101      	bne.n	8001262 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	e0e7      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_I2C_IsDeviceReady+0x44>
 800126c:	2302      	movs	r3, #2
 800126e:	e0e0      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_I2C_IsDeviceReady+0x72>
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800129c:	e004      	b.n	80012a8 <HAL_I2C_IsDeviceReady+0x7c>
 800129e:	897b      	ldrh	r3, [r7, #10]
 80012a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff fb47 	bl	8000940 <HAL_GetTick>
 80012b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	2b20      	cmp	r3, #32
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012e0:	e034      	b.n	800134c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d01a      	beq.n	8001320 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012ea:	f7ff fb29 	bl	8000940 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d302      	bcc.n	8001300 <HAL_I2C_IsDeviceReady+0xd4>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10f      	bne.n	8001320 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f043 0220 	orr.w	r2, r3, #32
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e088      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b20      	cmp	r3, #32
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b10      	cmp	r3, #16
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800134c:	7ffb      	ldrb	r3, [r7, #31]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_I2C_IsDeviceReady+0x12c>
 8001352:	7fbb      	ldrb	r3, [r7, #30]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0c4      	beq.n	80012e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b10      	cmp	r3, #16
 8001364:	d01a      	beq.n	800139c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	2120      	movs	r1, #32
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f886 	bl	8001482 <I2C_WaitOnFlagUntilTimeout>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e058      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2220      	movs	r2, #32
 8001386:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2220      	movs	r2, #32
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e04a      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	2120      	movs	r1, #32
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 f86b 	bl	8001482 <I2C_WaitOnFlagUntilTimeout>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e03d      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2210      	movs	r2, #16
 80013bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2220      	movs	r2, #32
 80013c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d118      	bne.n	8001400 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	2120      	movs	r1, #32
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f84a 	bl	8001482 <I2C_WaitOnFlagUntilTimeout>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e01c      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2220      	movs	r2, #32
 80013fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	f63f af3b 	bhi.w	8001286 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	f043 0220 	orr.w	r2, r3, #32
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001430:	2302      	movs	r3, #2
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b02      	cmp	r3, #2
 800144e:	d103      	bne.n	8001458 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b01      	cmp	r3, #1
 8001464:	d007      	beq.n	8001476 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	619a      	str	r2, [r3, #24]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001492:	e022      	b.n	80014da <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149a:	d01e      	beq.n	80014da <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149c:	f7ff fa50 	bl	8000940 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d302      	bcc.n	80014b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d113      	bne.n	80014da <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f043 0220 	orr.w	r2, r3, #32
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4013      	ands	r3, r2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d0cd      	beq.n	8001494 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800150e:	e02c      	b.n	800156a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f871 	bl	80015fc <I2C_IsErrorOccurred>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e02a      	b.n	800157a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152a:	d01e      	beq.n	800156a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152c:	f7ff fa08 	bl	8000940 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	429a      	cmp	r2, r3
 800153a:	d302      	bcc.n	8001542 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d113      	bne.n	800156a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0220 	orr.w	r2, r3, #32
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e007      	b.n	800157a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d1cb      	bne.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800158e:	e028      	b.n	80015e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f831 	bl	80015fc <I2C_IsErrorOccurred>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e026      	b.n	80015f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a4:	f7ff f9cc 	bl	8000940 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d302      	bcc.n	80015ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d113      	bne.n	80015e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f043 0220 	orr.w	r2, r3, #32
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e007      	b.n	80015f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d1cf      	bne.n	8001590 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	d075      	beq.n	8001714 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2210      	movs	r2, #16
 800162e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001630:	e056      	b.n	80016e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d052      	beq.n	80016e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800163a:	f7ff f981 	bl	8000940 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	429a      	cmp	r2, r3
 8001648:	d302      	bcc.n	8001650 <I2C_IsErrorOccurred+0x54>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d147      	bne.n	80016e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001662:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001672:	d12e      	bne.n	80016d2 <I2C_IsErrorOccurred+0xd6>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800167a:	d02a      	beq.n	80016d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800167c:	7cfb      	ldrb	r3, [r7, #19]
 800167e:	2b20      	cmp	r3, #32
 8001680:	d027      	beq.n	80016d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001690:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001692:	f7ff f955 	bl	8000940 <HAL_GetTick>
 8001696:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001698:	e01b      	b.n	80016d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800169a:	f7ff f951 	bl	8000940 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b19      	cmp	r3, #25
 80016a6:	d914      	bls.n	80016d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2220      	movs	r2, #32
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d1dc      	bne.n	800169a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d003      	beq.n	80016f6 <I2C_IsErrorOccurred+0xfa>
 80016ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d09d      	beq.n	8001632 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2220      	movs	r2, #32
 8001704:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01c      	beq.n	80017c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fe55 	bl	800143a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <I2C_IsErrorOccurred+0x1d4>)
 800179c:	400b      	ands	r3, r1
 800179e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80017c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	fe00e800 	.word	0xfe00e800

080017d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	817b      	strh	r3, [r7, #10]
 80017e2:	4613      	mov	r3, r2
 80017e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017ec:	7a7b      	ldrb	r3, [r7, #9]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001802:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	0d5b      	lsrs	r3, r3, #21
 800180e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <I2C_TransferConfig+0x60>)
 8001814:	430b      	orrs	r3, r1
 8001816:	43db      	mvns	r3, r3
 8001818:	ea02 0103 	and.w	r1, r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001826:	bf00      	nop
 8001828:	371c      	adds	r7, #28
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	03ff63ff 	.word	0x03ff63ff

08001838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b20      	cmp	r3, #32
 800184c:	d138      	bne.n	80018c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001858:	2302      	movs	r3, #2
 800185a:	e032      	b.n	80018c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800188a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d139      	bne.n	8001958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e033      	b.n	800195a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2224      	movs	r2, #36	; 0x24
 80018fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001958:	2302      	movs	r3, #2
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_PWREx_GetVoltageRange+0x18>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000

08001984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001992:	d130      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a0:	d038      	beq.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2232      	movs	r2, #50	; 0x32
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9b      	lsrs	r3, r3, #18
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c8:	e002      	b.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019dc:	d102      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f2      	bne.n	80019ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f0:	d110      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e00f      	b.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a02:	d007      	beq.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40007000 	.word	0x40007000
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	431bde83 	.word	0x431bde83

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e3ca      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4b97      	ldr	r3, [pc, #604]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a4c:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80e4 	beq.w	8001c2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4a>
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	f040 808b 	bne.w	8001b88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f040 8087 	bne.w	8001b88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x62>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e3a2      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <HAL_RCC_OscConfig+0x7c>
 8001aa2:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_OscConfig+0x88>
 8001aac:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d223      	bcs.n	8001b04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd1d 	bl	8002500 <RCC_SetFlashLatencyFromMSIRange>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e383      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad0:	4b73      	ldr	r3, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a72      	ldr	r2, [pc, #456]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	496d      	ldr	r1, [pc, #436]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4968      	ldr	r1, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
 8001b02:	e025      	b.n	8001b50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a65      	ldr	r2, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4960      	ldr	r1, [pc, #384]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	495b      	ldr	r1, [pc, #364]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fcdd 	bl	8002500 <RCC_SetFlashLatencyFromMSIRange>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e343      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b50:	f000 fc4a 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	4950      	ldr	r1, [pc, #320]	; (8001ca4 <HAL_RCC_OscConfig+0x274>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ca8 <HAL_RCC_OscConfig+0x278>)
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b70:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_RCC_OscConfig+0x27c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fe93 	bl	80008a0 <HAL_InitTick>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d052      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	e327      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d032      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a42      	ldr	r2, [pc, #264]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b9c:	f7fe fed0 	bl	8000940 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba4:	f7fe fecc 	bl	8000940 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e310      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4931      	ldr	r1, [pc, #196]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e01a      	b.n	8001c2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c02:	f7fe fe9d 	bl	8000940 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0a:	f7fe fe99 	bl	8000940 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e2dd      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x1da>
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d074      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x21a>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d10e      	bne.n	8001c62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d064      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2f0>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d160      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e2ba      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x24a>
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e026      	b.n	8001cc8 <HAL_RCC_OscConfig+0x298>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c82:	d115      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x280>
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a02      	ldr	r2, [pc, #8]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x298>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08003ee8 	.word	0x08003ee8
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	4ba0      	ldr	r3, [pc, #640]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a9f      	ldr	r2, [pc, #636]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b9d      	ldr	r3, [pc, #628]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a9c      	ldr	r2, [pc, #624]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fe36 	bl	8000940 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7fe fe32 	bl	8000940 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e276      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cea:	4b92      	ldr	r3, [pc, #584]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2a8>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fe22 	bl	8000940 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7fe fe1e 	bl	8000940 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e262      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2d0>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d060      	beq.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x310>
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d119      	bne.n	8001d6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d116      	bne.n	8001d6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d40:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_OscConfig+0x328>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e23f      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	4973      	ldr	r1, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6c:	e040      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d023      	beq.n	8001dbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d76:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7fe fddd 	bl	8000940 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7fe fdd9 	bl	8000940 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e21d      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9c:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	495f      	ldr	r1, [pc, #380]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e018      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5c      	ldr	r2, [pc, #368]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7fe fdb9 	bl	8000940 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7fe fdb5 	bl	8000940 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1f9      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d03c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e04:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7fe fd94 	bl	8000940 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fd90 	bl	8000940 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1d4      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ef      	beq.n	8001e1c <HAL_RCC_OscConfig+0x3ec>
 8001e3c:	e01b      	b.n	8001e76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e44:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fd77 	bl	8000940 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe fd73 	bl	8000940 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1b7      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ef      	bne.n	8001e56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80a6 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e88:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_RCC_OscConfig+0x508>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d118      	bne.n	8001eee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_RCC_OscConfig+0x508>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x508>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fd3a 	bl	8000940 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed0:	f7fe fd36 	bl	8000940 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e17a      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x508>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4d8>
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f06:	e029      	b.n	8001f5c <HAL_RCC_OscConfig+0x52c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d115      	bne.n	8001f3c <HAL_RCC_OscConfig+0x50c>
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x52c>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	4b9c      	ldr	r3, [pc, #624]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	4a9b      	ldr	r2, [pc, #620]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4c:	4b98      	ldr	r3, [pc, #608]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	4a97      	ldr	r2, [pc, #604]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d016      	beq.n	8001f92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7fe fcec 	bl	8000940 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fce8 	bl	8000940 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e12a      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f82:	4b8b      	ldr	r3, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ed      	beq.n	8001f6c <HAL_RCC_OscConfig+0x53c>
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7fe fcd5 	bl	8000940 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fcd1 	bl	8000940 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e113      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb0:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ed      	bne.n	8001f9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	4a79      	ldr	r2, [pc, #484]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80fe 	beq.w	80021d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	f040 80d0 	bne.w	8002184 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fe4:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d130      	bne.n	800205a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	3b01      	subs	r3, #1
 8002004:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d127      	bne.n	800205a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11f      	bne.n	800205a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002024:	2a07      	cmp	r2, #7
 8002026:	bf14      	ite	ne
 8002028:	2201      	movne	r2, #1
 800202a:	2200      	moveq	r2, #0
 800202c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800202e:	4293      	cmp	r3, r2
 8002030:	d113      	bne.n	800205a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d109      	bne.n	800205a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	3b01      	subs	r3, #1
 8002054:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d06e      	beq.n	8002138 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d069      	beq.n	8002134 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0ad      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002088:	f7fe fc5a 	bl	8000940 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe fc56 	bl	8000940 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e09a      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ae:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_RCC_OscConfig+0x784>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020be:	3a01      	subs	r2, #1
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	4311      	orrs	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020c8:	0212      	lsls	r2, r2, #8
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020d0:	0852      	lsrs	r2, r2, #1
 80020d2:	3a01      	subs	r2, #1
 80020d4:	0552      	lsls	r2, r2, #21
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020dc:	0852      	lsrs	r2, r2, #1
 80020de:	3a01      	subs	r2, #1
 80020e0:	0652      	lsls	r2, r2, #25
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020e8:	0912      	lsrs	r2, r2, #4
 80020ea:	0452      	lsls	r2, r2, #17
 80020ec:	430a      	orrs	r2, r1
 80020ee:	4930      	ldr	r1, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800210c:	f7fe fc18 	bl	8000940 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe fc14 	bl	8000940 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e058      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002132:	e050      	b.n	80021d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e04f      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d148      	bne.n	80021d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800215c:	f7fe fbf0 	bl	8000940 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fbec 	bl	8000940 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e030      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x734>
 8002182:	e028      	b.n	80021d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d023      	beq.n	80021d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x780>)
 8002190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe fbd3 	bl	8000940 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219c:	e00c      	b.n	80021b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7fe fbcf 	bl	8000940 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d905      	bls.n	80021b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e013      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_OscConfig+0x7b0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ec      	bne.n	800219e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_OscConfig+0x7b0>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4905      	ldr	r1, [pc, #20]	; (80021e0 <HAL_RCC_OscConfig+0x7b0>)
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCC_OscConfig+0x7b4>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e001      	b.n	80021d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	feeefffc 	.word	0xfeeefffc

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0e7      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b72      	ldr	r3, [pc, #456]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4970      	ldr	r1, [pc, #448]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b6e      	ldr	r3, [pc, #440]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cf      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002244:	429a      	cmp	r2, r3
 8002246:	d908      	bls.n	800225a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4960      	ldr	r1, [pc, #384]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04c      	beq.n	8002300 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d121      	bne.n	80022be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0a6      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002286:	4b54      	ldr	r3, [pc, #336]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d115      	bne.n	80022be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e09a      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229e:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e08e      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e086      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4943      	ldr	r1, [pc, #268]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d0:	f7fe fb36 	bl	8000940 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fb32 	bl	8000940 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e06e      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d010      	beq.n	800232e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002318:	429a      	cmp	r2, r3
 800231a:	d208      	bcs.n	800232e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	492b      	ldr	r1, [pc, #172]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d210      	bcs.n	800235e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	4923      	ldr	r1, [pc, #140]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_RCC_ClockConfig+0x1ec>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e036      	b.n	80023cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4918      	ldr	r1, [pc, #96]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4910      	ldr	r1, [pc, #64]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800239c:	f000 f824 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	490b      	ldr	r1, [pc, #44]	; (80023dc <HAL_RCC_ClockConfig+0x1f4>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1fc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fa6d 	bl	80008a0 <HAL_InitTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ca:	7afb      	ldrb	r3, [r7, #11]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08003ee8 	.word	0x08003ee8
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d121      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d11e      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800241c:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002428:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e005      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002444:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d102      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e004      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d101      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCC_GetSysClockFreq+0x114>)
 800246e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d134      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d003      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0xa6>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d003      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0xac>
 800248c:	e005      	b.n	800249a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002490:	617b      	str	r3, [r7, #20]
      break;
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002496:	617b      	str	r3, [r7, #20]
      break;
 8002498:	e002      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	617b      	str	r3, [r7, #20]
      break;
 800249e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	3301      	adds	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	fb03 f202 	mul.w	r2, r3, r2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	0e5b      	lsrs	r3, r3, #25
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	3301      	adds	r3, #1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e0:	69bb      	ldr	r3, [r7, #24]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08003ef8 	.word	0x08003ef8
 80024f8:	00f42400 	.word	0x00f42400
 80024fc:	007a1200 	.word	0x007a1200

08002500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002518:	f7ff fa26 	bl	8001968 <HAL_PWREx_GetVoltageRange>
 800251c:	6178      	str	r0, [r7, #20]
 800251e:	e014      	b.n	800254a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	; 0x58
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002538:	f7ff fa16 	bl	8001968 <HAL_PWREx_GetVoltageRange>
 800253c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002550:	d10b      	bne.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d919      	bls.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2ba0      	cmp	r3, #160	; 0xa0
 800255c:	d902      	bls.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800255e:	2302      	movs	r3, #2
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e013      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002564:	2301      	movs	r3, #1
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e010      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d902      	bls.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002570:	2303      	movs	r3, #3
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e00a      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d102      	bne.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e004      	b.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d101      	bne.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 0207 	bic.w	r2, r3, #7
 8002594:	4909      	ldr	r1, [pc, #36]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40022000 	.word	0x40022000

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d041      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025e4:	d02a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025ea:	d824      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025f0:	d008      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025f6:	d81e      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002600:	d010      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002602:	e018      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002604:	4b86      	ldr	r3, [pc, #536]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a85      	ldr	r2, [pc, #532]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002610:	e015      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fabb 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002622:	e00c      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3320      	adds	r3, #32
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fba6 	bl	8002d7c <RCCEx_PLLSAI2_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002634:	e003      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	74fb      	strb	r3, [r7, #19]
      break;
 800263a:	e000      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800263c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002652:	4973      	ldr	r1, [pc, #460]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800265a:	e001      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d041      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002674:	d02a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800267a:	d824      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800267c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002680:	d008      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002686:	d81e      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d010      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002692:	e018      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002694:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a61      	ldr	r2, [pc, #388]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a0:	e015      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fa73 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b2:	e00c      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3320      	adds	r3, #32
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fb5e 	bl	8002d7c <RCCEx_PLLSAI2_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c4:	e003      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	74fb      	strb	r3, [r7, #19]
      break;
 80026ca:	e000      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e2:	494f      	ldr	r1, [pc, #316]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ea:	e001      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a0 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a40      	ldr	r2, [pc, #256]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002730:	2301      	movs	r3, #1
 8002732:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002740:	f7fe f8fe 	bl	8000940 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002746:	e009      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002748:	f7fe f8fa 	bl	8000940 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	74fb      	strb	r3, [r7, #19]
        break;
 800275a:	e005      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ef      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d15c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002778:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	d019      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002796:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a20      	ldr	r2, [pc, #128]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe f8b9 	bl	8000940 <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d0:	e00b      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe f8b5 	bl	8000940 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d902      	bls.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	74fb      	strb	r3, [r7, #19]
            break;
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ec      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280e:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002816:	e009      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282c:	7c7b      	ldrb	r3, [r7, #17]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b9e      	ldr	r3, [pc, #632]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a9d      	ldr	r2, [pc, #628]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284a:	4b98      	ldr	r3, [pc, #608]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 0203 	bic.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	4994      	ldr	r1, [pc, #592]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286c:	4b8f      	ldr	r3, [pc, #572]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 020c 	bic.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	498c      	ldr	r1, [pc, #560]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800288e:	4b87      	ldr	r3, [pc, #540]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4983      	ldr	r1, [pc, #524]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b0:	4b7e      	ldr	r3, [pc, #504]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	497b      	ldr	r1, [pc, #492]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	4972      	ldr	r1, [pc, #456]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f4:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	496a      	ldr	r1, [pc, #424]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002916:	4b65      	ldr	r3, [pc, #404]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	4961      	ldr	r1, [pc, #388]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002938:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	4959      	ldr	r1, [pc, #356]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295a:	4b54      	ldr	r3, [pc, #336]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	4950      	ldr	r1, [pc, #320]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800297c:	4b4b      	ldr	r3, [pc, #300]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	4948      	ldr	r1, [pc, #288]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	493f      	ldr	r1, [pc, #252]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d028      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d106      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a31      	ldr	r2, [pc, #196]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
 80029ec:	e011      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3304      	adds	r3, #4
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f8c8 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	491f      	ldr	r1, [pc, #124]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a3c:	d106      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a48:	60d3      	str	r3, [r2, #12]
 8002a4a:	e011      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f899 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02b      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa6:	60d3      	str	r3, [r2, #12]
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f867 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02f      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aee:	4928      	ldr	r1, [pc, #160]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f844 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	74bb      	strb	r3, [r7, #18]
 8002b1a:	e011      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3320      	adds	r3, #32
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f925 	bl	8002d7c <RCCEx_PLLSAI2_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5a:	490d      	ldr	r1, [pc, #52]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7e:	4904      	ldr	r1, [pc, #16]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b86:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba2:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bae:	4b72      	ldr	r3, [pc, #456]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0203 	and.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d047      	beq.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e044      	b.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d018      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x86>
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d825      	bhi.n	8002c38 <RCCEx_PLLSAI1_Config+0xa4>
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <RCCEx_PLLSAI1_Config+0x62>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d009      	beq.n	8002c08 <RCCEx_PLLSAI1_Config+0x74>
 8002bf4:	e020      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d11d      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e01a      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c08:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e013      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c36:	e006      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e004      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	430b      	orrs	r3, r1
 8002c64:	4944      	ldr	r1, [pc, #272]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d17d      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fd fe60 	bl	8000940 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c84:	f7fd fe5c 	bl	8000940 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
        break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ef      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d160      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	0912      	lsrs	r2, r2, #4
 8002cc8:	0452      	lsls	r2, r2, #17
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	492a      	ldr	r1, [pc, #168]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	610b      	str	r3, [r1, #16]
 8002cd2:	e027      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d112      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6892      	ldr	r2, [r2, #8]
 8002cea:	0211      	lsls	r1, r2, #8
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6912      	ldr	r2, [r2, #16]
 8002cf0:	0852      	lsrs	r2, r2, #1
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0552      	lsls	r2, r2, #21
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	491f      	ldr	r1, [pc, #124]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	610b      	str	r3, [r1, #16]
 8002cfe:	e011      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	0211      	lsls	r1, r2, #8
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6952      	ldr	r2, [r2, #20]
 8002d16:	0852      	lsrs	r2, r2, #1
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	0652      	lsls	r2, r2, #25
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	4916      	ldr	r1, [pc, #88]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fd fe06 	bl	8000940 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d36:	e009      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d38:	f7fd fe02 	bl	8000940 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	73fb      	strb	r3, [r7, #15]
          break;
 8002d4a:	e005      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ef      	beq.n	8002d38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d018      	beq.n	8002dc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0203 	and.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d10d      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
       ||
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d047      	beq.n	8002e52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e044      	b.n	8002e52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d018      	beq.n	8002e02 <RCCEx_PLLSAI2_Config+0x86>
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d825      	bhi.n	8002e20 <RCCEx_PLLSAI2_Config+0xa4>
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d002      	beq.n	8002dde <RCCEx_PLLSAI2_Config+0x62>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d009      	beq.n	8002df0 <RCCEx_PLLSAI2_Config+0x74>
 8002ddc:	e020      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dde:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11d      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e01a      	b.n	8002e26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e013      	b.n	8002e2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e1e:	e006      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e004      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	4939      	ldr	r1, [pc, #228]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d167      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a35      	ldr	r2, [pc, #212]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fd fd6c 	bl	8000940 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e6a:	e009      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e6c:	f7fd fd68 	bl	8000940 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e7e:	e005      	b.n	8002e8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e80:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ef      	bne.n	8002e6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d14a      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6892      	ldr	r2, [r2, #8]
 8002ea8:	0211      	lsls	r1, r2, #8
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	0912      	lsrs	r2, r2, #4
 8002eb0:	0452      	lsls	r2, r2, #17
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	491f      	ldr	r1, [pc, #124]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	614b      	str	r3, [r1, #20]
 8002eba:	e011      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6912      	ldr	r2, [r2, #16]
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0652      	lsls	r2, r2, #25
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	4916      	ldr	r1, [pc, #88]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fd fd28 	bl	8000940 <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef2:	e009      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ef4:	f7fd fd24 	bl	8000940 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d902      	bls.n	8002f08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	73fb      	strb	r3, [r7, #15]
          break;
 8002f06:	e005      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ef      	beq.n	8002ef4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000

08002f38 <__errno>:
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <__errno+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4d0d      	ldr	r5, [pc, #52]	; (8002f7c <__libc_init_array+0x38>)
 8002f48:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <__libc_init_array+0x3c>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	2600      	movs	r6, #0
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	4d0b      	ldr	r5, [pc, #44]	; (8002f84 <__libc_init_array+0x40>)
 8002f56:	4c0c      	ldr	r4, [pc, #48]	; (8002f88 <__libc_init_array+0x44>)
 8002f58:	f000 ffae 	bl	8003eb8 <_init>
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	2600      	movs	r6, #0
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08003fc0 	.word	0x08003fc0
 8002f80:	08003fc0 	.word	0x08003fc0
 8002f84:	08003fc0 	.word	0x08003fc0
 8002f88:	08003fc4 	.word	0x08003fc4

08002f8c <memset>:
 8002f8c:	4402      	add	r2, r0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d100      	bne.n	8002f96 <memset+0xa>
 8002f94:	4770      	bx	lr
 8002f96:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9a:	e7f9      	b.n	8002f90 <memset+0x4>

08002f9c <iprintf>:
 8002f9c:	b40f      	push	{r0, r1, r2, r3}
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <iprintf+0x2c>)
 8002fa0:	b513      	push	{r0, r1, r4, lr}
 8002fa2:	681c      	ldr	r4, [r3, #0]
 8002fa4:	b124      	cbz	r4, 8002fb0 <iprintf+0x14>
 8002fa6:	69a3      	ldr	r3, [r4, #24]
 8002fa8:	b913      	cbnz	r3, 8002fb0 <iprintf+0x14>
 8002faa:	4620      	mov	r0, r4
 8002fac:	f000 f866 	bl	800307c <__sinit>
 8002fb0:	ab05      	add	r3, sp, #20
 8002fb2:	9a04      	ldr	r2, [sp, #16]
 8002fb4:	68a1      	ldr	r1, [r4, #8]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 f9bd 	bl	8003338 <_vfiprintf_r>
 8002fbe:	b002      	add	sp, #8
 8002fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc4:	b004      	add	sp, #16
 8002fc6:	4770      	bx	lr
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <std>:
 8002fcc:	2300      	movs	r3, #0
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8002fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fda:	6083      	str	r3, [r0, #8]
 8002fdc:	8181      	strh	r1, [r0, #12]
 8002fde:	6643      	str	r3, [r0, #100]	; 0x64
 8002fe0:	81c2      	strh	r2, [r0, #14]
 8002fe2:	6183      	str	r3, [r0, #24]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	305c      	adds	r0, #92	; 0x5c
 8002fea:	f7ff ffcf 	bl	8002f8c <memset>
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <std+0x38>)
 8002ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <std+0x3c>)
 8002ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <std+0x40>)
 8002ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <std+0x44>)
 8002ffc:	6224      	str	r4, [r4, #32]
 8002ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8003000:	bd10      	pop	{r4, pc}
 8003002:	bf00      	nop
 8003004:	080038e1 	.word	0x080038e1
 8003008:	08003903 	.word	0x08003903
 800300c:	0800393b 	.word	0x0800393b
 8003010:	0800395f 	.word	0x0800395f

08003014 <_cleanup_r>:
 8003014:	4901      	ldr	r1, [pc, #4]	; (800301c <_cleanup_r+0x8>)
 8003016:	f000 b8af 	b.w	8003178 <_fwalk_reent>
 800301a:	bf00      	nop
 800301c:	08003c39 	.word	0x08003c39

08003020 <__sfmoreglue>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2268      	movs	r2, #104	; 0x68
 8003024:	1e4d      	subs	r5, r1, #1
 8003026:	4355      	muls	r5, r2
 8003028:	460e      	mov	r6, r1
 800302a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800302e:	f000 f8e5 	bl	80031fc <_malloc_r>
 8003032:	4604      	mov	r4, r0
 8003034:	b140      	cbz	r0, 8003048 <__sfmoreglue+0x28>
 8003036:	2100      	movs	r1, #0
 8003038:	e9c0 1600 	strd	r1, r6, [r0]
 800303c:	300c      	adds	r0, #12
 800303e:	60a0      	str	r0, [r4, #8]
 8003040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003044:	f7ff ffa2 	bl	8002f8c <memset>
 8003048:	4620      	mov	r0, r4
 800304a:	bd70      	pop	{r4, r5, r6, pc}

0800304c <__sfp_lock_acquire>:
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <__sfp_lock_acquire+0x8>)
 800304e:	f000 b8b3 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	200000e9 	.word	0x200000e9

08003058 <__sfp_lock_release>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__sfp_lock_release+0x8>)
 800305a:	f000 b8ae 	b.w	80031ba <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	200000e9 	.word	0x200000e9

08003064 <__sinit_lock_acquire>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__sinit_lock_acquire+0x8>)
 8003066:	f000 b8a7 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 800306a:	bf00      	nop
 800306c:	200000ea 	.word	0x200000ea

08003070 <__sinit_lock_release>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__sinit_lock_release+0x8>)
 8003072:	f000 b8a2 	b.w	80031ba <__retarget_lock_release_recursive>
 8003076:	bf00      	nop
 8003078:	200000ea 	.word	0x200000ea

0800307c <__sinit>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4604      	mov	r4, r0
 8003080:	f7ff fff0 	bl	8003064 <__sinit_lock_acquire>
 8003084:	69a3      	ldr	r3, [r4, #24]
 8003086:	b11b      	cbz	r3, 8003090 <__sinit+0x14>
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800308c:	f7ff bff0 	b.w	8003070 <__sinit_lock_release>
 8003090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003094:	6523      	str	r3, [r4, #80]	; 0x50
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <__sinit+0x68>)
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <__sinit+0x6c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	62a2      	str	r2, [r4, #40]	; 0x28
 800309e:	42a3      	cmp	r3, r4
 80030a0:	bf04      	itt	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	61a3      	streq	r3, [r4, #24]
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 f820 	bl	80030ec <__sfp>
 80030ac:	6060      	str	r0, [r4, #4]
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f81c 	bl	80030ec <__sfp>
 80030b4:	60a0      	str	r0, [r4, #8]
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 f818 	bl	80030ec <__sfp>
 80030bc:	2200      	movs	r2, #0
 80030be:	60e0      	str	r0, [r4, #12]
 80030c0:	2104      	movs	r1, #4
 80030c2:	6860      	ldr	r0, [r4, #4]
 80030c4:	f7ff ff82 	bl	8002fcc <std>
 80030c8:	68a0      	ldr	r0, [r4, #8]
 80030ca:	2201      	movs	r2, #1
 80030cc:	2109      	movs	r1, #9
 80030ce:	f7ff ff7d 	bl	8002fcc <std>
 80030d2:	68e0      	ldr	r0, [r4, #12]
 80030d4:	2202      	movs	r2, #2
 80030d6:	2112      	movs	r1, #18
 80030d8:	f7ff ff78 	bl	8002fcc <std>
 80030dc:	2301      	movs	r3, #1
 80030de:	61a3      	str	r3, [r4, #24]
 80030e0:	e7d2      	b.n	8003088 <__sinit+0xc>
 80030e2:	bf00      	nop
 80030e4:	08003f28 	.word	0x08003f28
 80030e8:	08003015 	.word	0x08003015

080030ec <__sfp>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	4607      	mov	r7, r0
 80030f0:	f7ff ffac 	bl	800304c <__sfp_lock_acquire>
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <__sfp+0x84>)
 80030f6:	681e      	ldr	r6, [r3, #0]
 80030f8:	69b3      	ldr	r3, [r6, #24]
 80030fa:	b913      	cbnz	r3, 8003102 <__sfp+0x16>
 80030fc:	4630      	mov	r0, r6
 80030fe:	f7ff ffbd 	bl	800307c <__sinit>
 8003102:	3648      	adds	r6, #72	; 0x48
 8003104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003108:	3b01      	subs	r3, #1
 800310a:	d503      	bpl.n	8003114 <__sfp+0x28>
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	b30b      	cbz	r3, 8003154 <__sfp+0x68>
 8003110:	6836      	ldr	r6, [r6, #0]
 8003112:	e7f7      	b.n	8003104 <__sfp+0x18>
 8003114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003118:	b9d5      	cbnz	r5, 8003150 <__sfp+0x64>
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <__sfp+0x88>)
 800311c:	60e3      	str	r3, [r4, #12]
 800311e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003122:	6665      	str	r5, [r4, #100]	; 0x64
 8003124:	f000 f847 	bl	80031b6 <__retarget_lock_init_recursive>
 8003128:	f7ff ff96 	bl	8003058 <__sfp_lock_release>
 800312c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003134:	6025      	str	r5, [r4, #0]
 8003136:	61a5      	str	r5, [r4, #24]
 8003138:	2208      	movs	r2, #8
 800313a:	4629      	mov	r1, r5
 800313c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003140:	f7ff ff24 	bl	8002f8c <memset>
 8003144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800314c:	4620      	mov	r0, r4
 800314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003150:	3468      	adds	r4, #104	; 0x68
 8003152:	e7d9      	b.n	8003108 <__sfp+0x1c>
 8003154:	2104      	movs	r1, #4
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff ff62 	bl	8003020 <__sfmoreglue>
 800315c:	4604      	mov	r4, r0
 800315e:	6030      	str	r0, [r6, #0]
 8003160:	2800      	cmp	r0, #0
 8003162:	d1d5      	bne.n	8003110 <__sfp+0x24>
 8003164:	f7ff ff78 	bl	8003058 <__sfp_lock_release>
 8003168:	230c      	movs	r3, #12
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	e7ee      	b.n	800314c <__sfp+0x60>
 800316e:	bf00      	nop
 8003170:	08003f28 	.word	0x08003f28
 8003174:	ffff0001 	.word	0xffff0001

08003178 <_fwalk_reent>:
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800317c:	4606      	mov	r6, r0
 800317e:	4688      	mov	r8, r1
 8003180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003184:	2700      	movs	r7, #0
 8003186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800318a:	f1b9 0901 	subs.w	r9, r9, #1
 800318e:	d505      	bpl.n	800319c <_fwalk_reent+0x24>
 8003190:	6824      	ldr	r4, [r4, #0]
 8003192:	2c00      	cmp	r4, #0
 8003194:	d1f7      	bne.n	8003186 <_fwalk_reent+0xe>
 8003196:	4638      	mov	r0, r7
 8003198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800319c:	89ab      	ldrh	r3, [r5, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d907      	bls.n	80031b2 <_fwalk_reent+0x3a>
 80031a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a6:	3301      	adds	r3, #1
 80031a8:	d003      	beq.n	80031b2 <_fwalk_reent+0x3a>
 80031aa:	4629      	mov	r1, r5
 80031ac:	4630      	mov	r0, r6
 80031ae:	47c0      	blx	r8
 80031b0:	4307      	orrs	r7, r0
 80031b2:	3568      	adds	r5, #104	; 0x68
 80031b4:	e7e9      	b.n	800318a <_fwalk_reent+0x12>

080031b6 <__retarget_lock_init_recursive>:
 80031b6:	4770      	bx	lr

080031b8 <__retarget_lock_acquire_recursive>:
 80031b8:	4770      	bx	lr

080031ba <__retarget_lock_release_recursive>:
 80031ba:	4770      	bx	lr

080031bc <sbrk_aligned>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	4e0e      	ldr	r6, [pc, #56]	; (80031f8 <sbrk_aligned+0x3c>)
 80031c0:	460c      	mov	r4, r1
 80031c2:	6831      	ldr	r1, [r6, #0]
 80031c4:	4605      	mov	r5, r0
 80031c6:	b911      	cbnz	r1, 80031ce <sbrk_aligned+0x12>
 80031c8:	f000 fb7a 	bl	80038c0 <_sbrk_r>
 80031cc:	6030      	str	r0, [r6, #0]
 80031ce:	4621      	mov	r1, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 fb75 	bl	80038c0 <_sbrk_r>
 80031d6:	1c43      	adds	r3, r0, #1
 80031d8:	d00a      	beq.n	80031f0 <sbrk_aligned+0x34>
 80031da:	1cc4      	adds	r4, r0, #3
 80031dc:	f024 0403 	bic.w	r4, r4, #3
 80031e0:	42a0      	cmp	r0, r4
 80031e2:	d007      	beq.n	80031f4 <sbrk_aligned+0x38>
 80031e4:	1a21      	subs	r1, r4, r0
 80031e6:	4628      	mov	r0, r5
 80031e8:	f000 fb6a 	bl	80038c0 <_sbrk_r>
 80031ec:	3001      	adds	r0, #1
 80031ee:	d101      	bne.n	80031f4 <sbrk_aligned+0x38>
 80031f0:	f04f 34ff 	mov.w	r4, #4294967295
 80031f4:	4620      	mov	r0, r4
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	200000f0 	.word	0x200000f0

080031fc <_malloc_r>:
 80031fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003200:	1ccd      	adds	r5, r1, #3
 8003202:	f025 0503 	bic.w	r5, r5, #3
 8003206:	3508      	adds	r5, #8
 8003208:	2d0c      	cmp	r5, #12
 800320a:	bf38      	it	cc
 800320c:	250c      	movcc	r5, #12
 800320e:	2d00      	cmp	r5, #0
 8003210:	4607      	mov	r7, r0
 8003212:	db01      	blt.n	8003218 <_malloc_r+0x1c>
 8003214:	42a9      	cmp	r1, r5
 8003216:	d905      	bls.n	8003224 <_malloc_r+0x28>
 8003218:	230c      	movs	r3, #12
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	2600      	movs	r6, #0
 800321e:	4630      	mov	r0, r6
 8003220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003224:	4e2e      	ldr	r6, [pc, #184]	; (80032e0 <_malloc_r+0xe4>)
 8003226:	f000 fdbb 	bl	8003da0 <__malloc_lock>
 800322a:	6833      	ldr	r3, [r6, #0]
 800322c:	461c      	mov	r4, r3
 800322e:	bb34      	cbnz	r4, 800327e <_malloc_r+0x82>
 8003230:	4629      	mov	r1, r5
 8003232:	4638      	mov	r0, r7
 8003234:	f7ff ffc2 	bl	80031bc <sbrk_aligned>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	4604      	mov	r4, r0
 800323c:	d14d      	bne.n	80032da <_malloc_r+0xde>
 800323e:	6834      	ldr	r4, [r6, #0]
 8003240:	4626      	mov	r6, r4
 8003242:	2e00      	cmp	r6, #0
 8003244:	d140      	bne.n	80032c8 <_malloc_r+0xcc>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	4631      	mov	r1, r6
 800324a:	4638      	mov	r0, r7
 800324c:	eb04 0803 	add.w	r8, r4, r3
 8003250:	f000 fb36 	bl	80038c0 <_sbrk_r>
 8003254:	4580      	cmp	r8, r0
 8003256:	d13a      	bne.n	80032ce <_malloc_r+0xd2>
 8003258:	6821      	ldr	r1, [r4, #0]
 800325a:	3503      	adds	r5, #3
 800325c:	1a6d      	subs	r5, r5, r1
 800325e:	f025 0503 	bic.w	r5, r5, #3
 8003262:	3508      	adds	r5, #8
 8003264:	2d0c      	cmp	r5, #12
 8003266:	bf38      	it	cc
 8003268:	250c      	movcc	r5, #12
 800326a:	4629      	mov	r1, r5
 800326c:	4638      	mov	r0, r7
 800326e:	f7ff ffa5 	bl	80031bc <sbrk_aligned>
 8003272:	3001      	adds	r0, #1
 8003274:	d02b      	beq.n	80032ce <_malloc_r+0xd2>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	442b      	add	r3, r5
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	e00e      	b.n	800329c <_malloc_r+0xa0>
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	1b52      	subs	r2, r2, r5
 8003282:	d41e      	bmi.n	80032c2 <_malloc_r+0xc6>
 8003284:	2a0b      	cmp	r2, #11
 8003286:	d916      	bls.n	80032b6 <_malloc_r+0xba>
 8003288:	1961      	adds	r1, r4, r5
 800328a:	42a3      	cmp	r3, r4
 800328c:	6025      	str	r5, [r4, #0]
 800328e:	bf18      	it	ne
 8003290:	6059      	strne	r1, [r3, #4]
 8003292:	6863      	ldr	r3, [r4, #4]
 8003294:	bf08      	it	eq
 8003296:	6031      	streq	r1, [r6, #0]
 8003298:	5162      	str	r2, [r4, r5]
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	4638      	mov	r0, r7
 800329e:	f104 060b 	add.w	r6, r4, #11
 80032a2:	f000 fd83 	bl	8003dac <__malloc_unlock>
 80032a6:	f026 0607 	bic.w	r6, r6, #7
 80032aa:	1d23      	adds	r3, r4, #4
 80032ac:	1af2      	subs	r2, r6, r3
 80032ae:	d0b6      	beq.n	800321e <_malloc_r+0x22>
 80032b0:	1b9b      	subs	r3, r3, r6
 80032b2:	50a3      	str	r3, [r4, r2]
 80032b4:	e7b3      	b.n	800321e <_malloc_r+0x22>
 80032b6:	6862      	ldr	r2, [r4, #4]
 80032b8:	42a3      	cmp	r3, r4
 80032ba:	bf0c      	ite	eq
 80032bc:	6032      	streq	r2, [r6, #0]
 80032be:	605a      	strne	r2, [r3, #4]
 80032c0:	e7ec      	b.n	800329c <_malloc_r+0xa0>
 80032c2:	4623      	mov	r3, r4
 80032c4:	6864      	ldr	r4, [r4, #4]
 80032c6:	e7b2      	b.n	800322e <_malloc_r+0x32>
 80032c8:	4634      	mov	r4, r6
 80032ca:	6876      	ldr	r6, [r6, #4]
 80032cc:	e7b9      	b.n	8003242 <_malloc_r+0x46>
 80032ce:	230c      	movs	r3, #12
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4638      	mov	r0, r7
 80032d4:	f000 fd6a 	bl	8003dac <__malloc_unlock>
 80032d8:	e7a1      	b.n	800321e <_malloc_r+0x22>
 80032da:	6025      	str	r5, [r4, #0]
 80032dc:	e7de      	b.n	800329c <_malloc_r+0xa0>
 80032de:	bf00      	nop
 80032e0:	200000ec 	.word	0x200000ec

080032e4 <__sfputc_r>:
 80032e4:	6893      	ldr	r3, [r2, #8]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	b410      	push	{r4}
 80032ec:	6093      	str	r3, [r2, #8]
 80032ee:	da08      	bge.n	8003302 <__sfputc_r+0x1e>
 80032f0:	6994      	ldr	r4, [r2, #24]
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	db01      	blt.n	80032fa <__sfputc_r+0x16>
 80032f6:	290a      	cmp	r1, #10
 80032f8:	d103      	bne.n	8003302 <__sfputc_r+0x1e>
 80032fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032fe:	f000 bb33 	b.w	8003968 <__swbuf_r>
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	1c58      	adds	r0, r3, #1
 8003306:	6010      	str	r0, [r2, #0]
 8003308:	7019      	strb	r1, [r3, #0]
 800330a:	4608      	mov	r0, r1
 800330c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003310:	4770      	bx	lr

08003312 <__sfputs_r>:
 8003312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003314:	4606      	mov	r6, r0
 8003316:	460f      	mov	r7, r1
 8003318:	4614      	mov	r4, r2
 800331a:	18d5      	adds	r5, r2, r3
 800331c:	42ac      	cmp	r4, r5
 800331e:	d101      	bne.n	8003324 <__sfputs_r+0x12>
 8003320:	2000      	movs	r0, #0
 8003322:	e007      	b.n	8003334 <__sfputs_r+0x22>
 8003324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003328:	463a      	mov	r2, r7
 800332a:	4630      	mov	r0, r6
 800332c:	f7ff ffda 	bl	80032e4 <__sfputc_r>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d1f3      	bne.n	800331c <__sfputs_r+0xa>
 8003334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003338 <_vfiprintf_r>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	460d      	mov	r5, r1
 800333e:	b09d      	sub	sp, #116	; 0x74
 8003340:	4614      	mov	r4, r2
 8003342:	4698      	mov	r8, r3
 8003344:	4606      	mov	r6, r0
 8003346:	b118      	cbz	r0, 8003350 <_vfiprintf_r+0x18>
 8003348:	6983      	ldr	r3, [r0, #24]
 800334a:	b90b      	cbnz	r3, 8003350 <_vfiprintf_r+0x18>
 800334c:	f7ff fe96 	bl	800307c <__sinit>
 8003350:	4b89      	ldr	r3, [pc, #548]	; (8003578 <_vfiprintf_r+0x240>)
 8003352:	429d      	cmp	r5, r3
 8003354:	d11b      	bne.n	800338e <_vfiprintf_r+0x56>
 8003356:	6875      	ldr	r5, [r6, #4]
 8003358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800335a:	07d9      	lsls	r1, r3, #31
 800335c:	d405      	bmi.n	800336a <_vfiprintf_r+0x32>
 800335e:	89ab      	ldrh	r3, [r5, #12]
 8003360:	059a      	lsls	r2, r3, #22
 8003362:	d402      	bmi.n	800336a <_vfiprintf_r+0x32>
 8003364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003366:	f7ff ff27 	bl	80031b8 <__retarget_lock_acquire_recursive>
 800336a:	89ab      	ldrh	r3, [r5, #12]
 800336c:	071b      	lsls	r3, r3, #28
 800336e:	d501      	bpl.n	8003374 <_vfiprintf_r+0x3c>
 8003370:	692b      	ldr	r3, [r5, #16]
 8003372:	b9eb      	cbnz	r3, 80033b0 <_vfiprintf_r+0x78>
 8003374:	4629      	mov	r1, r5
 8003376:	4630      	mov	r0, r6
 8003378:	f000 fb5a 	bl	8003a30 <__swsetup_r>
 800337c:	b1c0      	cbz	r0, 80033b0 <_vfiprintf_r+0x78>
 800337e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003380:	07dc      	lsls	r4, r3, #31
 8003382:	d50e      	bpl.n	80033a2 <_vfiprintf_r+0x6a>
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	b01d      	add	sp, #116	; 0x74
 800338a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800338e:	4b7b      	ldr	r3, [pc, #492]	; (800357c <_vfiprintf_r+0x244>)
 8003390:	429d      	cmp	r5, r3
 8003392:	d101      	bne.n	8003398 <_vfiprintf_r+0x60>
 8003394:	68b5      	ldr	r5, [r6, #8]
 8003396:	e7df      	b.n	8003358 <_vfiprintf_r+0x20>
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <_vfiprintf_r+0x248>)
 800339a:	429d      	cmp	r5, r3
 800339c:	bf08      	it	eq
 800339e:	68f5      	ldreq	r5, [r6, #12]
 80033a0:	e7da      	b.n	8003358 <_vfiprintf_r+0x20>
 80033a2:	89ab      	ldrh	r3, [r5, #12]
 80033a4:	0598      	lsls	r0, r3, #22
 80033a6:	d4ed      	bmi.n	8003384 <_vfiprintf_r+0x4c>
 80033a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033aa:	f7ff ff06 	bl	80031ba <__retarget_lock_release_recursive>
 80033ae:	e7e9      	b.n	8003384 <_vfiprintf_r+0x4c>
 80033b0:	2300      	movs	r3, #0
 80033b2:	9309      	str	r3, [sp, #36]	; 0x24
 80033b4:	2320      	movs	r3, #32
 80033b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80033be:	2330      	movs	r3, #48	; 0x30
 80033c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003584 <_vfiprintf_r+0x24c>
 80033c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033c8:	f04f 0901 	mov.w	r9, #1
 80033cc:	4623      	mov	r3, r4
 80033ce:	469a      	mov	sl, r3
 80033d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033d4:	b10a      	cbz	r2, 80033da <_vfiprintf_r+0xa2>
 80033d6:	2a25      	cmp	r2, #37	; 0x25
 80033d8:	d1f9      	bne.n	80033ce <_vfiprintf_r+0x96>
 80033da:	ebba 0b04 	subs.w	fp, sl, r4
 80033de:	d00b      	beq.n	80033f8 <_vfiprintf_r+0xc0>
 80033e0:	465b      	mov	r3, fp
 80033e2:	4622      	mov	r2, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	4630      	mov	r0, r6
 80033e8:	f7ff ff93 	bl	8003312 <__sfputs_r>
 80033ec:	3001      	adds	r0, #1
 80033ee:	f000 80aa 	beq.w	8003546 <_vfiprintf_r+0x20e>
 80033f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033f4:	445a      	add	r2, fp
 80033f6:	9209      	str	r2, [sp, #36]	; 0x24
 80033f8:	f89a 3000 	ldrb.w	r3, [sl]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a2 	beq.w	8003546 <_vfiprintf_r+0x20e>
 8003402:	2300      	movs	r3, #0
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800340c:	f10a 0a01 	add.w	sl, sl, #1
 8003410:	9304      	str	r3, [sp, #16]
 8003412:	9307      	str	r3, [sp, #28]
 8003414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003418:	931a      	str	r3, [sp, #104]	; 0x68
 800341a:	4654      	mov	r4, sl
 800341c:	2205      	movs	r2, #5
 800341e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003422:	4858      	ldr	r0, [pc, #352]	; (8003584 <_vfiprintf_r+0x24c>)
 8003424:	f7fc fed4 	bl	80001d0 <memchr>
 8003428:	9a04      	ldr	r2, [sp, #16]
 800342a:	b9d8      	cbnz	r0, 8003464 <_vfiprintf_r+0x12c>
 800342c:	06d1      	lsls	r1, r2, #27
 800342e:	bf44      	itt	mi
 8003430:	2320      	movmi	r3, #32
 8003432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003436:	0713      	lsls	r3, r2, #28
 8003438:	bf44      	itt	mi
 800343a:	232b      	movmi	r3, #43	; 0x2b
 800343c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003440:	f89a 3000 	ldrb.w	r3, [sl]
 8003444:	2b2a      	cmp	r3, #42	; 0x2a
 8003446:	d015      	beq.n	8003474 <_vfiprintf_r+0x13c>
 8003448:	9a07      	ldr	r2, [sp, #28]
 800344a:	4654      	mov	r4, sl
 800344c:	2000      	movs	r0, #0
 800344e:	f04f 0c0a 	mov.w	ip, #10
 8003452:	4621      	mov	r1, r4
 8003454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003458:	3b30      	subs	r3, #48	; 0x30
 800345a:	2b09      	cmp	r3, #9
 800345c:	d94e      	bls.n	80034fc <_vfiprintf_r+0x1c4>
 800345e:	b1b0      	cbz	r0, 800348e <_vfiprintf_r+0x156>
 8003460:	9207      	str	r2, [sp, #28]
 8003462:	e014      	b.n	800348e <_vfiprintf_r+0x156>
 8003464:	eba0 0308 	sub.w	r3, r0, r8
 8003468:	fa09 f303 	lsl.w	r3, r9, r3
 800346c:	4313      	orrs	r3, r2
 800346e:	9304      	str	r3, [sp, #16]
 8003470:	46a2      	mov	sl, r4
 8003472:	e7d2      	b.n	800341a <_vfiprintf_r+0xe2>
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	1d19      	adds	r1, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9103      	str	r1, [sp, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfbb      	ittet	lt
 8003480:	425b      	neglt	r3, r3
 8003482:	f042 0202 	orrlt.w	r2, r2, #2
 8003486:	9307      	strge	r3, [sp, #28]
 8003488:	9307      	strlt	r3, [sp, #28]
 800348a:	bfb8      	it	lt
 800348c:	9204      	strlt	r2, [sp, #16]
 800348e:	7823      	ldrb	r3, [r4, #0]
 8003490:	2b2e      	cmp	r3, #46	; 0x2e
 8003492:	d10c      	bne.n	80034ae <_vfiprintf_r+0x176>
 8003494:	7863      	ldrb	r3, [r4, #1]
 8003496:	2b2a      	cmp	r3, #42	; 0x2a
 8003498:	d135      	bne.n	8003506 <_vfiprintf_r+0x1ce>
 800349a:	9b03      	ldr	r3, [sp, #12]
 800349c:	1d1a      	adds	r2, r3, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	9203      	str	r2, [sp, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bfb8      	it	lt
 80034a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034aa:	3402      	adds	r4, #2
 80034ac:	9305      	str	r3, [sp, #20]
 80034ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003594 <_vfiprintf_r+0x25c>
 80034b2:	7821      	ldrb	r1, [r4, #0]
 80034b4:	2203      	movs	r2, #3
 80034b6:	4650      	mov	r0, sl
 80034b8:	f7fc fe8a 	bl	80001d0 <memchr>
 80034bc:	b140      	cbz	r0, 80034d0 <_vfiprintf_r+0x198>
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	eba0 000a 	sub.w	r0, r0, sl
 80034c4:	fa03 f000 	lsl.w	r0, r3, r0
 80034c8:	9b04      	ldr	r3, [sp, #16]
 80034ca:	4303      	orrs	r3, r0
 80034cc:	3401      	adds	r4, #1
 80034ce:	9304      	str	r3, [sp, #16]
 80034d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d4:	482c      	ldr	r0, [pc, #176]	; (8003588 <_vfiprintf_r+0x250>)
 80034d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034da:	2206      	movs	r2, #6
 80034dc:	f7fc fe78 	bl	80001d0 <memchr>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d03f      	beq.n	8003564 <_vfiprintf_r+0x22c>
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <_vfiprintf_r+0x254>)
 80034e6:	bb1b      	cbnz	r3, 8003530 <_vfiprintf_r+0x1f8>
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	3307      	adds	r3, #7
 80034ec:	f023 0307 	bic.w	r3, r3, #7
 80034f0:	3308      	adds	r3, #8
 80034f2:	9303      	str	r3, [sp, #12]
 80034f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f6:	443b      	add	r3, r7
 80034f8:	9309      	str	r3, [sp, #36]	; 0x24
 80034fa:	e767      	b.n	80033cc <_vfiprintf_r+0x94>
 80034fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003500:	460c      	mov	r4, r1
 8003502:	2001      	movs	r0, #1
 8003504:	e7a5      	b.n	8003452 <_vfiprintf_r+0x11a>
 8003506:	2300      	movs	r3, #0
 8003508:	3401      	adds	r4, #1
 800350a:	9305      	str	r3, [sp, #20]
 800350c:	4619      	mov	r1, r3
 800350e:	f04f 0c0a 	mov.w	ip, #10
 8003512:	4620      	mov	r0, r4
 8003514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003518:	3a30      	subs	r2, #48	; 0x30
 800351a:	2a09      	cmp	r2, #9
 800351c:	d903      	bls.n	8003526 <_vfiprintf_r+0x1ee>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0c5      	beq.n	80034ae <_vfiprintf_r+0x176>
 8003522:	9105      	str	r1, [sp, #20]
 8003524:	e7c3      	b.n	80034ae <_vfiprintf_r+0x176>
 8003526:	fb0c 2101 	mla	r1, ip, r1, r2
 800352a:	4604      	mov	r4, r0
 800352c:	2301      	movs	r3, #1
 800352e:	e7f0      	b.n	8003512 <_vfiprintf_r+0x1da>
 8003530:	ab03      	add	r3, sp, #12
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	462a      	mov	r2, r5
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <_vfiprintf_r+0x258>)
 8003538:	a904      	add	r1, sp, #16
 800353a:	4630      	mov	r0, r6
 800353c:	f3af 8000 	nop.w
 8003540:	4607      	mov	r7, r0
 8003542:	1c78      	adds	r0, r7, #1
 8003544:	d1d6      	bne.n	80034f4 <_vfiprintf_r+0x1bc>
 8003546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003548:	07d9      	lsls	r1, r3, #31
 800354a:	d405      	bmi.n	8003558 <_vfiprintf_r+0x220>
 800354c:	89ab      	ldrh	r3, [r5, #12]
 800354e:	059a      	lsls	r2, r3, #22
 8003550:	d402      	bmi.n	8003558 <_vfiprintf_r+0x220>
 8003552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003554:	f7ff fe31 	bl	80031ba <__retarget_lock_release_recursive>
 8003558:	89ab      	ldrh	r3, [r5, #12]
 800355a:	065b      	lsls	r3, r3, #25
 800355c:	f53f af12 	bmi.w	8003384 <_vfiprintf_r+0x4c>
 8003560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003562:	e711      	b.n	8003388 <_vfiprintf_r+0x50>
 8003564:	ab03      	add	r3, sp, #12
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	462a      	mov	r2, r5
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <_vfiprintf_r+0x258>)
 800356c:	a904      	add	r1, sp, #16
 800356e:	4630      	mov	r0, r6
 8003570:	f000 f880 	bl	8003674 <_printf_i>
 8003574:	e7e4      	b.n	8003540 <_vfiprintf_r+0x208>
 8003576:	bf00      	nop
 8003578:	08003f4c 	.word	0x08003f4c
 800357c:	08003f6c 	.word	0x08003f6c
 8003580:	08003f2c 	.word	0x08003f2c
 8003584:	08003f8c 	.word	0x08003f8c
 8003588:	08003f96 	.word	0x08003f96
 800358c:	00000000 	.word	0x00000000
 8003590:	08003313 	.word	0x08003313
 8003594:	08003f92 	.word	0x08003f92

08003598 <_printf_common>:
 8003598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800359c:	4616      	mov	r6, r2
 800359e:	4699      	mov	r9, r3
 80035a0:	688a      	ldr	r2, [r1, #8]
 80035a2:	690b      	ldr	r3, [r1, #16]
 80035a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bfb8      	it	lt
 80035ac:	4613      	movlt	r3, r2
 80035ae:	6033      	str	r3, [r6, #0]
 80035b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035b4:	4607      	mov	r7, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	b10a      	cbz	r2, 80035be <_printf_common+0x26>
 80035ba:	3301      	adds	r3, #1
 80035bc:	6033      	str	r3, [r6, #0]
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	0699      	lsls	r1, r3, #26
 80035c2:	bf42      	ittt	mi
 80035c4:	6833      	ldrmi	r3, [r6, #0]
 80035c6:	3302      	addmi	r3, #2
 80035c8:	6033      	strmi	r3, [r6, #0]
 80035ca:	6825      	ldr	r5, [r4, #0]
 80035cc:	f015 0506 	ands.w	r5, r5, #6
 80035d0:	d106      	bne.n	80035e0 <_printf_common+0x48>
 80035d2:	f104 0a19 	add.w	sl, r4, #25
 80035d6:	68e3      	ldr	r3, [r4, #12]
 80035d8:	6832      	ldr	r2, [r6, #0]
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	42ab      	cmp	r3, r5
 80035de:	dc26      	bgt.n	800362e <_printf_common+0x96>
 80035e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035e4:	1e13      	subs	r3, r2, #0
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	bf18      	it	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	0692      	lsls	r2, r2, #26
 80035ee:	d42b      	bmi.n	8003648 <_printf_common+0xb0>
 80035f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f4:	4649      	mov	r1, r9
 80035f6:	4638      	mov	r0, r7
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d01e      	beq.n	800363c <_printf_common+0xa4>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	68e5      	ldr	r5, [r4, #12]
 8003602:	6832      	ldr	r2, [r6, #0]
 8003604:	f003 0306 	and.w	r3, r3, #6
 8003608:	2b04      	cmp	r3, #4
 800360a:	bf08      	it	eq
 800360c:	1aad      	subeq	r5, r5, r2
 800360e:	68a3      	ldr	r3, [r4, #8]
 8003610:	6922      	ldr	r2, [r4, #16]
 8003612:	bf0c      	ite	eq
 8003614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003618:	2500      	movne	r5, #0
 800361a:	4293      	cmp	r3, r2
 800361c:	bfc4      	itt	gt
 800361e:	1a9b      	subgt	r3, r3, r2
 8003620:	18ed      	addgt	r5, r5, r3
 8003622:	2600      	movs	r6, #0
 8003624:	341a      	adds	r4, #26
 8003626:	42b5      	cmp	r5, r6
 8003628:	d11a      	bne.n	8003660 <_printf_common+0xc8>
 800362a:	2000      	movs	r0, #0
 800362c:	e008      	b.n	8003640 <_printf_common+0xa8>
 800362e:	2301      	movs	r3, #1
 8003630:	4652      	mov	r2, sl
 8003632:	4649      	mov	r1, r9
 8003634:	4638      	mov	r0, r7
 8003636:	47c0      	blx	r8
 8003638:	3001      	adds	r0, #1
 800363a:	d103      	bne.n	8003644 <_printf_common+0xac>
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003644:	3501      	adds	r5, #1
 8003646:	e7c6      	b.n	80035d6 <_printf_common+0x3e>
 8003648:	18e1      	adds	r1, r4, r3
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	2030      	movs	r0, #48	; 0x30
 800364e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003652:	4422      	add	r2, r4
 8003654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800365c:	3302      	adds	r3, #2
 800365e:	e7c7      	b.n	80035f0 <_printf_common+0x58>
 8003660:	2301      	movs	r3, #1
 8003662:	4622      	mov	r2, r4
 8003664:	4649      	mov	r1, r9
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	3001      	adds	r0, #1
 800366c:	d0e6      	beq.n	800363c <_printf_common+0xa4>
 800366e:	3601      	adds	r6, #1
 8003670:	e7d9      	b.n	8003626 <_printf_common+0x8e>
	...

08003674 <_printf_i>:
 8003674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003678:	7e0f      	ldrb	r7, [r1, #24]
 800367a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800367c:	2f78      	cmp	r7, #120	; 0x78
 800367e:	4691      	mov	r9, r2
 8003680:	4680      	mov	r8, r0
 8003682:	460c      	mov	r4, r1
 8003684:	469a      	mov	sl, r3
 8003686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800368a:	d807      	bhi.n	800369c <_printf_i+0x28>
 800368c:	2f62      	cmp	r7, #98	; 0x62
 800368e:	d80a      	bhi.n	80036a6 <_printf_i+0x32>
 8003690:	2f00      	cmp	r7, #0
 8003692:	f000 80d8 	beq.w	8003846 <_printf_i+0x1d2>
 8003696:	2f58      	cmp	r7, #88	; 0x58
 8003698:	f000 80a3 	beq.w	80037e2 <_printf_i+0x16e>
 800369c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a4:	e03a      	b.n	800371c <_printf_i+0xa8>
 80036a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036aa:	2b15      	cmp	r3, #21
 80036ac:	d8f6      	bhi.n	800369c <_printf_i+0x28>
 80036ae:	a101      	add	r1, pc, #4	; (adr r1, 80036b4 <_printf_i+0x40>)
 80036b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b4:	0800370d 	.word	0x0800370d
 80036b8:	08003721 	.word	0x08003721
 80036bc:	0800369d 	.word	0x0800369d
 80036c0:	0800369d 	.word	0x0800369d
 80036c4:	0800369d 	.word	0x0800369d
 80036c8:	0800369d 	.word	0x0800369d
 80036cc:	08003721 	.word	0x08003721
 80036d0:	0800369d 	.word	0x0800369d
 80036d4:	0800369d 	.word	0x0800369d
 80036d8:	0800369d 	.word	0x0800369d
 80036dc:	0800369d 	.word	0x0800369d
 80036e0:	0800382d 	.word	0x0800382d
 80036e4:	08003751 	.word	0x08003751
 80036e8:	0800380f 	.word	0x0800380f
 80036ec:	0800369d 	.word	0x0800369d
 80036f0:	0800369d 	.word	0x0800369d
 80036f4:	0800384f 	.word	0x0800384f
 80036f8:	0800369d 	.word	0x0800369d
 80036fc:	08003751 	.word	0x08003751
 8003700:	0800369d 	.word	0x0800369d
 8003704:	0800369d 	.word	0x0800369d
 8003708:	08003817 	.word	0x08003817
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	1d1a      	adds	r2, r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	602a      	str	r2, [r5, #0]
 8003714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800371c:	2301      	movs	r3, #1
 800371e:	e0a3      	b.n	8003868 <_printf_i+0x1f4>
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	6829      	ldr	r1, [r5, #0]
 8003724:	0606      	lsls	r6, r0, #24
 8003726:	f101 0304 	add.w	r3, r1, #4
 800372a:	d50a      	bpl.n	8003742 <_printf_i+0xce>
 800372c:	680e      	ldr	r6, [r1, #0]
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	2e00      	cmp	r6, #0
 8003732:	da03      	bge.n	800373c <_printf_i+0xc8>
 8003734:	232d      	movs	r3, #45	; 0x2d
 8003736:	4276      	negs	r6, r6
 8003738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800373c:	485e      	ldr	r0, [pc, #376]	; (80038b8 <_printf_i+0x244>)
 800373e:	230a      	movs	r3, #10
 8003740:	e019      	b.n	8003776 <_printf_i+0x102>
 8003742:	680e      	ldr	r6, [r1, #0]
 8003744:	602b      	str	r3, [r5, #0]
 8003746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800374a:	bf18      	it	ne
 800374c:	b236      	sxthne	r6, r6
 800374e:	e7ef      	b.n	8003730 <_printf_i+0xbc>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	1d19      	adds	r1, r3, #4
 8003756:	6029      	str	r1, [r5, #0]
 8003758:	0601      	lsls	r1, r0, #24
 800375a:	d501      	bpl.n	8003760 <_printf_i+0xec>
 800375c:	681e      	ldr	r6, [r3, #0]
 800375e:	e002      	b.n	8003766 <_printf_i+0xf2>
 8003760:	0646      	lsls	r6, r0, #25
 8003762:	d5fb      	bpl.n	800375c <_printf_i+0xe8>
 8003764:	881e      	ldrh	r6, [r3, #0]
 8003766:	4854      	ldr	r0, [pc, #336]	; (80038b8 <_printf_i+0x244>)
 8003768:	2f6f      	cmp	r7, #111	; 0x6f
 800376a:	bf0c      	ite	eq
 800376c:	2308      	moveq	r3, #8
 800376e:	230a      	movne	r3, #10
 8003770:	2100      	movs	r1, #0
 8003772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003776:	6865      	ldr	r5, [r4, #4]
 8003778:	60a5      	str	r5, [r4, #8]
 800377a:	2d00      	cmp	r5, #0
 800377c:	bfa2      	ittt	ge
 800377e:	6821      	ldrge	r1, [r4, #0]
 8003780:	f021 0104 	bicge.w	r1, r1, #4
 8003784:	6021      	strge	r1, [r4, #0]
 8003786:	b90e      	cbnz	r6, 800378c <_printf_i+0x118>
 8003788:	2d00      	cmp	r5, #0
 800378a:	d04d      	beq.n	8003828 <_printf_i+0x1b4>
 800378c:	4615      	mov	r5, r2
 800378e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003792:	fb03 6711 	mls	r7, r3, r1, r6
 8003796:	5dc7      	ldrb	r7, [r0, r7]
 8003798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800379c:	4637      	mov	r7, r6
 800379e:	42bb      	cmp	r3, r7
 80037a0:	460e      	mov	r6, r1
 80037a2:	d9f4      	bls.n	800378e <_printf_i+0x11a>
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d10b      	bne.n	80037c0 <_printf_i+0x14c>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	07de      	lsls	r6, r3, #31
 80037ac:	d508      	bpl.n	80037c0 <_printf_i+0x14c>
 80037ae:	6923      	ldr	r3, [r4, #16]
 80037b0:	6861      	ldr	r1, [r4, #4]
 80037b2:	4299      	cmp	r1, r3
 80037b4:	bfde      	ittt	le
 80037b6:	2330      	movle	r3, #48	; 0x30
 80037b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037c0:	1b52      	subs	r2, r2, r5
 80037c2:	6122      	str	r2, [r4, #16]
 80037c4:	f8cd a000 	str.w	sl, [sp]
 80037c8:	464b      	mov	r3, r9
 80037ca:	aa03      	add	r2, sp, #12
 80037cc:	4621      	mov	r1, r4
 80037ce:	4640      	mov	r0, r8
 80037d0:	f7ff fee2 	bl	8003598 <_printf_common>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d14c      	bne.n	8003872 <_printf_i+0x1fe>
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	b004      	add	sp, #16
 80037de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e2:	4835      	ldr	r0, [pc, #212]	; (80038b8 <_printf_i+0x244>)
 80037e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037e8:	6829      	ldr	r1, [r5, #0]
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80037f0:	6029      	str	r1, [r5, #0]
 80037f2:	061d      	lsls	r5, r3, #24
 80037f4:	d514      	bpl.n	8003820 <_printf_i+0x1ac>
 80037f6:	07df      	lsls	r7, r3, #31
 80037f8:	bf44      	itt	mi
 80037fa:	f043 0320 	orrmi.w	r3, r3, #32
 80037fe:	6023      	strmi	r3, [r4, #0]
 8003800:	b91e      	cbnz	r6, 800380a <_printf_i+0x196>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	f023 0320 	bic.w	r3, r3, #32
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	2310      	movs	r3, #16
 800380c:	e7b0      	b.n	8003770 <_printf_i+0xfc>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	2378      	movs	r3, #120	; 0x78
 8003818:	4828      	ldr	r0, [pc, #160]	; (80038bc <_printf_i+0x248>)
 800381a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800381e:	e7e3      	b.n	80037e8 <_printf_i+0x174>
 8003820:	0659      	lsls	r1, r3, #25
 8003822:	bf48      	it	mi
 8003824:	b2b6      	uxthmi	r6, r6
 8003826:	e7e6      	b.n	80037f6 <_printf_i+0x182>
 8003828:	4615      	mov	r5, r2
 800382a:	e7bb      	b.n	80037a4 <_printf_i+0x130>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	6826      	ldr	r6, [r4, #0]
 8003830:	6961      	ldr	r1, [r4, #20]
 8003832:	1d18      	adds	r0, r3, #4
 8003834:	6028      	str	r0, [r5, #0]
 8003836:	0635      	lsls	r5, r6, #24
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	d501      	bpl.n	8003840 <_printf_i+0x1cc>
 800383c:	6019      	str	r1, [r3, #0]
 800383e:	e002      	b.n	8003846 <_printf_i+0x1d2>
 8003840:	0670      	lsls	r0, r6, #25
 8003842:	d5fb      	bpl.n	800383c <_printf_i+0x1c8>
 8003844:	8019      	strh	r1, [r3, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	6123      	str	r3, [r4, #16]
 800384a:	4615      	mov	r5, r2
 800384c:	e7ba      	b.n	80037c4 <_printf_i+0x150>
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	1d1a      	adds	r2, r3, #4
 8003852:	602a      	str	r2, [r5, #0]
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	6862      	ldr	r2, [r4, #4]
 8003858:	2100      	movs	r1, #0
 800385a:	4628      	mov	r0, r5
 800385c:	f7fc fcb8 	bl	80001d0 <memchr>
 8003860:	b108      	cbz	r0, 8003866 <_printf_i+0x1f2>
 8003862:	1b40      	subs	r0, r0, r5
 8003864:	6060      	str	r0, [r4, #4]
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	6123      	str	r3, [r4, #16]
 800386a:	2300      	movs	r3, #0
 800386c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003870:	e7a8      	b.n	80037c4 <_printf_i+0x150>
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	462a      	mov	r2, r5
 8003876:	4649      	mov	r1, r9
 8003878:	4640      	mov	r0, r8
 800387a:	47d0      	blx	sl
 800387c:	3001      	adds	r0, #1
 800387e:	d0ab      	beq.n	80037d8 <_printf_i+0x164>
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	079b      	lsls	r3, r3, #30
 8003884:	d413      	bmi.n	80038ae <_printf_i+0x23a>
 8003886:	68e0      	ldr	r0, [r4, #12]
 8003888:	9b03      	ldr	r3, [sp, #12]
 800388a:	4298      	cmp	r0, r3
 800388c:	bfb8      	it	lt
 800388e:	4618      	movlt	r0, r3
 8003890:	e7a4      	b.n	80037dc <_printf_i+0x168>
 8003892:	2301      	movs	r3, #1
 8003894:	4632      	mov	r2, r6
 8003896:	4649      	mov	r1, r9
 8003898:	4640      	mov	r0, r8
 800389a:	47d0      	blx	sl
 800389c:	3001      	adds	r0, #1
 800389e:	d09b      	beq.n	80037d8 <_printf_i+0x164>
 80038a0:	3501      	adds	r5, #1
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	9903      	ldr	r1, [sp, #12]
 80038a6:	1a5b      	subs	r3, r3, r1
 80038a8:	42ab      	cmp	r3, r5
 80038aa:	dcf2      	bgt.n	8003892 <_printf_i+0x21e>
 80038ac:	e7eb      	b.n	8003886 <_printf_i+0x212>
 80038ae:	2500      	movs	r5, #0
 80038b0:	f104 0619 	add.w	r6, r4, #25
 80038b4:	e7f5      	b.n	80038a2 <_printf_i+0x22e>
 80038b6:	bf00      	nop
 80038b8:	08003f9d 	.word	0x08003f9d
 80038bc:	08003fae 	.word	0x08003fae

080038c0 <_sbrk_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_sbrk_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fc ff56 	bl	800077c <_sbrk>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_sbrk_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_sbrk_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	200000f4 	.word	0x200000f4

080038e0 <__sread>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	460c      	mov	r4, r1
 80038e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e8:	f000 fab2 	bl	8003e50 <_read_r>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	bfab      	itete	ge
 80038f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038f2:	89a3      	ldrhlt	r3, [r4, #12]
 80038f4:	181b      	addge	r3, r3, r0
 80038f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038fa:	bfac      	ite	ge
 80038fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80038fe:	81a3      	strhlt	r3, [r4, #12]
 8003900:	bd10      	pop	{r4, pc}

08003902 <__swrite>:
 8003902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003906:	461f      	mov	r7, r3
 8003908:	898b      	ldrh	r3, [r1, #12]
 800390a:	05db      	lsls	r3, r3, #23
 800390c:	4605      	mov	r5, r0
 800390e:	460c      	mov	r4, r1
 8003910:	4616      	mov	r6, r2
 8003912:	d505      	bpl.n	8003920 <__swrite+0x1e>
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	2302      	movs	r3, #2
 800391a:	2200      	movs	r2, #0
 800391c:	f000 f9c8 	bl	8003cb0 <_lseek_r>
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800392a:	81a3      	strh	r3, [r4, #12]
 800392c:	4632      	mov	r2, r6
 800392e:	463b      	mov	r3, r7
 8003930:	4628      	mov	r0, r5
 8003932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003936:	f000 b869 	b.w	8003a0c <_write_r>

0800393a <__sseek>:
 800393a:	b510      	push	{r4, lr}
 800393c:	460c      	mov	r4, r1
 800393e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003942:	f000 f9b5 	bl	8003cb0 <_lseek_r>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	bf15      	itete	ne
 800394c:	6560      	strne	r0, [r4, #84]	; 0x54
 800394e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003956:	81a3      	strheq	r3, [r4, #12]
 8003958:	bf18      	it	ne
 800395a:	81a3      	strhne	r3, [r4, #12]
 800395c:	bd10      	pop	{r4, pc}

0800395e <__sclose>:
 800395e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003962:	f000 b8d3 	b.w	8003b0c <_close_r>
	...

08003968 <__swbuf_r>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	460e      	mov	r6, r1
 800396c:	4614      	mov	r4, r2
 800396e:	4605      	mov	r5, r0
 8003970:	b118      	cbz	r0, 800397a <__swbuf_r+0x12>
 8003972:	6983      	ldr	r3, [r0, #24]
 8003974:	b90b      	cbnz	r3, 800397a <__swbuf_r+0x12>
 8003976:	f7ff fb81 	bl	800307c <__sinit>
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <__swbuf_r+0x98>)
 800397c:	429c      	cmp	r4, r3
 800397e:	d12b      	bne.n	80039d8 <__swbuf_r+0x70>
 8003980:	686c      	ldr	r4, [r5, #4]
 8003982:	69a3      	ldr	r3, [r4, #24]
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	071a      	lsls	r2, r3, #28
 800398a:	d52f      	bpl.n	80039ec <__swbuf_r+0x84>
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	b36b      	cbz	r3, 80039ec <__swbuf_r+0x84>
 8003990:	6923      	ldr	r3, [r4, #16]
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	1ac0      	subs	r0, r0, r3
 8003996:	6963      	ldr	r3, [r4, #20]
 8003998:	b2f6      	uxtb	r6, r6
 800399a:	4283      	cmp	r3, r0
 800399c:	4637      	mov	r7, r6
 800399e:	dc04      	bgt.n	80039aa <__swbuf_r+0x42>
 80039a0:	4621      	mov	r1, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 f948 	bl	8003c38 <_fflush_r>
 80039a8:	bb30      	cbnz	r0, 80039f8 <__swbuf_r+0x90>
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60a3      	str	r3, [r4, #8]
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	701e      	strb	r6, [r3, #0]
 80039b8:	6963      	ldr	r3, [r4, #20]
 80039ba:	3001      	adds	r0, #1
 80039bc:	4283      	cmp	r3, r0
 80039be:	d004      	beq.n	80039ca <__swbuf_r+0x62>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	07db      	lsls	r3, r3, #31
 80039c4:	d506      	bpl.n	80039d4 <__swbuf_r+0x6c>
 80039c6:	2e0a      	cmp	r6, #10
 80039c8:	d104      	bne.n	80039d4 <__swbuf_r+0x6c>
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	f000 f933 	bl	8003c38 <_fflush_r>
 80039d2:	b988      	cbnz	r0, 80039f8 <__swbuf_r+0x90>
 80039d4:	4638      	mov	r0, r7
 80039d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <__swbuf_r+0x9c>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	d101      	bne.n	80039e2 <__swbuf_r+0x7a>
 80039de:	68ac      	ldr	r4, [r5, #8]
 80039e0:	e7cf      	b.n	8003982 <__swbuf_r+0x1a>
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <__swbuf_r+0xa0>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	bf08      	it	eq
 80039e8:	68ec      	ldreq	r4, [r5, #12]
 80039ea:	e7ca      	b.n	8003982 <__swbuf_r+0x1a>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 f81e 	bl	8003a30 <__swsetup_r>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d0cb      	beq.n	8003990 <__swbuf_r+0x28>
 80039f8:	f04f 37ff 	mov.w	r7, #4294967295
 80039fc:	e7ea      	b.n	80039d4 <__swbuf_r+0x6c>
 80039fe:	bf00      	nop
 8003a00:	08003f4c 	.word	0x08003f4c
 8003a04:	08003f6c 	.word	0x08003f6c
 8003a08:	08003f2c 	.word	0x08003f2c

08003a0c <_write_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4d07      	ldr	r5, [pc, #28]	; (8003a2c <_write_r+0x20>)
 8003a10:	4604      	mov	r4, r0
 8003a12:	4608      	mov	r0, r1
 8003a14:	4611      	mov	r1, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	602a      	str	r2, [r5, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f7fc fc4f 	bl	80002be <_write>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_write_r+0x1e>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_write_r+0x1e>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	200000f4 	.word	0x200000f4

08003a30 <__swsetup_r>:
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <__swsetup_r+0xcc>)
 8003a32:	b570      	push	{r4, r5, r6, lr}
 8003a34:	681d      	ldr	r5, [r3, #0]
 8003a36:	4606      	mov	r6, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	b125      	cbz	r5, 8003a46 <__swsetup_r+0x16>
 8003a3c:	69ab      	ldr	r3, [r5, #24]
 8003a3e:	b913      	cbnz	r3, 8003a46 <__swsetup_r+0x16>
 8003a40:	4628      	mov	r0, r5
 8003a42:	f7ff fb1b 	bl	800307c <__sinit>
 8003a46:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <__swsetup_r+0xd0>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	d10f      	bne.n	8003a6c <__swsetup_r+0x3c>
 8003a4c:	686c      	ldr	r4, [r5, #4]
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a54:	0719      	lsls	r1, r3, #28
 8003a56:	d42c      	bmi.n	8003ab2 <__swsetup_r+0x82>
 8003a58:	06dd      	lsls	r5, r3, #27
 8003a5a:	d411      	bmi.n	8003a80 <__swsetup_r+0x50>
 8003a5c:	2309      	movs	r3, #9
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a64:	81a3      	strh	r3, [r4, #12]
 8003a66:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6a:	e03e      	b.n	8003aea <__swsetup_r+0xba>
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <__swsetup_r+0xd4>)
 8003a6e:	429c      	cmp	r4, r3
 8003a70:	d101      	bne.n	8003a76 <__swsetup_r+0x46>
 8003a72:	68ac      	ldr	r4, [r5, #8]
 8003a74:	e7eb      	b.n	8003a4e <__swsetup_r+0x1e>
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <__swsetup_r+0xd8>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	bf08      	it	eq
 8003a7c:	68ec      	ldreq	r4, [r5, #12]
 8003a7e:	e7e6      	b.n	8003a4e <__swsetup_r+0x1e>
 8003a80:	0758      	lsls	r0, r3, #29
 8003a82:	d512      	bpl.n	8003aaa <__swsetup_r+0x7a>
 8003a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a86:	b141      	cbz	r1, 8003a9a <__swsetup_r+0x6a>
 8003a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a8c:	4299      	cmp	r1, r3
 8003a8e:	d002      	beq.n	8003a96 <__swsetup_r+0x66>
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f991 	bl	8003db8 <_free_r>
 8003a96:	2300      	movs	r3, #0
 8003a98:	6363      	str	r3, [r4, #52]	; 0x34
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f043 0308 	orr.w	r3, r3, #8
 8003ab0:	81a3      	strh	r3, [r4, #12]
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	b94b      	cbnz	r3, 8003aca <__swsetup_r+0x9a>
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d003      	beq.n	8003aca <__swsetup_r+0x9a>
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 f92b 	bl	8003d20 <__smakebuf_r>
 8003aca:	89a0      	ldrh	r0, [r4, #12]
 8003acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ad0:	f010 0301 	ands.w	r3, r0, #1
 8003ad4:	d00a      	beq.n	8003aec <__swsetup_r+0xbc>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60a3      	str	r3, [r4, #8]
 8003ada:	6963      	ldr	r3, [r4, #20]
 8003adc:	425b      	negs	r3, r3
 8003ade:	61a3      	str	r3, [r4, #24]
 8003ae0:	6923      	ldr	r3, [r4, #16]
 8003ae2:	b943      	cbnz	r3, 8003af6 <__swsetup_r+0xc6>
 8003ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ae8:	d1ba      	bne.n	8003a60 <__swsetup_r+0x30>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	0781      	lsls	r1, r0, #30
 8003aee:	bf58      	it	pl
 8003af0:	6963      	ldrpl	r3, [r4, #20]
 8003af2:	60a3      	str	r3, [r4, #8]
 8003af4:	e7f4      	b.n	8003ae0 <__swsetup_r+0xb0>
 8003af6:	2000      	movs	r0, #0
 8003af8:	e7f7      	b.n	8003aea <__swsetup_r+0xba>
 8003afa:	bf00      	nop
 8003afc:	2000000c 	.word	0x2000000c
 8003b00:	08003f4c 	.word	0x08003f4c
 8003b04:	08003f6c 	.word	0x08003f6c
 8003b08:	08003f2c 	.word	0x08003f2c

08003b0c <_close_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d06      	ldr	r5, [pc, #24]	; (8003b28 <_close_r+0x1c>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f7fc fdfb 	bl	8000712 <_close>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_close_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_close_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	200000f4 	.word	0x200000f4

08003b2c <__sflush_r>:
 8003b2c:	898a      	ldrh	r2, [r1, #12]
 8003b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b32:	4605      	mov	r5, r0
 8003b34:	0710      	lsls	r0, r2, #28
 8003b36:	460c      	mov	r4, r1
 8003b38:	d458      	bmi.n	8003bec <__sflush_r+0xc0>
 8003b3a:	684b      	ldr	r3, [r1, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	dc05      	bgt.n	8003b4c <__sflush_r+0x20>
 8003b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dc02      	bgt.n	8003b4c <__sflush_r+0x20>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b4e:	2e00      	cmp	r6, #0
 8003b50:	d0f9      	beq.n	8003b46 <__sflush_r+0x1a>
 8003b52:	2300      	movs	r3, #0
 8003b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b58:	682f      	ldr	r7, [r5, #0]
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	d032      	beq.n	8003bc4 <__sflush_r+0x98>
 8003b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	075a      	lsls	r2, r3, #29
 8003b64:	d505      	bpl.n	8003b72 <__sflush_r+0x46>
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	1ac0      	subs	r0, r0, r3
 8003b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b6c:	b10b      	cbz	r3, 8003b72 <__sflush_r+0x46>
 8003b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b70:	1ac0      	subs	r0, r0, r3
 8003b72:	2300      	movs	r3, #0
 8003b74:	4602      	mov	r2, r0
 8003b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b78:	6a21      	ldr	r1, [r4, #32]
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	47b0      	blx	r6
 8003b7e:	1c43      	adds	r3, r0, #1
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	d106      	bne.n	8003b92 <__sflush_r+0x66>
 8003b84:	6829      	ldr	r1, [r5, #0]
 8003b86:	291d      	cmp	r1, #29
 8003b88:	d82c      	bhi.n	8003be4 <__sflush_r+0xb8>
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	; (8003c34 <__sflush_r+0x108>)
 8003b8c:	40ca      	lsrs	r2, r1
 8003b8e:	07d6      	lsls	r6, r2, #31
 8003b90:	d528      	bpl.n	8003be4 <__sflush_r+0xb8>
 8003b92:	2200      	movs	r2, #0
 8003b94:	6062      	str	r2, [r4, #4]
 8003b96:	04d9      	lsls	r1, r3, #19
 8003b98:	6922      	ldr	r2, [r4, #16]
 8003b9a:	6022      	str	r2, [r4, #0]
 8003b9c:	d504      	bpl.n	8003ba8 <__sflush_r+0x7c>
 8003b9e:	1c42      	adds	r2, r0, #1
 8003ba0:	d101      	bne.n	8003ba6 <__sflush_r+0x7a>
 8003ba2:	682b      	ldr	r3, [r5, #0]
 8003ba4:	b903      	cbnz	r3, 8003ba8 <__sflush_r+0x7c>
 8003ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003baa:	602f      	str	r7, [r5, #0]
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d0ca      	beq.n	8003b46 <__sflush_r+0x1a>
 8003bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	d002      	beq.n	8003bbe <__sflush_r+0x92>
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 f8fd 	bl	8003db8 <_free_r>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8003bc2:	e7c1      	b.n	8003b48 <__sflush_r+0x1c>
 8003bc4:	6a21      	ldr	r1, [r4, #32]
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4628      	mov	r0, r5
 8003bca:	47b0      	blx	r6
 8003bcc:	1c41      	adds	r1, r0, #1
 8003bce:	d1c7      	bne.n	8003b60 <__sflush_r+0x34>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0c4      	beq.n	8003b60 <__sflush_r+0x34>
 8003bd6:	2b1d      	cmp	r3, #29
 8003bd8:	d001      	beq.n	8003bde <__sflush_r+0xb2>
 8003bda:	2b16      	cmp	r3, #22
 8003bdc:	d101      	bne.n	8003be2 <__sflush_r+0xb6>
 8003bde:	602f      	str	r7, [r5, #0]
 8003be0:	e7b1      	b.n	8003b46 <__sflush_r+0x1a>
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	e7ad      	b.n	8003b48 <__sflush_r+0x1c>
 8003bec:	690f      	ldr	r7, [r1, #16]
 8003bee:	2f00      	cmp	r7, #0
 8003bf0:	d0a9      	beq.n	8003b46 <__sflush_r+0x1a>
 8003bf2:	0793      	lsls	r3, r2, #30
 8003bf4:	680e      	ldr	r6, [r1, #0]
 8003bf6:	bf08      	it	eq
 8003bf8:	694b      	ldreq	r3, [r1, #20]
 8003bfa:	600f      	str	r7, [r1, #0]
 8003bfc:	bf18      	it	ne
 8003bfe:	2300      	movne	r3, #0
 8003c00:	eba6 0807 	sub.w	r8, r6, r7
 8003c04:	608b      	str	r3, [r1, #8]
 8003c06:	f1b8 0f00 	cmp.w	r8, #0
 8003c0a:	dd9c      	ble.n	8003b46 <__sflush_r+0x1a>
 8003c0c:	6a21      	ldr	r1, [r4, #32]
 8003c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c10:	4643      	mov	r3, r8
 8003c12:	463a      	mov	r2, r7
 8003c14:	4628      	mov	r0, r5
 8003c16:	47b0      	blx	r6
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	dc06      	bgt.n	8003c2a <__sflush_r+0xfe>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	e78e      	b.n	8003b48 <__sflush_r+0x1c>
 8003c2a:	4407      	add	r7, r0
 8003c2c:	eba8 0800 	sub.w	r8, r8, r0
 8003c30:	e7e9      	b.n	8003c06 <__sflush_r+0xda>
 8003c32:	bf00      	nop
 8003c34:	20400001 	.word	0x20400001

08003c38 <_fflush_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	690b      	ldr	r3, [r1, #16]
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	b913      	cbnz	r3, 8003c48 <_fflush_r+0x10>
 8003c42:	2500      	movs	r5, #0
 8003c44:	4628      	mov	r0, r5
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
 8003c48:	b118      	cbz	r0, 8003c52 <_fflush_r+0x1a>
 8003c4a:	6983      	ldr	r3, [r0, #24]
 8003c4c:	b90b      	cbnz	r3, 8003c52 <_fflush_r+0x1a>
 8003c4e:	f7ff fa15 	bl	800307c <__sinit>
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <_fflush_r+0x6c>)
 8003c54:	429c      	cmp	r4, r3
 8003c56:	d11b      	bne.n	8003c90 <_fflush_r+0x58>
 8003c58:	686c      	ldr	r4, [r5, #4]
 8003c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ef      	beq.n	8003c42 <_fflush_r+0xa>
 8003c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c64:	07d0      	lsls	r0, r2, #31
 8003c66:	d404      	bmi.n	8003c72 <_fflush_r+0x3a>
 8003c68:	0599      	lsls	r1, r3, #22
 8003c6a:	d402      	bmi.n	8003c72 <_fflush_r+0x3a>
 8003c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c6e:	f7ff faa3 	bl	80031b8 <__retarget_lock_acquire_recursive>
 8003c72:	4628      	mov	r0, r5
 8003c74:	4621      	mov	r1, r4
 8003c76:	f7ff ff59 	bl	8003b2c <__sflush_r>
 8003c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c7c:	07da      	lsls	r2, r3, #31
 8003c7e:	4605      	mov	r5, r0
 8003c80:	d4e0      	bmi.n	8003c44 <_fflush_r+0xc>
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	059b      	lsls	r3, r3, #22
 8003c86:	d4dd      	bmi.n	8003c44 <_fflush_r+0xc>
 8003c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8a:	f7ff fa96 	bl	80031ba <__retarget_lock_release_recursive>
 8003c8e:	e7d9      	b.n	8003c44 <_fflush_r+0xc>
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <_fflush_r+0x70>)
 8003c92:	429c      	cmp	r4, r3
 8003c94:	d101      	bne.n	8003c9a <_fflush_r+0x62>
 8003c96:	68ac      	ldr	r4, [r5, #8]
 8003c98:	e7df      	b.n	8003c5a <_fflush_r+0x22>
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <_fflush_r+0x74>)
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	bf08      	it	eq
 8003ca0:	68ec      	ldreq	r4, [r5, #12]
 8003ca2:	e7da      	b.n	8003c5a <_fflush_r+0x22>
 8003ca4:	08003f4c 	.word	0x08003f4c
 8003ca8:	08003f6c 	.word	0x08003f6c
 8003cac:	08003f2c 	.word	0x08003f2c

08003cb0 <_lseek_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	; (8003cd0 <_lseek_r+0x20>)
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4611      	mov	r1, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fc fd4e 	bl	8000760 <_lseek>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_lseek_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_lseek_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200000f4 	.word	0x200000f4

08003cd4 <__swhatbuf_r>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	460e      	mov	r6, r1
 8003cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	b096      	sub	sp, #88	; 0x58
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	da08      	bge.n	8003cf8 <__swhatbuf_r+0x24>
 8003ce6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	061a      	lsls	r2, r3, #24
 8003cf0:	d410      	bmi.n	8003d14 <__swhatbuf_r+0x40>
 8003cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf6:	e00e      	b.n	8003d16 <__swhatbuf_r+0x42>
 8003cf8:	466a      	mov	r2, sp
 8003cfa:	f000 f8bb 	bl	8003e74 <_fstat_r>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	dbf1      	blt.n	8003ce6 <__swhatbuf_r+0x12>
 8003d02:	9a01      	ldr	r2, [sp, #4]
 8003d04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d0c:	425a      	negs	r2, r3
 8003d0e:	415a      	adcs	r2, r3
 8003d10:	602a      	str	r2, [r5, #0]
 8003d12:	e7ee      	b.n	8003cf2 <__swhatbuf_r+0x1e>
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	2000      	movs	r0, #0
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	b016      	add	sp, #88	; 0x58
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d20 <__smakebuf_r>:
 8003d20:	898b      	ldrh	r3, [r1, #12]
 8003d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d24:	079d      	lsls	r5, r3, #30
 8003d26:	4606      	mov	r6, r0
 8003d28:	460c      	mov	r4, r1
 8003d2a:	d507      	bpl.n	8003d3c <__smakebuf_r+0x1c>
 8003d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	2301      	movs	r3, #1
 8003d36:	6163      	str	r3, [r4, #20]
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	ab01      	add	r3, sp, #4
 8003d3e:	466a      	mov	r2, sp
 8003d40:	f7ff ffc8 	bl	8003cd4 <__swhatbuf_r>
 8003d44:	9900      	ldr	r1, [sp, #0]
 8003d46:	4605      	mov	r5, r0
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff fa57 	bl	80031fc <_malloc_r>
 8003d4e:	b948      	cbnz	r0, 8003d64 <__smakebuf_r+0x44>
 8003d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d54:	059a      	lsls	r2, r3, #22
 8003d56:	d4ef      	bmi.n	8003d38 <__smakebuf_r+0x18>
 8003d58:	f023 0303 	bic.w	r3, r3, #3
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	81a3      	strh	r3, [r4, #12]
 8003d62:	e7e3      	b.n	8003d2c <__smakebuf_r+0xc>
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <__smakebuf_r+0x7c>)
 8003d66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	6020      	str	r0, [r4, #0]
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	9b00      	ldr	r3, [sp, #0]
 8003d74:	6163      	str	r3, [r4, #20]
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	6120      	str	r0, [r4, #16]
 8003d7a:	b15b      	cbz	r3, 8003d94 <__smakebuf_r+0x74>
 8003d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f889 	bl	8003e98 <_isatty_r>
 8003d86:	b128      	cbz	r0, 8003d94 <__smakebuf_r+0x74>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	89a0      	ldrh	r0, [r4, #12]
 8003d96:	4305      	orrs	r5, r0
 8003d98:	81a5      	strh	r5, [r4, #12]
 8003d9a:	e7cd      	b.n	8003d38 <__smakebuf_r+0x18>
 8003d9c:	08003015 	.word	0x08003015

08003da0 <__malloc_lock>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__malloc_lock+0x8>)
 8003da2:	f7ff ba09 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 8003da6:	bf00      	nop
 8003da8:	200000e8 	.word	0x200000e8

08003dac <__malloc_unlock>:
 8003dac:	4801      	ldr	r0, [pc, #4]	; (8003db4 <__malloc_unlock+0x8>)
 8003dae:	f7ff ba04 	b.w	80031ba <__retarget_lock_release_recursive>
 8003db2:	bf00      	nop
 8003db4:	200000e8 	.word	0x200000e8

08003db8 <_free_r>:
 8003db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dba:	2900      	cmp	r1, #0
 8003dbc:	d044      	beq.n	8003e48 <_free_r+0x90>
 8003dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc2:	9001      	str	r0, [sp, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8003dca:	bfb8      	it	lt
 8003dcc:	18e4      	addlt	r4, r4, r3
 8003dce:	f7ff ffe7 	bl	8003da0 <__malloc_lock>
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <_free_r+0x94>)
 8003dd4:	9801      	ldr	r0, [sp, #4]
 8003dd6:	6813      	ldr	r3, [r2, #0]
 8003dd8:	b933      	cbnz	r3, 8003de8 <_free_r+0x30>
 8003dda:	6063      	str	r3, [r4, #4]
 8003ddc:	6014      	str	r4, [r2, #0]
 8003dde:	b003      	add	sp, #12
 8003de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003de4:	f7ff bfe2 	b.w	8003dac <__malloc_unlock>
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d908      	bls.n	8003dfe <_free_r+0x46>
 8003dec:	6825      	ldr	r5, [r4, #0]
 8003dee:	1961      	adds	r1, r4, r5
 8003df0:	428b      	cmp	r3, r1
 8003df2:	bf01      	itttt	eq
 8003df4:	6819      	ldreq	r1, [r3, #0]
 8003df6:	685b      	ldreq	r3, [r3, #4]
 8003df8:	1949      	addeq	r1, r1, r5
 8003dfa:	6021      	streq	r1, [r4, #0]
 8003dfc:	e7ed      	b.n	8003dda <_free_r+0x22>
 8003dfe:	461a      	mov	r2, r3
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b10b      	cbz	r3, 8003e08 <_free_r+0x50>
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d9fa      	bls.n	8003dfe <_free_r+0x46>
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	1855      	adds	r5, r2, r1
 8003e0c:	42a5      	cmp	r5, r4
 8003e0e:	d10b      	bne.n	8003e28 <_free_r+0x70>
 8003e10:	6824      	ldr	r4, [r4, #0]
 8003e12:	4421      	add	r1, r4
 8003e14:	1854      	adds	r4, r2, r1
 8003e16:	42a3      	cmp	r3, r4
 8003e18:	6011      	str	r1, [r2, #0]
 8003e1a:	d1e0      	bne.n	8003dde <_free_r+0x26>
 8003e1c:	681c      	ldr	r4, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	6053      	str	r3, [r2, #4]
 8003e22:	4421      	add	r1, r4
 8003e24:	6011      	str	r1, [r2, #0]
 8003e26:	e7da      	b.n	8003dde <_free_r+0x26>
 8003e28:	d902      	bls.n	8003e30 <_free_r+0x78>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	6003      	str	r3, [r0, #0]
 8003e2e:	e7d6      	b.n	8003dde <_free_r+0x26>
 8003e30:	6825      	ldr	r5, [r4, #0]
 8003e32:	1961      	adds	r1, r4, r5
 8003e34:	428b      	cmp	r3, r1
 8003e36:	bf04      	itt	eq
 8003e38:	6819      	ldreq	r1, [r3, #0]
 8003e3a:	685b      	ldreq	r3, [r3, #4]
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	bf04      	itt	eq
 8003e40:	1949      	addeq	r1, r1, r5
 8003e42:	6021      	streq	r1, [r4, #0]
 8003e44:	6054      	str	r4, [r2, #4]
 8003e46:	e7ca      	b.n	8003dde <_free_r+0x26>
 8003e48:	b003      	add	sp, #12
 8003e4a:	bd30      	pop	{r4, r5, pc}
 8003e4c:	200000ec 	.word	0x200000ec

08003e50 <_read_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4d07      	ldr	r5, [pc, #28]	; (8003e70 <_read_r+0x20>)
 8003e54:	4604      	mov	r4, r0
 8003e56:	4608      	mov	r0, r1
 8003e58:	4611      	mov	r1, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	602a      	str	r2, [r5, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7fc fc3a 	bl	80006d8 <_read>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_read_r+0x1e>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_read_r+0x1e>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	200000f4 	.word	0x200000f4

08003e74 <_fstat_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d07      	ldr	r5, [pc, #28]	; (8003e94 <_fstat_r+0x20>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	f7fc fc52 	bl	800072a <_fstat>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d102      	bne.n	8003e90 <_fstat_r+0x1c>
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	b103      	cbz	r3, 8003e90 <_fstat_r+0x1c>
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	bd38      	pop	{r3, r4, r5, pc}
 8003e92:	bf00      	nop
 8003e94:	200000f4 	.word	0x200000f4

08003e98 <_isatty_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4d06      	ldr	r5, [pc, #24]	; (8003eb4 <_isatty_r+0x1c>)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7fc fc51 	bl	800074a <_isatty>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_isatty_r+0x1a>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_isatty_r+0x1a>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	200000f4 	.word	0x200000f4

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
