
spi_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003130  08003130  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003130  08003130  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003130  08003130  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  080031a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080031a8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075a6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e9  00000000  00000000  00027646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00028c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00029480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002600f  00000000  00000000  00029c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000880c  00000000  00000000  0004fc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5913  00000000  00000000  00058423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dd36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  0013dd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003038 	.word	0x08003038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003038 	.word	0x08003038

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fa4d 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f82d 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8bb 	bl	80003f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000282:	f000 f87b 	bl	800037c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t pTxData = 1;
 8000286:	2301      	movs	r3, #1
 8000288:	707b      	strb	r3, [r7, #1]

  uint16_t size =1;
 800028a:	2301      	movs	r3, #1
 800028c:	807b      	strh	r3, [r7, #2]
  int count =0;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_SPI_Transmit(&hspi1, &pTxData, size, 100);
 8000292:	887a      	ldrh	r2, [r7, #2]
 8000294:	1c79      	adds	r1, r7, #1
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <main+0x60>)
 800029a:	f001 fc3a 	bl	8001b12 <HAL_SPI_Transmit>
	  if(count ==0 )
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d108      	bne.n	80002b6 <main+0x46>
	  {
		  pTxData =0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	707b      	strb	r3, [r7, #1]
		  HAL_Delay(500);
 80002a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ac:	f000 faae 	bl	800080c <HAL_Delay>
		  count =1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	e007      	b.n	80002c6 <main+0x56>
	  }
	  else
	  {
		  count =0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
		  pTxData=1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	707b      	strb	r3, [r7, #1]
		  HAL_Delay(500);
 80002be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c2:	f000 faa3 	bl	800080c <HAL_Delay>
	  }		//  HAL_Delay(1000);
	  printf("this my");
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x64>)
 80002c8:	f001 ff28 	bl	800211c <iprintf>
	  HAL_SPI_Transmit(&hspi1, &pTxData, size, 100);
 80002cc:	e7e1      	b.n	8000292 <main+0x22>
 80002ce:	bf00      	nop
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	08003050 	.word	0x08003050

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	; 0x58
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2244      	movs	r2, #68	; 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 ff10 	bl	800210c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002fe:	f000 fd47 	bl	8000d90 <HAL_PWREx_ControlVoltageScaling>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000308:	f000 f88e 	bl	8000428 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030c:	2302      	movs	r3, #2
 800030e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	2302      	movs	r3, #2
 8000320:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000322:	2301      	movs	r3, #1
 8000324:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000326:	230a      	movs	r3, #10
 8000328:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800032a:	2307      	movs	r3, #7
 800032c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800032e:	2302      	movs	r3, #2
 8000330:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000332:	2302      	movs	r3, #2
 8000334:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fd7e 	bl	8000e3c <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000346:	f000 f86f 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2303      	movs	r3, #3
 8000350:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800035e:	463b      	mov	r3, r7
 8000360:	2104      	movs	r1, #4
 8000362:	4618      	mov	r0, r3
 8000364:	f001 f946 	bl	80015f4 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800036e:	f000 f85b 	bl	8000428 <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3758      	adds	r7, #88	; 0x58
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_SPI1_Init+0x74>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <MX_SPI1_Init+0x78>)
 8000384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_SPI1_Init+0x74>)
 8000388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800038c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_SPI1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_SPI1_Init+0x74>)
 8000396:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800039a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003ca:	2207      	movs	r2, #7
 80003cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003d6:	2208      	movs	r2, #8
 80003d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_SPI1_Init+0x74>)
 80003dc:	f001 faf6 	bl	80019cc <HAL_SPI_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003e6:	f000 f81f 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	40013000 	.word	0x40013000

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_GPIO_Init+0x2c>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a08      	ldr	r2, [pc, #32]	; (8000424 <MX_GPIO_Init+0x2c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_GPIO_Init+0x2c>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x44>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x44>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6613      	str	r3, [r2, #96]	; 0x60
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x44>)
 8000448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <HAL_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <HAL_MspInit+0x44>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	6593      	str	r3, [r2, #88]	; 0x58
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_MspInit+0x44>)
 8000460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <HAL_SPI_MspInit+0x7c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d128      	bne.n	80004f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <HAL_SPI_MspInit+0x80>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a2:	4a16      	ldr	r2, [pc, #88]	; (80004fc <HAL_SPI_MspInit+0x80>)
 80004a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004a8:	6613      	str	r3, [r2, #96]	; 0x60
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_SPI_MspInit+0x80>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <HAL_SPI_MspInit+0x80>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <HAL_SPI_MspInit+0x80>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_SPI_MspInit+0x80>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004ce:	23f0      	movs	r3, #240	; 0xf0
 80004d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004de:	2305      	movs	r3, #5
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ec:	f000 fa98 	bl	8000a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	; 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013000 	.word	0x40013000
 80004fc:	40021000 	.word	0x40021000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <NMI_Handler+0x4>

08000506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <MemManage_Handler+0x4>

08000512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <UsageFault_Handler+0x4>

0800051e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f93e 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e00a      	b.n	800057c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000566:	f3af 8000 	nop.w
 800056a:	4601      	mov	r1, r0
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60ba      	str	r2, [r7, #8]
 8000572:	b2ca      	uxtb	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf0      	blt.n	8000566 <_read+0x12>
  }

  return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e009      	b.n	80005b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	60ba      	str	r2, [r7, #8]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	3301      	adds	r3, #1
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	dbf1      	blt.n	80005a0 <_write+0x12>
  }
  return len;
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <_close>:

int _close(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ee:	605a      	str	r2, [r3, #4]
  return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_isatty>:

int _isatty(int file)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <_sbrk+0x5c>)
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <_sbrk+0x60>)
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_sbrk+0x64>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <_sbrk+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d207      	bcs.n	8000670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000660:	f001 fd2a 	bl	80020b8 <__errno>
 8000664:	4603      	mov	r3, r0
 8000666:	220c      	movs	r2, #12
 8000668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e009      	b.n	8000684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <_sbrk+0x64>)
 8000680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20018000 	.word	0x20018000
 8000690:	00000400 	.word	0x00000400
 8000694:	200000f0 	.word	0x200000f0
 8000698:	20000108 	.word	0x20000108

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <SystemInit+0x20>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <SystemInit+0x20>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c4:	f7ff ffea 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ee:	f001 fce9 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f2:	f7ff fdbd 	bl	8000270 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000704:	08003138 	.word	0x08003138
  ldr r2, =_sbss
 8000708:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800070c:	20000108 	.word	0x20000108

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_Init+0x3c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <HAL_Init+0x3c>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072a:	2003      	movs	r0, #3
 800072c:	f000 f944 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f80f 	bl	8000754 <HAL_InitTick>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	e001      	b.n	8000746 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000742:	f7ff fe77 	bl	8000434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000746:	79fb      	ldrb	r3, [r7, #7]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40022000 	.word	0x40022000

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_InitTick+0x6c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d023      	beq.n	80007b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <HAL_InitTick+0x70>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_InitTick+0x6c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f941 	bl	8000a06 <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10f      	bne.n	80007aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d809      	bhi.n	80007a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f000 f919 	bl	80009ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_InitTick+0x74>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e007      	b.n	80007b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e004      	b.n	80007b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e001      	b.n	80007b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_IncTick+0x20>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x24>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_IncTick+0x24>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	200000f4 	.word	0x200000f4

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HAL_GetTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	200000f4 	.word	0x200000f4

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff ffee 	bl	80007f4 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Delay+0x44>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4413      	add	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000832:	bf00      	nop
 8000834:	f7ff ffde 	bl	80007f4 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f7ff ff8e 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff47 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff5c 	bl	800089c <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff8e 	bl	800090c <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5d 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffb0 	bl	8000974 <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e17f      	b.n	8000d30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8171 	beq.w	8000d2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d005      	beq.n	8000a60 <HAL_GPIO_Init+0x40>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	f003 0201 	and.w	r2, r3, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d118      	bne.n	8000b00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	f003 0201 	and.w	r2, r3, #1
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d017      	beq.n	8000b3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d123      	bne.n	8000b90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	220f      	movs	r2, #15
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	691a      	ldr	r2, [r3, #16]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	08da      	lsrs	r2, r3, #3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3208      	adds	r2, #8
 8000b8a:	6939      	ldr	r1, [r7, #16]
 8000b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0203 	and.w	r2, r3, #3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f000 80ac 	beq.w	8000d2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <HAL_GPIO_Init+0x330>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	4a5e      	ldr	r2, [pc, #376]	; (8000d50 <HAL_GPIO_Init+0x330>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bde:	4b5c      	ldr	r3, [pc, #368]	; (8000d50 <HAL_GPIO_Init+0x330>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bea:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <HAL_GPIO_Init+0x334>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c14:	d025      	beq.n	8000c62 <HAL_GPIO_Init+0x242>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4f      	ldr	r2, [pc, #316]	; (8000d58 <HAL_GPIO_Init+0x338>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01f      	beq.n	8000c5e <HAL_GPIO_Init+0x23e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4e      	ldr	r2, [pc, #312]	; (8000d5c <HAL_GPIO_Init+0x33c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d019      	beq.n	8000c5a <HAL_GPIO_Init+0x23a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a4d      	ldr	r2, [pc, #308]	; (8000d60 <HAL_GPIO_Init+0x340>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d013      	beq.n	8000c56 <HAL_GPIO_Init+0x236>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <HAL_GPIO_Init+0x344>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00d      	beq.n	8000c52 <HAL_GPIO_Init+0x232>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <HAL_GPIO_Init+0x348>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d007      	beq.n	8000c4e <HAL_GPIO_Init+0x22e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a4a      	ldr	r2, [pc, #296]	; (8000d6c <HAL_GPIO_Init+0x34c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_GPIO_Init+0x22a>
 8000c46:	2306      	movs	r3, #6
 8000c48:	e00c      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	e00a      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c4e:	2305      	movs	r3, #5
 8000c50:	e008      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c52:	2304      	movs	r3, #4
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c56:	2303      	movs	r3, #3
 8000c58:	e004      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x244>
 8000c62:	2300      	movs	r3, #0
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	f002 0203 	and.w	r2, r2, #3
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c74:	4937      	ldr	r1, [pc, #220]	; (8000d54 <HAL_GPIO_Init+0x334>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca6:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cd0:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f47f ae78 	bne.w	8000a30 <HAL_GPIO_Init+0x10>
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	371c      	adds	r7, #28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	48000c00 	.word	0x48000c00
 8000d64:	48001000 	.word	0x48001000
 8000d68:	48001400 	.word	0x48001400
 8000d6c:	48001800 	.word	0x48001800
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40007000 	.word	0x40007000

08000d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9e:	d130      	bne.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dac:	d038      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2232      	movs	r2, #50	; 0x32
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	0c9b      	lsrs	r3, r3, #18
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd4:	e002      	b.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de8:	d102      	bne.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfc:	d110      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e00f      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0e:	d007      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40007000 	.word	0x40007000
 8000e34:	20000000 	.word	0x20000000
 8000e38:	431bde83 	.word	0x431bde83

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e3ca      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4e:	4b97      	ldr	r3, [pc, #604]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e58:	4b94      	ldr	r3, [pc, #592]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80e4 	beq.w	8001038 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_RCC_OscConfig+0x4a>
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b0c      	cmp	r3, #12
 8000e7a:	f040 808b 	bne.w	8000f94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f040 8087 	bne.w	8000f94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	4b89      	ldr	r3, [pc, #548]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_RCC_OscConfig+0x62>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e3a2      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	4b82      	ldr	r3, [pc, #520]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x7c>
 8000eae:	4b7f      	ldr	r3, [pc, #508]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb6:	e005      	b.n	8000ec4 <HAL_RCC_OscConfig+0x88>
 8000eb8:	4b7c      	ldr	r3, [pc, #496]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d223      	bcs.n	8000f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fd1d 	bl	800190c <RCC_SetFlashLatencyFromMSIRange>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e383      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000edc:	4b73      	ldr	r3, [pc, #460]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a72      	ldr	r2, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b70      	ldr	r3, [pc, #448]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	496d      	ldr	r1, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	4968      	ldr	r1, [pc, #416]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
 8000f0e:	e025      	b.n	8000f5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f10:	4b66      	ldr	r3, [pc, #408]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a65      	ldr	r2, [pc, #404]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b63      	ldr	r3, [pc, #396]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4960      	ldr	r1, [pc, #384]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	495b      	ldr	r1, [pc, #364]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fcdd 	bl	800190c <RCC_SetFlashLatencyFromMSIRange>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e343      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f5c:	f000 fc4a 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b52      	ldr	r3, [pc, #328]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	4950      	ldr	r1, [pc, #320]	; (80010b0 <HAL_RCC_OscConfig+0x274>)
 8000f6e:	5ccb      	ldrb	r3, [r1, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_RCC_OscConfig+0x278>)
 8000f7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f7c:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <HAL_RCC_OscConfig+0x27c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbe7 	bl	8000754 <HAL_InitTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d052      	beq.n	8001036 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	e327      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d032      	beq.n	8001002 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f9c:	4b43      	ldr	r3, [pc, #268]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a42      	ldr	r2, [pc, #264]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc24 	bl	80007f4 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc20 	bl	80007f4 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e310      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fce:	4b37      	ldr	r3, [pc, #220]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4931      	ldr	r1, [pc, #196]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	492c      	ldr	r1, [pc, #176]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
 8001000:	e01a      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800100e:	f7ff fbf1 	bl	80007f4 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001016:	f7ff fbed 	bl	80007f4 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e2dd      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x1da>
 8001034:	e000      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001036:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d074      	beq.n	800112e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b08      	cmp	r3, #8
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x21a>
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d10e      	bne.n	800106e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d064      	beq.n	800112c <HAL_RCC_OscConfig+0x2f0>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d160      	bne.n	800112c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e2ba      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x24a>
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e026      	b.n	80010d4 <HAL_RCC_OscConfig+0x298>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108e:	d115      	bne.n	80010bc <HAL_RCC_OscConfig+0x280>
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8001096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a02      	ldr	r2, [pc, #8]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e014      	b.n	80010d4 <HAL_RCC_OscConfig+0x298>
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	08003058 	.word	0x08003058
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000004 	.word	0x20000004
 80010bc:	4ba0      	ldr	r3, [pc, #640]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a9f      	ldr	r2, [pc, #636]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80010c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b9d      	ldr	r3, [pc, #628]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a9c      	ldr	r2, [pc, #624]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80010ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fb8a 	bl	80007f4 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fb86 	bl	80007f4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e276      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2a8>
 8001102:	e014      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fb76 	bl	80007f4 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fb72 	bl	80007f4 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e262      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x2d0>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d060      	beq.n	80011fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x310>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	d119      	bne.n	800117a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d116      	bne.n	800117a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	4b7c      	ldr	r3, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x328>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e23f      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	4973      	ldr	r1, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001178:	e040      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d023      	beq.n	80011ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fb31 	bl	80007f4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fb2d 	bl	80007f4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e21d      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	495f      	ldr	r1, [pc, #380]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e018      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b5d      	ldr	r3, [pc, #372]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a5c      	ldr	r2, [pc, #368]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80011d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fb0d 	bl	80007f4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fb09 	bl	80007f4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1f9      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d03c      	beq.n	8001282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01c      	beq.n	800124a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fae8 	bl	80007f4 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fae4 	bl	80007f4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1d4      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 800123c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ef      	beq.n	8001228 <HAL_RCC_OscConfig+0x3ec>
 8001248:	e01b      	b.n	8001282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 800124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001250:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125a:	f7ff facb 	bl	80007f4 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fac7 	bl	80007f4 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e1b7      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1ef      	bne.n	8001262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80a6 	beq.w	80013dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10d      	bne.n	80012bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6593      	str	r3, [r2, #88]	; 0x58
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_RCC_OscConfig+0x508>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d118      	bne.n	80012fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_RCC_OscConfig+0x508>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_RCC_OscConfig+0x508>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fa8e 	bl	80007f4 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012dc:	f7ff fa8a 	bl	80007f4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e17a      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x508>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_RCC_OscConfig+0x4d8>
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001312:	e029      	b.n	8001368 <HAL_RCC_OscConfig+0x52c>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d115      	bne.n	8001348 <HAL_RCC_OscConfig+0x50c>
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_RCC_OscConfig+0x504>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133c:	e014      	b.n	8001368 <HAL_RCC_OscConfig+0x52c>
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	4b9c      	ldr	r3, [pc, #624]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	4a9b      	ldr	r2, [pc, #620]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001358:	4b98      	ldr	r3, [pc, #608]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	4a97      	ldr	r2, [pc, #604]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d016      	beq.n	800139e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fa40 	bl	80007f4 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f7ff fa3c 	bl	80007f4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e12a      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800138e:	4b8b      	ldr	r3, [pc, #556]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0ed      	beq.n	8001378 <HAL_RCC_OscConfig+0x53c>
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139e:	f7ff fa29 	bl	80007f4 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff fa25 	bl	80007f4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e113      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013bc:	4b7f      	ldr	r3, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80013be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ed      	bne.n	80013a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d0:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a79      	ldr	r2, [pc, #484]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80013d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80fe 	beq.w	80015e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f040 80d0 	bne.w	8001590 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013f0:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	429a      	cmp	r2, r3
 8001402:	d130      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	3b01      	subs	r3, #1
 8001410:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d127      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d11f      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001430:	2a07      	cmp	r2, #7
 8001432:	bf14      	ite	ne
 8001434:	2201      	movne	r2, #1
 8001436:	2200      	moveq	r2, #0
 8001438:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800143a:	4293      	cmp	r3, r2
 800143c:	d113      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d109      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d06e      	beq.n	8001544 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d069      	beq.n	8001540 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0ad      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001494:	f7ff f9ae 	bl	80007f4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f9aa 	bl	80007f4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e09a      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ba:	4b40      	ldr	r3, [pc, #256]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <HAL_RCC_OscConfig+0x784>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014ca:	3a01      	subs	r2, #1
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	4311      	orrs	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014d4:	0212      	lsls	r2, r2, #8
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	3a01      	subs	r2, #1
 80014e0:	0552      	lsls	r2, r2, #21
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014e8:	0852      	lsrs	r2, r2, #1
 80014ea:	3a01      	subs	r2, #1
 80014ec:	0652      	lsls	r2, r2, #25
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014f4:	0912      	lsrs	r2, r2, #4
 80014f6:	0452      	lsls	r2, r2, #17
 80014f8:	430a      	orrs	r2, r1
 80014fa:	4930      	ldr	r1, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2d      	ldr	r2, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4a2a      	ldr	r2, [pc, #168]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001518:	f7ff f96c 	bl	80007f4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff f968 	bl	80007f4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e058      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153e:	e050      	b.n	80015e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e04f      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d148      	bne.n	80015e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001568:	f7ff f944 	bl	80007f4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff f940 	bl	80007f4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e030      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x734>
 800158e:	e028      	b.n	80015e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d023      	beq.n	80015de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x780>)
 800159c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff f927 	bl	80007f4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	e00c      	b.n	80015c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff f923 	bl	80007f4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d905      	bls.n	80015c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e013      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
 80015bc:	40021000 	.word	0x40021000
 80015c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x7b0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ec      	bne.n	80015aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_OscConfig+0x7b0>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	4905      	ldr	r1, [pc, #20]	; (80015ec <HAL_RCC_OscConfig+0x7b0>)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x7b4>)
 80015d8:	4013      	ands	r3, r2
 80015da:	60cb      	str	r3, [r1, #12]
 80015dc:	e001      	b.n	80015e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	feeefffc 	.word	0xfeeefffc

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0e7      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d910      	bls.n	8001638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0207 	bic.w	r2, r3, #7
 800161e:	4970      	ldr	r1, [pc, #448]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0cf      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d010      	beq.n	8001666 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	4b66      	ldr	r3, [pc, #408]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001650:	429a      	cmp	r2, r3
 8001652:	d908      	bls.n	8001666 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4960      	ldr	r1, [pc, #384]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04c      	beq.n	800170c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d121      	bne.n	80016ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0a6      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d115      	bne.n	80016ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e09a      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016aa:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e08e      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e086      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4943      	ldr	r1, [pc, #268]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016dc:	f7ff f88a 	bl	80007f4 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff f886 	bl	80007f4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e06e      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d010      	beq.n	800173a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001724:	429a      	cmp	r2, r3
 8001726:	d208      	bcs.n	800173a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	492b      	ldr	r1, [pc, #172]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d210      	bcs.n	800176a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 0207 	bic.w	r2, r3, #7
 8001750:	4923      	ldr	r1, [pc, #140]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_RCC_ClockConfig+0x1ec>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e036      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	4918      	ldr	r1, [pc, #96]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d009      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4910      	ldr	r1, [pc, #64]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a8:	f000 f824 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	490b      	ldr	r1, [pc, #44]	; (80017e8 <HAL_RCC_ClockConfig+0x1f4>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1fc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe ffc1 	bl	8000754 <HAL_InitTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80017d6:	7afb      	ldrb	r3, [r7, #11]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08003058 	.word	0x08003058
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x34>
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d121      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d11e      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e005      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001850:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10d      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001864:	e00a      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d102      	bne.n	8001872 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_GetSysClockFreq+0x110>)
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	e004      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d101      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_RCC_GetSysClockFreq+0x114>)
 800187a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d134      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d003      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0xa6>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d003      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0xac>
 8001898:	e005      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_RCC_GetSysClockFreq+0x110>)
 800189c:	617b      	str	r3, [r7, #20]
      break;
 800189e:	e005      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_GetSysClockFreq+0x114>)
 80018a2:	617b      	str	r3, [r7, #20]
      break;
 80018a4:	e002      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	617b      	str	r3, [r7, #20]
      break;
 80018aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	3301      	adds	r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	fb03 f202 	mul.w	r2, r3, r2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_RCC_GetSysClockFreq+0x108>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	0e5b      	lsrs	r3, r3, #25
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	3301      	adds	r3, #1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018ec:	69bb      	ldr	r3, [r7, #24]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	08003068 	.word	0x08003068
 8001904:	00f42400 	.word	0x00f42400
 8001908:	007a1200 	.word	0x007a1200

0800190c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001924:	f7ff fa26 	bl	8000d74 <HAL_PWREx_GetVoltageRange>
 8001928:	6178      	str	r0, [r7, #20]
 800192a:	e014      	b.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001944:	f7ff fa16 	bl	8000d74 <HAL_PWREx_GetVoltageRange>
 8001948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195c:	d10b      	bne.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d919      	bls.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2ba0      	cmp	r3, #160	; 0xa0
 8001968:	d902      	bls.n	8001970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800196a:	2302      	movs	r3, #2
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e013      	b.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e010      	b.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b80      	cmp	r3, #128	; 0x80
 800197a:	d902      	bls.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800197c:	2303      	movs	r3, #3
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	e00a      	b.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b80      	cmp	r3, #128	; 0x80
 8001986:	d102      	bne.n	800198e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001988:	2302      	movs	r3, #2
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	e004      	b.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b70      	cmp	r3, #112	; 0x70
 8001992:	d101      	bne.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 0207 	bic.w	r2, r3, #7
 80019a0:	4909      	ldr	r1, [pc, #36]	; (80019c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e095      	b.n	8001b0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d108      	bne.n	80019f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ee:	d009      	beq.n	8001a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
 80019f6:	e005      	b.n	8001a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe fd2c 	bl	800047c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a44:	d902      	bls.n	8001a4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e002      	b.n	8001a52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a5a:	d007      	beq.n	8001a6c <HAL_SPI_Init+0xa0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a64:	d002      	beq.n	8001a6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	ea42 0103 	orr.w	r1, r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	f003 0204 	and.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ae8:	ea42 0103 	orr.w	r1, r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b088      	sub	sp, #32
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_SPI_Transmit+0x22>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e158      	b.n	8001de6 <HAL_SPI_Transmit+0x2d4>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b3c:	f7fe fe5a 	bl	80007f4 <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d002      	beq.n	8001b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b56:	e13d      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_SPI_Transmit+0x52>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b68:	e134      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d007      	beq.n	8001bf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bfc:	d94b      	bls.n	8001c96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_SPI_Transmit+0xfa>
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d13e      	bne.n	8001c8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	1c9a      	adds	r2, r3, #2
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c30:	e02b      	b.n	8001c8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d112      	bne.n	8001c66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	1c9a      	adds	r2, r3, #2
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c64:	e011      	b.n	8001c8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c66:	f7fe fdc5 	bl	80007f4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d803      	bhi.n	8001c7e <HAL_SPI_Transmit+0x16c>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d102      	bne.n	8001c84 <HAL_SPI_Transmit+0x172>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c88:	e0a4      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ce      	bne.n	8001c32 <HAL_SPI_Transmit+0x120>
 8001c94:	e07c      	b.n	8001d90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_Transmit+0x192>
 8001c9e:	8afb      	ldrh	r3, [r7, #22]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d170      	bne.n	8001d86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d912      	bls.n	8001cd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	1c9a      	adds	r2, r3, #2
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b02      	subs	r3, #2
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd2:	e058      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001cfa:	e044      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d12b      	bne.n	8001d62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d912      	bls.n	8001d3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	1c9a      	adds	r2, r3, #2
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b02      	subs	r3, #2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d38:	e025      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	330c      	adds	r3, #12
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d60:	e011      	b.n	8001d86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d62:	f7fe fd47 	bl	80007f4 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d803      	bhi.n	8001d7a <HAL_SPI_Transmit+0x268>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d102      	bne.n	8001d80 <HAL_SPI_Transmit+0x26e>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d84:	e026      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1b5      	bne.n	8001cfc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f949 	bl	800202c <SPI_EndRxTxTransaction>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
 8001dd0:	e000      	b.n	8001dd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001dd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e00:	f7fe fcf8 	bl	80007f4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e10:	f7fe fcf0 	bl	80007f4 <HAL_GetTick>
 8001e14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	015b      	lsls	r3, r3, #5
 8001e1c:	0d1b      	lsrs	r3, r3, #20
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e26:	e054      	b.n	8001ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2e:	d050      	beq.n	8001ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e30:	f7fe fce0 	bl	80007f4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d902      	bls.n	8001e46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d13d      	bne.n	8001ec2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e5e:	d111      	bne.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e68:	d004      	beq.n	8001e74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d107      	bne.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8c:	d10f      	bne.n	8001eae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e017      	b.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4013      	ands	r3, r2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d19b      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f12:	f7fe fc6f 	bl	80007f4 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001f22:	f7fe fc67 	bl	80007f4 <HAL_GetTick>
 8001f26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00da      	lsls	r2, r3, #3
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	0d1b      	lsrs	r3, r3, #20
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f48:	e060      	b.n	800200c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f50:	d107      	bne.n	8001f62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d050      	beq.n	800200c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f6a:	f7fe fc43 	bl	80007f4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d902      	bls.n	8001f80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13d      	bne.n	8001ffc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f98:	d111      	bne.n	8001fbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa2:	d004      	beq.n	8001fae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fac:	d107      	bne.n	8001fbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc6:	d10f      	bne.n	8001fe8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e010      	b.n	800201e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3b01      	subs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d196      	bne.n	8001f4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000

0800202c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff ff5b 	bl	8001f00 <SPI_WaitFifoStateUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e027      	b.n	80020b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2200      	movs	r2, #0
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff fec0 	bl	8001df0 <SPI_WaitFlagStateUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e014      	b.n	80020b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff34 	bl	8001f00 <SPI_WaitFifoStateUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e000      	b.n	80020b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <__errno>:
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <__errno+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000000c 	.word	0x2000000c

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4d0d      	ldr	r5, [pc, #52]	; (80020fc <__libc_init_array+0x38>)
 80020c8:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <__libc_init_array+0x3c>)
 80020ca:	1b64      	subs	r4, r4, r5
 80020cc:	10a4      	asrs	r4, r4, #2
 80020ce:	2600      	movs	r6, #0
 80020d0:	42a6      	cmp	r6, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	4d0b      	ldr	r5, [pc, #44]	; (8002104 <__libc_init_array+0x40>)
 80020d6:	4c0c      	ldr	r4, [pc, #48]	; (8002108 <__libc_init_array+0x44>)
 80020d8:	f000 ffae 	bl	8003038 <_init>
 80020dc:	1b64      	subs	r4, r4, r5
 80020de:	10a4      	asrs	r4, r4, #2
 80020e0:	2600      	movs	r6, #0
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ec:	4798      	blx	r3
 80020ee:	3601      	adds	r6, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f6:	4798      	blx	r3
 80020f8:	3601      	adds	r6, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	08003130 	.word	0x08003130
 8002100:	08003130 	.word	0x08003130
 8002104:	08003130 	.word	0x08003130
 8002108:	08003134 	.word	0x08003134

0800210c <memset>:
 800210c:	4402      	add	r2, r0
 800210e:	4603      	mov	r3, r0
 8002110:	4293      	cmp	r3, r2
 8002112:	d100      	bne.n	8002116 <memset+0xa>
 8002114:	4770      	bx	lr
 8002116:	f803 1b01 	strb.w	r1, [r3], #1
 800211a:	e7f9      	b.n	8002110 <memset+0x4>

0800211c <iprintf>:
 800211c:	b40f      	push	{r0, r1, r2, r3}
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <iprintf+0x2c>)
 8002120:	b513      	push	{r0, r1, r4, lr}
 8002122:	681c      	ldr	r4, [r3, #0]
 8002124:	b124      	cbz	r4, 8002130 <iprintf+0x14>
 8002126:	69a3      	ldr	r3, [r4, #24]
 8002128:	b913      	cbnz	r3, 8002130 <iprintf+0x14>
 800212a:	4620      	mov	r0, r4
 800212c:	f000 f866 	bl	80021fc <__sinit>
 8002130:	ab05      	add	r3, sp, #20
 8002132:	9a04      	ldr	r2, [sp, #16]
 8002134:	68a1      	ldr	r1, [r4, #8]
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	4620      	mov	r0, r4
 800213a:	f000 f9bd 	bl	80024b8 <_vfiprintf_r>
 800213e:	b002      	add	sp, #8
 8002140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002144:	b004      	add	sp, #16
 8002146:	4770      	bx	lr
 8002148:	2000000c 	.word	0x2000000c

0800214c <std>:
 800214c:	2300      	movs	r3, #0
 800214e:	b510      	push	{r4, lr}
 8002150:	4604      	mov	r4, r0
 8002152:	e9c0 3300 	strd	r3, r3, [r0]
 8002156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800215a:	6083      	str	r3, [r0, #8]
 800215c:	8181      	strh	r1, [r0, #12]
 800215e:	6643      	str	r3, [r0, #100]	; 0x64
 8002160:	81c2      	strh	r2, [r0, #14]
 8002162:	6183      	str	r3, [r0, #24]
 8002164:	4619      	mov	r1, r3
 8002166:	2208      	movs	r2, #8
 8002168:	305c      	adds	r0, #92	; 0x5c
 800216a:	f7ff ffcf 	bl	800210c <memset>
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <std+0x38>)
 8002170:	6263      	str	r3, [r4, #36]	; 0x24
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <std+0x3c>)
 8002174:	62a3      	str	r3, [r4, #40]	; 0x28
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <std+0x40>)
 8002178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <std+0x44>)
 800217c:	6224      	str	r4, [r4, #32]
 800217e:	6323      	str	r3, [r4, #48]	; 0x30
 8002180:	bd10      	pop	{r4, pc}
 8002182:	bf00      	nop
 8002184:	08002a61 	.word	0x08002a61
 8002188:	08002a83 	.word	0x08002a83
 800218c:	08002abb 	.word	0x08002abb
 8002190:	08002adf 	.word	0x08002adf

08002194 <_cleanup_r>:
 8002194:	4901      	ldr	r1, [pc, #4]	; (800219c <_cleanup_r+0x8>)
 8002196:	f000 b8af 	b.w	80022f8 <_fwalk_reent>
 800219a:	bf00      	nop
 800219c:	08002db9 	.word	0x08002db9

080021a0 <__sfmoreglue>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	2268      	movs	r2, #104	; 0x68
 80021a4:	1e4d      	subs	r5, r1, #1
 80021a6:	4355      	muls	r5, r2
 80021a8:	460e      	mov	r6, r1
 80021aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021ae:	f000 f8e5 	bl	800237c <_malloc_r>
 80021b2:	4604      	mov	r4, r0
 80021b4:	b140      	cbz	r0, 80021c8 <__sfmoreglue+0x28>
 80021b6:	2100      	movs	r1, #0
 80021b8:	e9c0 1600 	strd	r1, r6, [r0]
 80021bc:	300c      	adds	r0, #12
 80021be:	60a0      	str	r0, [r4, #8]
 80021c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021c4:	f7ff ffa2 	bl	800210c <memset>
 80021c8:	4620      	mov	r0, r4
 80021ca:	bd70      	pop	{r4, r5, r6, pc}

080021cc <__sfp_lock_acquire>:
 80021cc:	4801      	ldr	r0, [pc, #4]	; (80021d4 <__sfp_lock_acquire+0x8>)
 80021ce:	f000 b8b3 	b.w	8002338 <__retarget_lock_acquire_recursive>
 80021d2:	bf00      	nop
 80021d4:	200000f9 	.word	0x200000f9

080021d8 <__sfp_lock_release>:
 80021d8:	4801      	ldr	r0, [pc, #4]	; (80021e0 <__sfp_lock_release+0x8>)
 80021da:	f000 b8ae 	b.w	800233a <__retarget_lock_release_recursive>
 80021de:	bf00      	nop
 80021e0:	200000f9 	.word	0x200000f9

080021e4 <__sinit_lock_acquire>:
 80021e4:	4801      	ldr	r0, [pc, #4]	; (80021ec <__sinit_lock_acquire+0x8>)
 80021e6:	f000 b8a7 	b.w	8002338 <__retarget_lock_acquire_recursive>
 80021ea:	bf00      	nop
 80021ec:	200000fa 	.word	0x200000fa

080021f0 <__sinit_lock_release>:
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <__sinit_lock_release+0x8>)
 80021f2:	f000 b8a2 	b.w	800233a <__retarget_lock_release_recursive>
 80021f6:	bf00      	nop
 80021f8:	200000fa 	.word	0x200000fa

080021fc <__sinit>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	4604      	mov	r4, r0
 8002200:	f7ff fff0 	bl	80021e4 <__sinit_lock_acquire>
 8002204:	69a3      	ldr	r3, [r4, #24]
 8002206:	b11b      	cbz	r3, 8002210 <__sinit+0x14>
 8002208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800220c:	f7ff bff0 	b.w	80021f0 <__sinit_lock_release>
 8002210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002214:	6523      	str	r3, [r4, #80]	; 0x50
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <__sinit+0x68>)
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <__sinit+0x6c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	62a2      	str	r2, [r4, #40]	; 0x28
 800221e:	42a3      	cmp	r3, r4
 8002220:	bf04      	itt	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	61a3      	streq	r3, [r4, #24]
 8002226:	4620      	mov	r0, r4
 8002228:	f000 f820 	bl	800226c <__sfp>
 800222c:	6060      	str	r0, [r4, #4]
 800222e:	4620      	mov	r0, r4
 8002230:	f000 f81c 	bl	800226c <__sfp>
 8002234:	60a0      	str	r0, [r4, #8]
 8002236:	4620      	mov	r0, r4
 8002238:	f000 f818 	bl	800226c <__sfp>
 800223c:	2200      	movs	r2, #0
 800223e:	60e0      	str	r0, [r4, #12]
 8002240:	2104      	movs	r1, #4
 8002242:	6860      	ldr	r0, [r4, #4]
 8002244:	f7ff ff82 	bl	800214c <std>
 8002248:	68a0      	ldr	r0, [r4, #8]
 800224a:	2201      	movs	r2, #1
 800224c:	2109      	movs	r1, #9
 800224e:	f7ff ff7d 	bl	800214c <std>
 8002252:	68e0      	ldr	r0, [r4, #12]
 8002254:	2202      	movs	r2, #2
 8002256:	2112      	movs	r1, #18
 8002258:	f7ff ff78 	bl	800214c <std>
 800225c:	2301      	movs	r3, #1
 800225e:	61a3      	str	r3, [r4, #24]
 8002260:	e7d2      	b.n	8002208 <__sinit+0xc>
 8002262:	bf00      	nop
 8002264:	08003098 	.word	0x08003098
 8002268:	08002195 	.word	0x08002195

0800226c <__sfp>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	4607      	mov	r7, r0
 8002270:	f7ff ffac 	bl	80021cc <__sfp_lock_acquire>
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <__sfp+0x84>)
 8002276:	681e      	ldr	r6, [r3, #0]
 8002278:	69b3      	ldr	r3, [r6, #24]
 800227a:	b913      	cbnz	r3, 8002282 <__sfp+0x16>
 800227c:	4630      	mov	r0, r6
 800227e:	f7ff ffbd 	bl	80021fc <__sinit>
 8002282:	3648      	adds	r6, #72	; 0x48
 8002284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002288:	3b01      	subs	r3, #1
 800228a:	d503      	bpl.n	8002294 <__sfp+0x28>
 800228c:	6833      	ldr	r3, [r6, #0]
 800228e:	b30b      	cbz	r3, 80022d4 <__sfp+0x68>
 8002290:	6836      	ldr	r6, [r6, #0]
 8002292:	e7f7      	b.n	8002284 <__sfp+0x18>
 8002294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002298:	b9d5      	cbnz	r5, 80022d0 <__sfp+0x64>
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <__sfp+0x88>)
 800229c:	60e3      	str	r3, [r4, #12]
 800229e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022a2:	6665      	str	r5, [r4, #100]	; 0x64
 80022a4:	f000 f847 	bl	8002336 <__retarget_lock_init_recursive>
 80022a8:	f7ff ff96 	bl	80021d8 <__sfp_lock_release>
 80022ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022b4:	6025      	str	r5, [r4, #0]
 80022b6:	61a5      	str	r5, [r4, #24]
 80022b8:	2208      	movs	r2, #8
 80022ba:	4629      	mov	r1, r5
 80022bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022c0:	f7ff ff24 	bl	800210c <memset>
 80022c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022cc:	4620      	mov	r0, r4
 80022ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d0:	3468      	adds	r4, #104	; 0x68
 80022d2:	e7d9      	b.n	8002288 <__sfp+0x1c>
 80022d4:	2104      	movs	r1, #4
 80022d6:	4638      	mov	r0, r7
 80022d8:	f7ff ff62 	bl	80021a0 <__sfmoreglue>
 80022dc:	4604      	mov	r4, r0
 80022de:	6030      	str	r0, [r6, #0]
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d1d5      	bne.n	8002290 <__sfp+0x24>
 80022e4:	f7ff ff78 	bl	80021d8 <__sfp_lock_release>
 80022e8:	230c      	movs	r3, #12
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	e7ee      	b.n	80022cc <__sfp+0x60>
 80022ee:	bf00      	nop
 80022f0:	08003098 	.word	0x08003098
 80022f4:	ffff0001 	.word	0xffff0001

080022f8 <_fwalk_reent>:
 80022f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022fc:	4606      	mov	r6, r0
 80022fe:	4688      	mov	r8, r1
 8002300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002304:	2700      	movs	r7, #0
 8002306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800230a:	f1b9 0901 	subs.w	r9, r9, #1
 800230e:	d505      	bpl.n	800231c <_fwalk_reent+0x24>
 8002310:	6824      	ldr	r4, [r4, #0]
 8002312:	2c00      	cmp	r4, #0
 8002314:	d1f7      	bne.n	8002306 <_fwalk_reent+0xe>
 8002316:	4638      	mov	r0, r7
 8002318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800231c:	89ab      	ldrh	r3, [r5, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d907      	bls.n	8002332 <_fwalk_reent+0x3a>
 8002322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002326:	3301      	adds	r3, #1
 8002328:	d003      	beq.n	8002332 <_fwalk_reent+0x3a>
 800232a:	4629      	mov	r1, r5
 800232c:	4630      	mov	r0, r6
 800232e:	47c0      	blx	r8
 8002330:	4307      	orrs	r7, r0
 8002332:	3568      	adds	r5, #104	; 0x68
 8002334:	e7e9      	b.n	800230a <_fwalk_reent+0x12>

08002336 <__retarget_lock_init_recursive>:
 8002336:	4770      	bx	lr

08002338 <__retarget_lock_acquire_recursive>:
 8002338:	4770      	bx	lr

0800233a <__retarget_lock_release_recursive>:
 800233a:	4770      	bx	lr

0800233c <sbrk_aligned>:
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	4e0e      	ldr	r6, [pc, #56]	; (8002378 <sbrk_aligned+0x3c>)
 8002340:	460c      	mov	r4, r1
 8002342:	6831      	ldr	r1, [r6, #0]
 8002344:	4605      	mov	r5, r0
 8002346:	b911      	cbnz	r1, 800234e <sbrk_aligned+0x12>
 8002348:	f000 fb7a 	bl	8002a40 <_sbrk_r>
 800234c:	6030      	str	r0, [r6, #0]
 800234e:	4621      	mov	r1, r4
 8002350:	4628      	mov	r0, r5
 8002352:	f000 fb75 	bl	8002a40 <_sbrk_r>
 8002356:	1c43      	adds	r3, r0, #1
 8002358:	d00a      	beq.n	8002370 <sbrk_aligned+0x34>
 800235a:	1cc4      	adds	r4, r0, #3
 800235c:	f024 0403 	bic.w	r4, r4, #3
 8002360:	42a0      	cmp	r0, r4
 8002362:	d007      	beq.n	8002374 <sbrk_aligned+0x38>
 8002364:	1a21      	subs	r1, r4, r0
 8002366:	4628      	mov	r0, r5
 8002368:	f000 fb6a 	bl	8002a40 <_sbrk_r>
 800236c:	3001      	adds	r0, #1
 800236e:	d101      	bne.n	8002374 <sbrk_aligned+0x38>
 8002370:	f04f 34ff 	mov.w	r4, #4294967295
 8002374:	4620      	mov	r0, r4
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	20000100 	.word	0x20000100

0800237c <_malloc_r>:
 800237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002380:	1ccd      	adds	r5, r1, #3
 8002382:	f025 0503 	bic.w	r5, r5, #3
 8002386:	3508      	adds	r5, #8
 8002388:	2d0c      	cmp	r5, #12
 800238a:	bf38      	it	cc
 800238c:	250c      	movcc	r5, #12
 800238e:	2d00      	cmp	r5, #0
 8002390:	4607      	mov	r7, r0
 8002392:	db01      	blt.n	8002398 <_malloc_r+0x1c>
 8002394:	42a9      	cmp	r1, r5
 8002396:	d905      	bls.n	80023a4 <_malloc_r+0x28>
 8002398:	230c      	movs	r3, #12
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	2600      	movs	r6, #0
 800239e:	4630      	mov	r0, r6
 80023a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023a4:	4e2e      	ldr	r6, [pc, #184]	; (8002460 <_malloc_r+0xe4>)
 80023a6:	f000 fdbb 	bl	8002f20 <__malloc_lock>
 80023aa:	6833      	ldr	r3, [r6, #0]
 80023ac:	461c      	mov	r4, r3
 80023ae:	bb34      	cbnz	r4, 80023fe <_malloc_r+0x82>
 80023b0:	4629      	mov	r1, r5
 80023b2:	4638      	mov	r0, r7
 80023b4:	f7ff ffc2 	bl	800233c <sbrk_aligned>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	4604      	mov	r4, r0
 80023bc:	d14d      	bne.n	800245a <_malloc_r+0xde>
 80023be:	6834      	ldr	r4, [r6, #0]
 80023c0:	4626      	mov	r6, r4
 80023c2:	2e00      	cmp	r6, #0
 80023c4:	d140      	bne.n	8002448 <_malloc_r+0xcc>
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	4631      	mov	r1, r6
 80023ca:	4638      	mov	r0, r7
 80023cc:	eb04 0803 	add.w	r8, r4, r3
 80023d0:	f000 fb36 	bl	8002a40 <_sbrk_r>
 80023d4:	4580      	cmp	r8, r0
 80023d6:	d13a      	bne.n	800244e <_malloc_r+0xd2>
 80023d8:	6821      	ldr	r1, [r4, #0]
 80023da:	3503      	adds	r5, #3
 80023dc:	1a6d      	subs	r5, r5, r1
 80023de:	f025 0503 	bic.w	r5, r5, #3
 80023e2:	3508      	adds	r5, #8
 80023e4:	2d0c      	cmp	r5, #12
 80023e6:	bf38      	it	cc
 80023e8:	250c      	movcc	r5, #12
 80023ea:	4629      	mov	r1, r5
 80023ec:	4638      	mov	r0, r7
 80023ee:	f7ff ffa5 	bl	800233c <sbrk_aligned>
 80023f2:	3001      	adds	r0, #1
 80023f4:	d02b      	beq.n	800244e <_malloc_r+0xd2>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	442b      	add	r3, r5
 80023fa:	6023      	str	r3, [r4, #0]
 80023fc:	e00e      	b.n	800241c <_malloc_r+0xa0>
 80023fe:	6822      	ldr	r2, [r4, #0]
 8002400:	1b52      	subs	r2, r2, r5
 8002402:	d41e      	bmi.n	8002442 <_malloc_r+0xc6>
 8002404:	2a0b      	cmp	r2, #11
 8002406:	d916      	bls.n	8002436 <_malloc_r+0xba>
 8002408:	1961      	adds	r1, r4, r5
 800240a:	42a3      	cmp	r3, r4
 800240c:	6025      	str	r5, [r4, #0]
 800240e:	bf18      	it	ne
 8002410:	6059      	strne	r1, [r3, #4]
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	bf08      	it	eq
 8002416:	6031      	streq	r1, [r6, #0]
 8002418:	5162      	str	r2, [r4, r5]
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	4638      	mov	r0, r7
 800241e:	f104 060b 	add.w	r6, r4, #11
 8002422:	f000 fd83 	bl	8002f2c <__malloc_unlock>
 8002426:	f026 0607 	bic.w	r6, r6, #7
 800242a:	1d23      	adds	r3, r4, #4
 800242c:	1af2      	subs	r2, r6, r3
 800242e:	d0b6      	beq.n	800239e <_malloc_r+0x22>
 8002430:	1b9b      	subs	r3, r3, r6
 8002432:	50a3      	str	r3, [r4, r2]
 8002434:	e7b3      	b.n	800239e <_malloc_r+0x22>
 8002436:	6862      	ldr	r2, [r4, #4]
 8002438:	42a3      	cmp	r3, r4
 800243a:	bf0c      	ite	eq
 800243c:	6032      	streq	r2, [r6, #0]
 800243e:	605a      	strne	r2, [r3, #4]
 8002440:	e7ec      	b.n	800241c <_malloc_r+0xa0>
 8002442:	4623      	mov	r3, r4
 8002444:	6864      	ldr	r4, [r4, #4]
 8002446:	e7b2      	b.n	80023ae <_malloc_r+0x32>
 8002448:	4634      	mov	r4, r6
 800244a:	6876      	ldr	r6, [r6, #4]
 800244c:	e7b9      	b.n	80023c2 <_malloc_r+0x46>
 800244e:	230c      	movs	r3, #12
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4638      	mov	r0, r7
 8002454:	f000 fd6a 	bl	8002f2c <__malloc_unlock>
 8002458:	e7a1      	b.n	800239e <_malloc_r+0x22>
 800245a:	6025      	str	r5, [r4, #0]
 800245c:	e7de      	b.n	800241c <_malloc_r+0xa0>
 800245e:	bf00      	nop
 8002460:	200000fc 	.word	0x200000fc

08002464 <__sfputc_r>:
 8002464:	6893      	ldr	r3, [r2, #8]
 8002466:	3b01      	subs	r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	b410      	push	{r4}
 800246c:	6093      	str	r3, [r2, #8]
 800246e:	da08      	bge.n	8002482 <__sfputc_r+0x1e>
 8002470:	6994      	ldr	r4, [r2, #24]
 8002472:	42a3      	cmp	r3, r4
 8002474:	db01      	blt.n	800247a <__sfputc_r+0x16>
 8002476:	290a      	cmp	r1, #10
 8002478:	d103      	bne.n	8002482 <__sfputc_r+0x1e>
 800247a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800247e:	f000 bb33 	b.w	8002ae8 <__swbuf_r>
 8002482:	6813      	ldr	r3, [r2, #0]
 8002484:	1c58      	adds	r0, r3, #1
 8002486:	6010      	str	r0, [r2, #0]
 8002488:	7019      	strb	r1, [r3, #0]
 800248a:	4608      	mov	r0, r1
 800248c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002490:	4770      	bx	lr

08002492 <__sfputs_r>:
 8002492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002494:	4606      	mov	r6, r0
 8002496:	460f      	mov	r7, r1
 8002498:	4614      	mov	r4, r2
 800249a:	18d5      	adds	r5, r2, r3
 800249c:	42ac      	cmp	r4, r5
 800249e:	d101      	bne.n	80024a4 <__sfputs_r+0x12>
 80024a0:	2000      	movs	r0, #0
 80024a2:	e007      	b.n	80024b4 <__sfputs_r+0x22>
 80024a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024a8:	463a      	mov	r2, r7
 80024aa:	4630      	mov	r0, r6
 80024ac:	f7ff ffda 	bl	8002464 <__sfputc_r>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d1f3      	bne.n	800249c <__sfputs_r+0xa>
 80024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024b8 <_vfiprintf_r>:
 80024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	460d      	mov	r5, r1
 80024be:	b09d      	sub	sp, #116	; 0x74
 80024c0:	4614      	mov	r4, r2
 80024c2:	4698      	mov	r8, r3
 80024c4:	4606      	mov	r6, r0
 80024c6:	b118      	cbz	r0, 80024d0 <_vfiprintf_r+0x18>
 80024c8:	6983      	ldr	r3, [r0, #24]
 80024ca:	b90b      	cbnz	r3, 80024d0 <_vfiprintf_r+0x18>
 80024cc:	f7ff fe96 	bl	80021fc <__sinit>
 80024d0:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <_vfiprintf_r+0x240>)
 80024d2:	429d      	cmp	r5, r3
 80024d4:	d11b      	bne.n	800250e <_vfiprintf_r+0x56>
 80024d6:	6875      	ldr	r5, [r6, #4]
 80024d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024da:	07d9      	lsls	r1, r3, #31
 80024dc:	d405      	bmi.n	80024ea <_vfiprintf_r+0x32>
 80024de:	89ab      	ldrh	r3, [r5, #12]
 80024e0:	059a      	lsls	r2, r3, #22
 80024e2:	d402      	bmi.n	80024ea <_vfiprintf_r+0x32>
 80024e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024e6:	f7ff ff27 	bl	8002338 <__retarget_lock_acquire_recursive>
 80024ea:	89ab      	ldrh	r3, [r5, #12]
 80024ec:	071b      	lsls	r3, r3, #28
 80024ee:	d501      	bpl.n	80024f4 <_vfiprintf_r+0x3c>
 80024f0:	692b      	ldr	r3, [r5, #16]
 80024f2:	b9eb      	cbnz	r3, 8002530 <_vfiprintf_r+0x78>
 80024f4:	4629      	mov	r1, r5
 80024f6:	4630      	mov	r0, r6
 80024f8:	f000 fb5a 	bl	8002bb0 <__swsetup_r>
 80024fc:	b1c0      	cbz	r0, 8002530 <_vfiprintf_r+0x78>
 80024fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002500:	07dc      	lsls	r4, r3, #31
 8002502:	d50e      	bpl.n	8002522 <_vfiprintf_r+0x6a>
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	b01d      	add	sp, #116	; 0x74
 800250a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250e:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <_vfiprintf_r+0x244>)
 8002510:	429d      	cmp	r5, r3
 8002512:	d101      	bne.n	8002518 <_vfiprintf_r+0x60>
 8002514:	68b5      	ldr	r5, [r6, #8]
 8002516:	e7df      	b.n	80024d8 <_vfiprintf_r+0x20>
 8002518:	4b79      	ldr	r3, [pc, #484]	; (8002700 <_vfiprintf_r+0x248>)
 800251a:	429d      	cmp	r5, r3
 800251c:	bf08      	it	eq
 800251e:	68f5      	ldreq	r5, [r6, #12]
 8002520:	e7da      	b.n	80024d8 <_vfiprintf_r+0x20>
 8002522:	89ab      	ldrh	r3, [r5, #12]
 8002524:	0598      	lsls	r0, r3, #22
 8002526:	d4ed      	bmi.n	8002504 <_vfiprintf_r+0x4c>
 8002528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800252a:	f7ff ff06 	bl	800233a <__retarget_lock_release_recursive>
 800252e:	e7e9      	b.n	8002504 <_vfiprintf_r+0x4c>
 8002530:	2300      	movs	r3, #0
 8002532:	9309      	str	r3, [sp, #36]	; 0x24
 8002534:	2320      	movs	r3, #32
 8002536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800253a:	f8cd 800c 	str.w	r8, [sp, #12]
 800253e:	2330      	movs	r3, #48	; 0x30
 8002540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002704 <_vfiprintf_r+0x24c>
 8002544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002548:	f04f 0901 	mov.w	r9, #1
 800254c:	4623      	mov	r3, r4
 800254e:	469a      	mov	sl, r3
 8002550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002554:	b10a      	cbz	r2, 800255a <_vfiprintf_r+0xa2>
 8002556:	2a25      	cmp	r2, #37	; 0x25
 8002558:	d1f9      	bne.n	800254e <_vfiprintf_r+0x96>
 800255a:	ebba 0b04 	subs.w	fp, sl, r4
 800255e:	d00b      	beq.n	8002578 <_vfiprintf_r+0xc0>
 8002560:	465b      	mov	r3, fp
 8002562:	4622      	mov	r2, r4
 8002564:	4629      	mov	r1, r5
 8002566:	4630      	mov	r0, r6
 8002568:	f7ff ff93 	bl	8002492 <__sfputs_r>
 800256c:	3001      	adds	r0, #1
 800256e:	f000 80aa 	beq.w	80026c6 <_vfiprintf_r+0x20e>
 8002572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002574:	445a      	add	r2, fp
 8002576:	9209      	str	r2, [sp, #36]	; 0x24
 8002578:	f89a 3000 	ldrb.w	r3, [sl]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a2 	beq.w	80026c6 <_vfiprintf_r+0x20e>
 8002582:	2300      	movs	r3, #0
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800258c:	f10a 0a01 	add.w	sl, sl, #1
 8002590:	9304      	str	r3, [sp, #16]
 8002592:	9307      	str	r3, [sp, #28]
 8002594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002598:	931a      	str	r3, [sp, #104]	; 0x68
 800259a:	4654      	mov	r4, sl
 800259c:	2205      	movs	r2, #5
 800259e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a2:	4858      	ldr	r0, [pc, #352]	; (8002704 <_vfiprintf_r+0x24c>)
 80025a4:	f7fd fe14 	bl	80001d0 <memchr>
 80025a8:	9a04      	ldr	r2, [sp, #16]
 80025aa:	b9d8      	cbnz	r0, 80025e4 <_vfiprintf_r+0x12c>
 80025ac:	06d1      	lsls	r1, r2, #27
 80025ae:	bf44      	itt	mi
 80025b0:	2320      	movmi	r3, #32
 80025b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025b6:	0713      	lsls	r3, r2, #28
 80025b8:	bf44      	itt	mi
 80025ba:	232b      	movmi	r3, #43	; 0x2b
 80025bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025c0:	f89a 3000 	ldrb.w	r3, [sl]
 80025c4:	2b2a      	cmp	r3, #42	; 0x2a
 80025c6:	d015      	beq.n	80025f4 <_vfiprintf_r+0x13c>
 80025c8:	9a07      	ldr	r2, [sp, #28]
 80025ca:	4654      	mov	r4, sl
 80025cc:	2000      	movs	r0, #0
 80025ce:	f04f 0c0a 	mov.w	ip, #10
 80025d2:	4621      	mov	r1, r4
 80025d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025d8:	3b30      	subs	r3, #48	; 0x30
 80025da:	2b09      	cmp	r3, #9
 80025dc:	d94e      	bls.n	800267c <_vfiprintf_r+0x1c4>
 80025de:	b1b0      	cbz	r0, 800260e <_vfiprintf_r+0x156>
 80025e0:	9207      	str	r2, [sp, #28]
 80025e2:	e014      	b.n	800260e <_vfiprintf_r+0x156>
 80025e4:	eba0 0308 	sub.w	r3, r0, r8
 80025e8:	fa09 f303 	lsl.w	r3, r9, r3
 80025ec:	4313      	orrs	r3, r2
 80025ee:	9304      	str	r3, [sp, #16]
 80025f0:	46a2      	mov	sl, r4
 80025f2:	e7d2      	b.n	800259a <_vfiprintf_r+0xe2>
 80025f4:	9b03      	ldr	r3, [sp, #12]
 80025f6:	1d19      	adds	r1, r3, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	9103      	str	r1, [sp, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bfbb      	ittet	lt
 8002600:	425b      	neglt	r3, r3
 8002602:	f042 0202 	orrlt.w	r2, r2, #2
 8002606:	9307      	strge	r3, [sp, #28]
 8002608:	9307      	strlt	r3, [sp, #28]
 800260a:	bfb8      	it	lt
 800260c:	9204      	strlt	r2, [sp, #16]
 800260e:	7823      	ldrb	r3, [r4, #0]
 8002610:	2b2e      	cmp	r3, #46	; 0x2e
 8002612:	d10c      	bne.n	800262e <_vfiprintf_r+0x176>
 8002614:	7863      	ldrb	r3, [r4, #1]
 8002616:	2b2a      	cmp	r3, #42	; 0x2a
 8002618:	d135      	bne.n	8002686 <_vfiprintf_r+0x1ce>
 800261a:	9b03      	ldr	r3, [sp, #12]
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	9203      	str	r2, [sp, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfb8      	it	lt
 8002626:	f04f 33ff 	movlt.w	r3, #4294967295
 800262a:	3402      	adds	r4, #2
 800262c:	9305      	str	r3, [sp, #20]
 800262e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002714 <_vfiprintf_r+0x25c>
 8002632:	7821      	ldrb	r1, [r4, #0]
 8002634:	2203      	movs	r2, #3
 8002636:	4650      	mov	r0, sl
 8002638:	f7fd fdca 	bl	80001d0 <memchr>
 800263c:	b140      	cbz	r0, 8002650 <_vfiprintf_r+0x198>
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	eba0 000a 	sub.w	r0, r0, sl
 8002644:	fa03 f000 	lsl.w	r0, r3, r0
 8002648:	9b04      	ldr	r3, [sp, #16]
 800264a:	4303      	orrs	r3, r0
 800264c:	3401      	adds	r4, #1
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002654:	482c      	ldr	r0, [pc, #176]	; (8002708 <_vfiprintf_r+0x250>)
 8002656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800265a:	2206      	movs	r2, #6
 800265c:	f7fd fdb8 	bl	80001d0 <memchr>
 8002660:	2800      	cmp	r0, #0
 8002662:	d03f      	beq.n	80026e4 <_vfiprintf_r+0x22c>
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <_vfiprintf_r+0x254>)
 8002666:	bb1b      	cbnz	r3, 80026b0 <_vfiprintf_r+0x1f8>
 8002668:	9b03      	ldr	r3, [sp, #12]
 800266a:	3307      	adds	r3, #7
 800266c:	f023 0307 	bic.w	r3, r3, #7
 8002670:	3308      	adds	r3, #8
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002676:	443b      	add	r3, r7
 8002678:	9309      	str	r3, [sp, #36]	; 0x24
 800267a:	e767      	b.n	800254c <_vfiprintf_r+0x94>
 800267c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002680:	460c      	mov	r4, r1
 8002682:	2001      	movs	r0, #1
 8002684:	e7a5      	b.n	80025d2 <_vfiprintf_r+0x11a>
 8002686:	2300      	movs	r3, #0
 8002688:	3401      	adds	r4, #1
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	4619      	mov	r1, r3
 800268e:	f04f 0c0a 	mov.w	ip, #10
 8002692:	4620      	mov	r0, r4
 8002694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	2a09      	cmp	r2, #9
 800269c:	d903      	bls.n	80026a6 <_vfiprintf_r+0x1ee>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0c5      	beq.n	800262e <_vfiprintf_r+0x176>
 80026a2:	9105      	str	r1, [sp, #20]
 80026a4:	e7c3      	b.n	800262e <_vfiprintf_r+0x176>
 80026a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80026aa:	4604      	mov	r4, r0
 80026ac:	2301      	movs	r3, #1
 80026ae:	e7f0      	b.n	8002692 <_vfiprintf_r+0x1da>
 80026b0:	ab03      	add	r3, sp, #12
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	462a      	mov	r2, r5
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <_vfiprintf_r+0x258>)
 80026b8:	a904      	add	r1, sp, #16
 80026ba:	4630      	mov	r0, r6
 80026bc:	f3af 8000 	nop.w
 80026c0:	4607      	mov	r7, r0
 80026c2:	1c78      	adds	r0, r7, #1
 80026c4:	d1d6      	bne.n	8002674 <_vfiprintf_r+0x1bc>
 80026c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026c8:	07d9      	lsls	r1, r3, #31
 80026ca:	d405      	bmi.n	80026d8 <_vfiprintf_r+0x220>
 80026cc:	89ab      	ldrh	r3, [r5, #12]
 80026ce:	059a      	lsls	r2, r3, #22
 80026d0:	d402      	bmi.n	80026d8 <_vfiprintf_r+0x220>
 80026d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026d4:	f7ff fe31 	bl	800233a <__retarget_lock_release_recursive>
 80026d8:	89ab      	ldrh	r3, [r5, #12]
 80026da:	065b      	lsls	r3, r3, #25
 80026dc:	f53f af12 	bmi.w	8002504 <_vfiprintf_r+0x4c>
 80026e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e2:	e711      	b.n	8002508 <_vfiprintf_r+0x50>
 80026e4:	ab03      	add	r3, sp, #12
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	462a      	mov	r2, r5
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <_vfiprintf_r+0x258>)
 80026ec:	a904      	add	r1, sp, #16
 80026ee:	4630      	mov	r0, r6
 80026f0:	f000 f880 	bl	80027f4 <_printf_i>
 80026f4:	e7e4      	b.n	80026c0 <_vfiprintf_r+0x208>
 80026f6:	bf00      	nop
 80026f8:	080030bc 	.word	0x080030bc
 80026fc:	080030dc 	.word	0x080030dc
 8002700:	0800309c 	.word	0x0800309c
 8002704:	080030fc 	.word	0x080030fc
 8002708:	08003106 	.word	0x08003106
 800270c:	00000000 	.word	0x00000000
 8002710:	08002493 	.word	0x08002493
 8002714:	08003102 	.word	0x08003102

08002718 <_printf_common>:
 8002718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800271c:	4616      	mov	r6, r2
 800271e:	4699      	mov	r9, r3
 8002720:	688a      	ldr	r2, [r1, #8]
 8002722:	690b      	ldr	r3, [r1, #16]
 8002724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002728:	4293      	cmp	r3, r2
 800272a:	bfb8      	it	lt
 800272c:	4613      	movlt	r3, r2
 800272e:	6033      	str	r3, [r6, #0]
 8002730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002734:	4607      	mov	r7, r0
 8002736:	460c      	mov	r4, r1
 8002738:	b10a      	cbz	r2, 800273e <_printf_common+0x26>
 800273a:	3301      	adds	r3, #1
 800273c:	6033      	str	r3, [r6, #0]
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	0699      	lsls	r1, r3, #26
 8002742:	bf42      	ittt	mi
 8002744:	6833      	ldrmi	r3, [r6, #0]
 8002746:	3302      	addmi	r3, #2
 8002748:	6033      	strmi	r3, [r6, #0]
 800274a:	6825      	ldr	r5, [r4, #0]
 800274c:	f015 0506 	ands.w	r5, r5, #6
 8002750:	d106      	bne.n	8002760 <_printf_common+0x48>
 8002752:	f104 0a19 	add.w	sl, r4, #25
 8002756:	68e3      	ldr	r3, [r4, #12]
 8002758:	6832      	ldr	r2, [r6, #0]
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	42ab      	cmp	r3, r5
 800275e:	dc26      	bgt.n	80027ae <_printf_common+0x96>
 8002760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002764:	1e13      	subs	r3, r2, #0
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	bf18      	it	ne
 800276a:	2301      	movne	r3, #1
 800276c:	0692      	lsls	r2, r2, #26
 800276e:	d42b      	bmi.n	80027c8 <_printf_common+0xb0>
 8002770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002774:	4649      	mov	r1, r9
 8002776:	4638      	mov	r0, r7
 8002778:	47c0      	blx	r8
 800277a:	3001      	adds	r0, #1
 800277c:	d01e      	beq.n	80027bc <_printf_common+0xa4>
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	68e5      	ldr	r5, [r4, #12]
 8002782:	6832      	ldr	r2, [r6, #0]
 8002784:	f003 0306 	and.w	r3, r3, #6
 8002788:	2b04      	cmp	r3, #4
 800278a:	bf08      	it	eq
 800278c:	1aad      	subeq	r5, r5, r2
 800278e:	68a3      	ldr	r3, [r4, #8]
 8002790:	6922      	ldr	r2, [r4, #16]
 8002792:	bf0c      	ite	eq
 8002794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002798:	2500      	movne	r5, #0
 800279a:	4293      	cmp	r3, r2
 800279c:	bfc4      	itt	gt
 800279e:	1a9b      	subgt	r3, r3, r2
 80027a0:	18ed      	addgt	r5, r5, r3
 80027a2:	2600      	movs	r6, #0
 80027a4:	341a      	adds	r4, #26
 80027a6:	42b5      	cmp	r5, r6
 80027a8:	d11a      	bne.n	80027e0 <_printf_common+0xc8>
 80027aa:	2000      	movs	r0, #0
 80027ac:	e008      	b.n	80027c0 <_printf_common+0xa8>
 80027ae:	2301      	movs	r3, #1
 80027b0:	4652      	mov	r2, sl
 80027b2:	4649      	mov	r1, r9
 80027b4:	4638      	mov	r0, r7
 80027b6:	47c0      	blx	r8
 80027b8:	3001      	adds	r0, #1
 80027ba:	d103      	bne.n	80027c4 <_printf_common+0xac>
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c4:	3501      	adds	r5, #1
 80027c6:	e7c6      	b.n	8002756 <_printf_common+0x3e>
 80027c8:	18e1      	adds	r1, r4, r3
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	2030      	movs	r0, #48	; 0x30
 80027ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027d2:	4422      	add	r2, r4
 80027d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027dc:	3302      	adds	r3, #2
 80027de:	e7c7      	b.n	8002770 <_printf_common+0x58>
 80027e0:	2301      	movs	r3, #1
 80027e2:	4622      	mov	r2, r4
 80027e4:	4649      	mov	r1, r9
 80027e6:	4638      	mov	r0, r7
 80027e8:	47c0      	blx	r8
 80027ea:	3001      	adds	r0, #1
 80027ec:	d0e6      	beq.n	80027bc <_printf_common+0xa4>
 80027ee:	3601      	adds	r6, #1
 80027f0:	e7d9      	b.n	80027a6 <_printf_common+0x8e>
	...

080027f4 <_printf_i>:
 80027f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027f8:	7e0f      	ldrb	r7, [r1, #24]
 80027fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027fc:	2f78      	cmp	r7, #120	; 0x78
 80027fe:	4691      	mov	r9, r2
 8002800:	4680      	mov	r8, r0
 8002802:	460c      	mov	r4, r1
 8002804:	469a      	mov	sl, r3
 8002806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800280a:	d807      	bhi.n	800281c <_printf_i+0x28>
 800280c:	2f62      	cmp	r7, #98	; 0x62
 800280e:	d80a      	bhi.n	8002826 <_printf_i+0x32>
 8002810:	2f00      	cmp	r7, #0
 8002812:	f000 80d8 	beq.w	80029c6 <_printf_i+0x1d2>
 8002816:	2f58      	cmp	r7, #88	; 0x58
 8002818:	f000 80a3 	beq.w	8002962 <_printf_i+0x16e>
 800281c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002824:	e03a      	b.n	800289c <_printf_i+0xa8>
 8002826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800282a:	2b15      	cmp	r3, #21
 800282c:	d8f6      	bhi.n	800281c <_printf_i+0x28>
 800282e:	a101      	add	r1, pc, #4	; (adr r1, 8002834 <_printf_i+0x40>)
 8002830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002834:	0800288d 	.word	0x0800288d
 8002838:	080028a1 	.word	0x080028a1
 800283c:	0800281d 	.word	0x0800281d
 8002840:	0800281d 	.word	0x0800281d
 8002844:	0800281d 	.word	0x0800281d
 8002848:	0800281d 	.word	0x0800281d
 800284c:	080028a1 	.word	0x080028a1
 8002850:	0800281d 	.word	0x0800281d
 8002854:	0800281d 	.word	0x0800281d
 8002858:	0800281d 	.word	0x0800281d
 800285c:	0800281d 	.word	0x0800281d
 8002860:	080029ad 	.word	0x080029ad
 8002864:	080028d1 	.word	0x080028d1
 8002868:	0800298f 	.word	0x0800298f
 800286c:	0800281d 	.word	0x0800281d
 8002870:	0800281d 	.word	0x0800281d
 8002874:	080029cf 	.word	0x080029cf
 8002878:	0800281d 	.word	0x0800281d
 800287c:	080028d1 	.word	0x080028d1
 8002880:	0800281d 	.word	0x0800281d
 8002884:	0800281d 	.word	0x0800281d
 8002888:	08002997 	.word	0x08002997
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	602a      	str	r2, [r5, #0]
 8002894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800289c:	2301      	movs	r3, #1
 800289e:	e0a3      	b.n	80029e8 <_printf_i+0x1f4>
 80028a0:	6820      	ldr	r0, [r4, #0]
 80028a2:	6829      	ldr	r1, [r5, #0]
 80028a4:	0606      	lsls	r6, r0, #24
 80028a6:	f101 0304 	add.w	r3, r1, #4
 80028aa:	d50a      	bpl.n	80028c2 <_printf_i+0xce>
 80028ac:	680e      	ldr	r6, [r1, #0]
 80028ae:	602b      	str	r3, [r5, #0]
 80028b0:	2e00      	cmp	r6, #0
 80028b2:	da03      	bge.n	80028bc <_printf_i+0xc8>
 80028b4:	232d      	movs	r3, #45	; 0x2d
 80028b6:	4276      	negs	r6, r6
 80028b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028bc:	485e      	ldr	r0, [pc, #376]	; (8002a38 <_printf_i+0x244>)
 80028be:	230a      	movs	r3, #10
 80028c0:	e019      	b.n	80028f6 <_printf_i+0x102>
 80028c2:	680e      	ldr	r6, [r1, #0]
 80028c4:	602b      	str	r3, [r5, #0]
 80028c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028ca:	bf18      	it	ne
 80028cc:	b236      	sxthne	r6, r6
 80028ce:	e7ef      	b.n	80028b0 <_printf_i+0xbc>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	1d19      	adds	r1, r3, #4
 80028d6:	6029      	str	r1, [r5, #0]
 80028d8:	0601      	lsls	r1, r0, #24
 80028da:	d501      	bpl.n	80028e0 <_printf_i+0xec>
 80028dc:	681e      	ldr	r6, [r3, #0]
 80028de:	e002      	b.n	80028e6 <_printf_i+0xf2>
 80028e0:	0646      	lsls	r6, r0, #25
 80028e2:	d5fb      	bpl.n	80028dc <_printf_i+0xe8>
 80028e4:	881e      	ldrh	r6, [r3, #0]
 80028e6:	4854      	ldr	r0, [pc, #336]	; (8002a38 <_printf_i+0x244>)
 80028e8:	2f6f      	cmp	r7, #111	; 0x6f
 80028ea:	bf0c      	ite	eq
 80028ec:	2308      	moveq	r3, #8
 80028ee:	230a      	movne	r3, #10
 80028f0:	2100      	movs	r1, #0
 80028f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028f6:	6865      	ldr	r5, [r4, #4]
 80028f8:	60a5      	str	r5, [r4, #8]
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	bfa2      	ittt	ge
 80028fe:	6821      	ldrge	r1, [r4, #0]
 8002900:	f021 0104 	bicge.w	r1, r1, #4
 8002904:	6021      	strge	r1, [r4, #0]
 8002906:	b90e      	cbnz	r6, 800290c <_printf_i+0x118>
 8002908:	2d00      	cmp	r5, #0
 800290a:	d04d      	beq.n	80029a8 <_printf_i+0x1b4>
 800290c:	4615      	mov	r5, r2
 800290e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002912:	fb03 6711 	mls	r7, r3, r1, r6
 8002916:	5dc7      	ldrb	r7, [r0, r7]
 8002918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800291c:	4637      	mov	r7, r6
 800291e:	42bb      	cmp	r3, r7
 8002920:	460e      	mov	r6, r1
 8002922:	d9f4      	bls.n	800290e <_printf_i+0x11a>
 8002924:	2b08      	cmp	r3, #8
 8002926:	d10b      	bne.n	8002940 <_printf_i+0x14c>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	07de      	lsls	r6, r3, #31
 800292c:	d508      	bpl.n	8002940 <_printf_i+0x14c>
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	6861      	ldr	r1, [r4, #4]
 8002932:	4299      	cmp	r1, r3
 8002934:	bfde      	ittt	le
 8002936:	2330      	movle	r3, #48	; 0x30
 8002938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800293c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002940:	1b52      	subs	r2, r2, r5
 8002942:	6122      	str	r2, [r4, #16]
 8002944:	f8cd a000 	str.w	sl, [sp]
 8002948:	464b      	mov	r3, r9
 800294a:	aa03      	add	r2, sp, #12
 800294c:	4621      	mov	r1, r4
 800294e:	4640      	mov	r0, r8
 8002950:	f7ff fee2 	bl	8002718 <_printf_common>
 8002954:	3001      	adds	r0, #1
 8002956:	d14c      	bne.n	80029f2 <_printf_i+0x1fe>
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	b004      	add	sp, #16
 800295e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002962:	4835      	ldr	r0, [pc, #212]	; (8002a38 <_printf_i+0x244>)
 8002964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002968:	6829      	ldr	r1, [r5, #0]
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002970:	6029      	str	r1, [r5, #0]
 8002972:	061d      	lsls	r5, r3, #24
 8002974:	d514      	bpl.n	80029a0 <_printf_i+0x1ac>
 8002976:	07df      	lsls	r7, r3, #31
 8002978:	bf44      	itt	mi
 800297a:	f043 0320 	orrmi.w	r3, r3, #32
 800297e:	6023      	strmi	r3, [r4, #0]
 8002980:	b91e      	cbnz	r6, 800298a <_printf_i+0x196>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f023 0320 	bic.w	r3, r3, #32
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	2310      	movs	r3, #16
 800298c:	e7b0      	b.n	80028f0 <_printf_i+0xfc>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	f043 0320 	orr.w	r3, r3, #32
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	2378      	movs	r3, #120	; 0x78
 8002998:	4828      	ldr	r0, [pc, #160]	; (8002a3c <_printf_i+0x248>)
 800299a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800299e:	e7e3      	b.n	8002968 <_printf_i+0x174>
 80029a0:	0659      	lsls	r1, r3, #25
 80029a2:	bf48      	it	mi
 80029a4:	b2b6      	uxthmi	r6, r6
 80029a6:	e7e6      	b.n	8002976 <_printf_i+0x182>
 80029a8:	4615      	mov	r5, r2
 80029aa:	e7bb      	b.n	8002924 <_printf_i+0x130>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	6826      	ldr	r6, [r4, #0]
 80029b0:	6961      	ldr	r1, [r4, #20]
 80029b2:	1d18      	adds	r0, r3, #4
 80029b4:	6028      	str	r0, [r5, #0]
 80029b6:	0635      	lsls	r5, r6, #24
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	d501      	bpl.n	80029c0 <_printf_i+0x1cc>
 80029bc:	6019      	str	r1, [r3, #0]
 80029be:	e002      	b.n	80029c6 <_printf_i+0x1d2>
 80029c0:	0670      	lsls	r0, r6, #25
 80029c2:	d5fb      	bpl.n	80029bc <_printf_i+0x1c8>
 80029c4:	8019      	strh	r1, [r3, #0]
 80029c6:	2300      	movs	r3, #0
 80029c8:	6123      	str	r3, [r4, #16]
 80029ca:	4615      	mov	r5, r2
 80029cc:	e7ba      	b.n	8002944 <_printf_i+0x150>
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	1d1a      	adds	r2, r3, #4
 80029d2:	602a      	str	r2, [r5, #0]
 80029d4:	681d      	ldr	r5, [r3, #0]
 80029d6:	6862      	ldr	r2, [r4, #4]
 80029d8:	2100      	movs	r1, #0
 80029da:	4628      	mov	r0, r5
 80029dc:	f7fd fbf8 	bl	80001d0 <memchr>
 80029e0:	b108      	cbz	r0, 80029e6 <_printf_i+0x1f2>
 80029e2:	1b40      	subs	r0, r0, r5
 80029e4:	6060      	str	r0, [r4, #4]
 80029e6:	6863      	ldr	r3, [r4, #4]
 80029e8:	6123      	str	r3, [r4, #16]
 80029ea:	2300      	movs	r3, #0
 80029ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029f0:	e7a8      	b.n	8002944 <_printf_i+0x150>
 80029f2:	6923      	ldr	r3, [r4, #16]
 80029f4:	462a      	mov	r2, r5
 80029f6:	4649      	mov	r1, r9
 80029f8:	4640      	mov	r0, r8
 80029fa:	47d0      	blx	sl
 80029fc:	3001      	adds	r0, #1
 80029fe:	d0ab      	beq.n	8002958 <_printf_i+0x164>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	079b      	lsls	r3, r3, #30
 8002a04:	d413      	bmi.n	8002a2e <_printf_i+0x23a>
 8002a06:	68e0      	ldr	r0, [r4, #12]
 8002a08:	9b03      	ldr	r3, [sp, #12]
 8002a0a:	4298      	cmp	r0, r3
 8002a0c:	bfb8      	it	lt
 8002a0e:	4618      	movlt	r0, r3
 8002a10:	e7a4      	b.n	800295c <_printf_i+0x168>
 8002a12:	2301      	movs	r3, #1
 8002a14:	4632      	mov	r2, r6
 8002a16:	4649      	mov	r1, r9
 8002a18:	4640      	mov	r0, r8
 8002a1a:	47d0      	blx	sl
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	d09b      	beq.n	8002958 <_printf_i+0x164>
 8002a20:	3501      	adds	r5, #1
 8002a22:	68e3      	ldr	r3, [r4, #12]
 8002a24:	9903      	ldr	r1, [sp, #12]
 8002a26:	1a5b      	subs	r3, r3, r1
 8002a28:	42ab      	cmp	r3, r5
 8002a2a:	dcf2      	bgt.n	8002a12 <_printf_i+0x21e>
 8002a2c:	e7eb      	b.n	8002a06 <_printf_i+0x212>
 8002a2e:	2500      	movs	r5, #0
 8002a30:	f104 0619 	add.w	r6, r4, #25
 8002a34:	e7f5      	b.n	8002a22 <_printf_i+0x22e>
 8002a36:	bf00      	nop
 8002a38:	0800310d 	.word	0x0800310d
 8002a3c:	0800311e 	.word	0x0800311e

08002a40 <_sbrk_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4d06      	ldr	r5, [pc, #24]	; (8002a5c <_sbrk_r+0x1c>)
 8002a44:	2300      	movs	r3, #0
 8002a46:	4604      	mov	r4, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	602b      	str	r3, [r5, #0]
 8002a4c:	f7fd fdf0 	bl	8000630 <_sbrk>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d102      	bne.n	8002a5a <_sbrk_r+0x1a>
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	b103      	cbz	r3, 8002a5a <_sbrk_r+0x1a>
 8002a58:	6023      	str	r3, [r4, #0]
 8002a5a:	bd38      	pop	{r3, r4, r5, pc}
 8002a5c:	20000104 	.word	0x20000104

08002a60 <__sread>:
 8002a60:	b510      	push	{r4, lr}
 8002a62:	460c      	mov	r4, r1
 8002a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a68:	f000 fab2 	bl	8002fd0 <_read_r>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bfab      	itete	ge
 8002a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a72:	89a3      	ldrhlt	r3, [r4, #12]
 8002a74:	181b      	addge	r3, r3, r0
 8002a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a7a:	bfac      	ite	ge
 8002a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a7e:	81a3      	strhlt	r3, [r4, #12]
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <__swrite>:
 8002a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a86:	461f      	mov	r7, r3
 8002a88:	898b      	ldrh	r3, [r1, #12]
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	460c      	mov	r4, r1
 8002a90:	4616      	mov	r6, r2
 8002a92:	d505      	bpl.n	8002aa0 <__swrite+0x1e>
 8002a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f000 f9c8 	bl	8002e30 <_lseek_r>
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aaa:	81a3      	strh	r3, [r4, #12]
 8002aac:	4632      	mov	r2, r6
 8002aae:	463b      	mov	r3, r7
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab6:	f000 b869 	b.w	8002b8c <_write_r>

08002aba <__sseek>:
 8002aba:	b510      	push	{r4, lr}
 8002abc:	460c      	mov	r4, r1
 8002abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac2:	f000 f9b5 	bl	8002e30 <_lseek_r>
 8002ac6:	1c43      	adds	r3, r0, #1
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	bf15      	itete	ne
 8002acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ad6:	81a3      	strheq	r3, [r4, #12]
 8002ad8:	bf18      	it	ne
 8002ada:	81a3      	strhne	r3, [r4, #12]
 8002adc:	bd10      	pop	{r4, pc}

08002ade <__sclose>:
 8002ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae2:	f000 b8d3 	b.w	8002c8c <_close_r>
	...

08002ae8 <__swbuf_r>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	460e      	mov	r6, r1
 8002aec:	4614      	mov	r4, r2
 8002aee:	4605      	mov	r5, r0
 8002af0:	b118      	cbz	r0, 8002afa <__swbuf_r+0x12>
 8002af2:	6983      	ldr	r3, [r0, #24]
 8002af4:	b90b      	cbnz	r3, 8002afa <__swbuf_r+0x12>
 8002af6:	f7ff fb81 	bl	80021fc <__sinit>
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <__swbuf_r+0x98>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d12b      	bne.n	8002b58 <__swbuf_r+0x70>
 8002b00:	686c      	ldr	r4, [r5, #4]
 8002b02:	69a3      	ldr	r3, [r4, #24]
 8002b04:	60a3      	str	r3, [r4, #8]
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	071a      	lsls	r2, r3, #28
 8002b0a:	d52f      	bpl.n	8002b6c <__swbuf_r+0x84>
 8002b0c:	6923      	ldr	r3, [r4, #16]
 8002b0e:	b36b      	cbz	r3, 8002b6c <__swbuf_r+0x84>
 8002b10:	6923      	ldr	r3, [r4, #16]
 8002b12:	6820      	ldr	r0, [r4, #0]
 8002b14:	1ac0      	subs	r0, r0, r3
 8002b16:	6963      	ldr	r3, [r4, #20]
 8002b18:	b2f6      	uxtb	r6, r6
 8002b1a:	4283      	cmp	r3, r0
 8002b1c:	4637      	mov	r7, r6
 8002b1e:	dc04      	bgt.n	8002b2a <__swbuf_r+0x42>
 8002b20:	4621      	mov	r1, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	f000 f948 	bl	8002db8 <_fflush_r>
 8002b28:	bb30      	cbnz	r0, 8002b78 <__swbuf_r+0x90>
 8002b2a:	68a3      	ldr	r3, [r4, #8]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60a3      	str	r3, [r4, #8]
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	6022      	str	r2, [r4, #0]
 8002b36:	701e      	strb	r6, [r3, #0]
 8002b38:	6963      	ldr	r3, [r4, #20]
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	4283      	cmp	r3, r0
 8002b3e:	d004      	beq.n	8002b4a <__swbuf_r+0x62>
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	07db      	lsls	r3, r3, #31
 8002b44:	d506      	bpl.n	8002b54 <__swbuf_r+0x6c>
 8002b46:	2e0a      	cmp	r6, #10
 8002b48:	d104      	bne.n	8002b54 <__swbuf_r+0x6c>
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f000 f933 	bl	8002db8 <_fflush_r>
 8002b52:	b988      	cbnz	r0, 8002b78 <__swbuf_r+0x90>
 8002b54:	4638      	mov	r0, r7
 8002b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <__swbuf_r+0x9c>)
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	d101      	bne.n	8002b62 <__swbuf_r+0x7a>
 8002b5e:	68ac      	ldr	r4, [r5, #8]
 8002b60:	e7cf      	b.n	8002b02 <__swbuf_r+0x1a>
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <__swbuf_r+0xa0>)
 8002b64:	429c      	cmp	r4, r3
 8002b66:	bf08      	it	eq
 8002b68:	68ec      	ldreq	r4, [r5, #12]
 8002b6a:	e7ca      	b.n	8002b02 <__swbuf_r+0x1a>
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	4628      	mov	r0, r5
 8002b70:	f000 f81e 	bl	8002bb0 <__swsetup_r>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d0cb      	beq.n	8002b10 <__swbuf_r+0x28>
 8002b78:	f04f 37ff 	mov.w	r7, #4294967295
 8002b7c:	e7ea      	b.n	8002b54 <__swbuf_r+0x6c>
 8002b7e:	bf00      	nop
 8002b80:	080030bc 	.word	0x080030bc
 8002b84:	080030dc 	.word	0x080030dc
 8002b88:	0800309c 	.word	0x0800309c

08002b8c <_write_r>:
 8002b8c:	b538      	push	{r3, r4, r5, lr}
 8002b8e:	4d07      	ldr	r5, [pc, #28]	; (8002bac <_write_r+0x20>)
 8002b90:	4604      	mov	r4, r0
 8002b92:	4608      	mov	r0, r1
 8002b94:	4611      	mov	r1, r2
 8002b96:	2200      	movs	r2, #0
 8002b98:	602a      	str	r2, [r5, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f7fd fcf7 	bl	800058e <_write>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d102      	bne.n	8002baa <_write_r+0x1e>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	b103      	cbz	r3, 8002baa <_write_r+0x1e>
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	bd38      	pop	{r3, r4, r5, pc}
 8002bac:	20000104 	.word	0x20000104

08002bb0 <__swsetup_r>:
 8002bb0:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <__swsetup_r+0xcc>)
 8002bb2:	b570      	push	{r4, r5, r6, lr}
 8002bb4:	681d      	ldr	r5, [r3, #0]
 8002bb6:	4606      	mov	r6, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	b125      	cbz	r5, 8002bc6 <__swsetup_r+0x16>
 8002bbc:	69ab      	ldr	r3, [r5, #24]
 8002bbe:	b913      	cbnz	r3, 8002bc6 <__swsetup_r+0x16>
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f7ff fb1b 	bl	80021fc <__sinit>
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <__swsetup_r+0xd0>)
 8002bc8:	429c      	cmp	r4, r3
 8002bca:	d10f      	bne.n	8002bec <__swsetup_r+0x3c>
 8002bcc:	686c      	ldr	r4, [r5, #4]
 8002bce:	89a3      	ldrh	r3, [r4, #12]
 8002bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bd4:	0719      	lsls	r1, r3, #28
 8002bd6:	d42c      	bmi.n	8002c32 <__swsetup_r+0x82>
 8002bd8:	06dd      	lsls	r5, r3, #27
 8002bda:	d411      	bmi.n	8002c00 <__swsetup_r+0x50>
 8002bdc:	2309      	movs	r3, #9
 8002bde:	6033      	str	r3, [r6, #0]
 8002be0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	e03e      	b.n	8002c6a <__swsetup_r+0xba>
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <__swsetup_r+0xd4>)
 8002bee:	429c      	cmp	r4, r3
 8002bf0:	d101      	bne.n	8002bf6 <__swsetup_r+0x46>
 8002bf2:	68ac      	ldr	r4, [r5, #8]
 8002bf4:	e7eb      	b.n	8002bce <__swsetup_r+0x1e>
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <__swsetup_r+0xd8>)
 8002bf8:	429c      	cmp	r4, r3
 8002bfa:	bf08      	it	eq
 8002bfc:	68ec      	ldreq	r4, [r5, #12]
 8002bfe:	e7e6      	b.n	8002bce <__swsetup_r+0x1e>
 8002c00:	0758      	lsls	r0, r3, #29
 8002c02:	d512      	bpl.n	8002c2a <__swsetup_r+0x7a>
 8002c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c06:	b141      	cbz	r1, 8002c1a <__swsetup_r+0x6a>
 8002c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	d002      	beq.n	8002c16 <__swsetup_r+0x66>
 8002c10:	4630      	mov	r0, r6
 8002c12:	f000 f991 	bl	8002f38 <_free_r>
 8002c16:	2300      	movs	r3, #0
 8002c18:	6363      	str	r3, [r4, #52]	; 0x34
 8002c1a:	89a3      	ldrh	r3, [r4, #12]
 8002c1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c20:	81a3      	strh	r3, [r4, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	6063      	str	r3, [r4, #4]
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	6923      	ldr	r3, [r4, #16]
 8002c34:	b94b      	cbnz	r3, 8002c4a <__swsetup_r+0x9a>
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d003      	beq.n	8002c4a <__swsetup_r+0x9a>
 8002c42:	4621      	mov	r1, r4
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 f92b 	bl	8002ea0 <__smakebuf_r>
 8002c4a:	89a0      	ldrh	r0, [r4, #12]
 8002c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c50:	f010 0301 	ands.w	r3, r0, #1
 8002c54:	d00a      	beq.n	8002c6c <__swsetup_r+0xbc>
 8002c56:	2300      	movs	r3, #0
 8002c58:	60a3      	str	r3, [r4, #8]
 8002c5a:	6963      	ldr	r3, [r4, #20]
 8002c5c:	425b      	negs	r3, r3
 8002c5e:	61a3      	str	r3, [r4, #24]
 8002c60:	6923      	ldr	r3, [r4, #16]
 8002c62:	b943      	cbnz	r3, 8002c76 <__swsetup_r+0xc6>
 8002c64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c68:	d1ba      	bne.n	8002be0 <__swsetup_r+0x30>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	0781      	lsls	r1, r0, #30
 8002c6e:	bf58      	it	pl
 8002c70:	6963      	ldrpl	r3, [r4, #20]
 8002c72:	60a3      	str	r3, [r4, #8]
 8002c74:	e7f4      	b.n	8002c60 <__swsetup_r+0xb0>
 8002c76:	2000      	movs	r0, #0
 8002c78:	e7f7      	b.n	8002c6a <__swsetup_r+0xba>
 8002c7a:	bf00      	nop
 8002c7c:	2000000c 	.word	0x2000000c
 8002c80:	080030bc 	.word	0x080030bc
 8002c84:	080030dc 	.word	0x080030dc
 8002c88:	0800309c 	.word	0x0800309c

08002c8c <_close_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d06      	ldr	r5, [pc, #24]	; (8002ca8 <_close_r+0x1c>)
 8002c90:	2300      	movs	r3, #0
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	f7fd fc95 	bl	80005c6 <_close>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d102      	bne.n	8002ca6 <_close_r+0x1a>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <_close_r+0x1a>
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000104 	.word	0x20000104

08002cac <__sflush_r>:
 8002cac:	898a      	ldrh	r2, [r1, #12]
 8002cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	0710      	lsls	r0, r2, #28
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	d458      	bmi.n	8002d6c <__sflush_r+0xc0>
 8002cba:	684b      	ldr	r3, [r1, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	dc05      	bgt.n	8002ccc <__sflush_r+0x20>
 8002cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dc02      	bgt.n	8002ccc <__sflush_r+0x20>
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cce:	2e00      	cmp	r6, #0
 8002cd0:	d0f9      	beq.n	8002cc6 <__sflush_r+0x1a>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cd8:	682f      	ldr	r7, [r5, #0]
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	d032      	beq.n	8002d44 <__sflush_r+0x98>
 8002cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	075a      	lsls	r2, r3, #29
 8002ce4:	d505      	bpl.n	8002cf2 <__sflush_r+0x46>
 8002ce6:	6863      	ldr	r3, [r4, #4]
 8002ce8:	1ac0      	subs	r0, r0, r3
 8002cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cec:	b10b      	cbz	r3, 8002cf2 <__sflush_r+0x46>
 8002cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cf0:	1ac0      	subs	r0, r0, r3
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cf8:	6a21      	ldr	r1, [r4, #32]
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	47b0      	blx	r6
 8002cfe:	1c43      	adds	r3, r0, #1
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	d106      	bne.n	8002d12 <__sflush_r+0x66>
 8002d04:	6829      	ldr	r1, [r5, #0]
 8002d06:	291d      	cmp	r1, #29
 8002d08:	d82c      	bhi.n	8002d64 <__sflush_r+0xb8>
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <__sflush_r+0x108>)
 8002d0c:	40ca      	lsrs	r2, r1
 8002d0e:	07d6      	lsls	r6, r2, #31
 8002d10:	d528      	bpl.n	8002d64 <__sflush_r+0xb8>
 8002d12:	2200      	movs	r2, #0
 8002d14:	6062      	str	r2, [r4, #4]
 8002d16:	04d9      	lsls	r1, r3, #19
 8002d18:	6922      	ldr	r2, [r4, #16]
 8002d1a:	6022      	str	r2, [r4, #0]
 8002d1c:	d504      	bpl.n	8002d28 <__sflush_r+0x7c>
 8002d1e:	1c42      	adds	r2, r0, #1
 8002d20:	d101      	bne.n	8002d26 <__sflush_r+0x7a>
 8002d22:	682b      	ldr	r3, [r5, #0]
 8002d24:	b903      	cbnz	r3, 8002d28 <__sflush_r+0x7c>
 8002d26:	6560      	str	r0, [r4, #84]	; 0x54
 8002d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d2a:	602f      	str	r7, [r5, #0]
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d0ca      	beq.n	8002cc6 <__sflush_r+0x1a>
 8002d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d34:	4299      	cmp	r1, r3
 8002d36:	d002      	beq.n	8002d3e <__sflush_r+0x92>
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 f8fd 	bl	8002f38 <_free_r>
 8002d3e:	2000      	movs	r0, #0
 8002d40:	6360      	str	r0, [r4, #52]	; 0x34
 8002d42:	e7c1      	b.n	8002cc8 <__sflush_r+0x1c>
 8002d44:	6a21      	ldr	r1, [r4, #32]
 8002d46:	2301      	movs	r3, #1
 8002d48:	4628      	mov	r0, r5
 8002d4a:	47b0      	blx	r6
 8002d4c:	1c41      	adds	r1, r0, #1
 8002d4e:	d1c7      	bne.n	8002ce0 <__sflush_r+0x34>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0c4      	beq.n	8002ce0 <__sflush_r+0x34>
 8002d56:	2b1d      	cmp	r3, #29
 8002d58:	d001      	beq.n	8002d5e <__sflush_r+0xb2>
 8002d5a:	2b16      	cmp	r3, #22
 8002d5c:	d101      	bne.n	8002d62 <__sflush_r+0xb6>
 8002d5e:	602f      	str	r7, [r5, #0]
 8002d60:	e7b1      	b.n	8002cc6 <__sflush_r+0x1a>
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	e7ad      	b.n	8002cc8 <__sflush_r+0x1c>
 8002d6c:	690f      	ldr	r7, [r1, #16]
 8002d6e:	2f00      	cmp	r7, #0
 8002d70:	d0a9      	beq.n	8002cc6 <__sflush_r+0x1a>
 8002d72:	0793      	lsls	r3, r2, #30
 8002d74:	680e      	ldr	r6, [r1, #0]
 8002d76:	bf08      	it	eq
 8002d78:	694b      	ldreq	r3, [r1, #20]
 8002d7a:	600f      	str	r7, [r1, #0]
 8002d7c:	bf18      	it	ne
 8002d7e:	2300      	movne	r3, #0
 8002d80:	eba6 0807 	sub.w	r8, r6, r7
 8002d84:	608b      	str	r3, [r1, #8]
 8002d86:	f1b8 0f00 	cmp.w	r8, #0
 8002d8a:	dd9c      	ble.n	8002cc6 <__sflush_r+0x1a>
 8002d8c:	6a21      	ldr	r1, [r4, #32]
 8002d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d90:	4643      	mov	r3, r8
 8002d92:	463a      	mov	r2, r7
 8002d94:	4628      	mov	r0, r5
 8002d96:	47b0      	blx	r6
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	dc06      	bgt.n	8002daa <__sflush_r+0xfe>
 8002d9c:	89a3      	ldrh	r3, [r4, #12]
 8002d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da2:	81a3      	strh	r3, [r4, #12]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	e78e      	b.n	8002cc8 <__sflush_r+0x1c>
 8002daa:	4407      	add	r7, r0
 8002dac:	eba8 0800 	sub.w	r8, r8, r0
 8002db0:	e7e9      	b.n	8002d86 <__sflush_r+0xda>
 8002db2:	bf00      	nop
 8002db4:	20400001 	.word	0x20400001

08002db8 <_fflush_r>:
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	690b      	ldr	r3, [r1, #16]
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	b913      	cbnz	r3, 8002dc8 <_fflush_r+0x10>
 8002dc2:	2500      	movs	r5, #0
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}
 8002dc8:	b118      	cbz	r0, 8002dd2 <_fflush_r+0x1a>
 8002dca:	6983      	ldr	r3, [r0, #24]
 8002dcc:	b90b      	cbnz	r3, 8002dd2 <_fflush_r+0x1a>
 8002dce:	f7ff fa15 	bl	80021fc <__sinit>
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <_fflush_r+0x6c>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d11b      	bne.n	8002e10 <_fflush_r+0x58>
 8002dd8:	686c      	ldr	r4, [r5, #4]
 8002dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ef      	beq.n	8002dc2 <_fflush_r+0xa>
 8002de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002de4:	07d0      	lsls	r0, r2, #31
 8002de6:	d404      	bmi.n	8002df2 <_fflush_r+0x3a>
 8002de8:	0599      	lsls	r1, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <_fflush_r+0x3a>
 8002dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dee:	f7ff faa3 	bl	8002338 <__retarget_lock_acquire_recursive>
 8002df2:	4628      	mov	r0, r5
 8002df4:	4621      	mov	r1, r4
 8002df6:	f7ff ff59 	bl	8002cac <__sflush_r>
 8002dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dfc:	07da      	lsls	r2, r3, #31
 8002dfe:	4605      	mov	r5, r0
 8002e00:	d4e0      	bmi.n	8002dc4 <_fflush_r+0xc>
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	059b      	lsls	r3, r3, #22
 8002e06:	d4dd      	bmi.n	8002dc4 <_fflush_r+0xc>
 8002e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e0a:	f7ff fa96 	bl	800233a <__retarget_lock_release_recursive>
 8002e0e:	e7d9      	b.n	8002dc4 <_fflush_r+0xc>
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <_fflush_r+0x70>)
 8002e12:	429c      	cmp	r4, r3
 8002e14:	d101      	bne.n	8002e1a <_fflush_r+0x62>
 8002e16:	68ac      	ldr	r4, [r5, #8]
 8002e18:	e7df      	b.n	8002dda <_fflush_r+0x22>
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <_fflush_r+0x74>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	bf08      	it	eq
 8002e20:	68ec      	ldreq	r4, [r5, #12]
 8002e22:	e7da      	b.n	8002dda <_fflush_r+0x22>
 8002e24:	080030bc 	.word	0x080030bc
 8002e28:	080030dc 	.word	0x080030dc
 8002e2c:	0800309c 	.word	0x0800309c

08002e30 <_lseek_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4d07      	ldr	r5, [pc, #28]	; (8002e50 <_lseek_r+0x20>)
 8002e34:	4604      	mov	r4, r0
 8002e36:	4608      	mov	r0, r1
 8002e38:	4611      	mov	r1, r2
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	602a      	str	r2, [r5, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f7fd fbe8 	bl	8000614 <_lseek>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d102      	bne.n	8002e4e <_lseek_r+0x1e>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <_lseek_r+0x1e>
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	20000104 	.word	0x20000104

08002e54 <__swhatbuf_r>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	460e      	mov	r6, r1
 8002e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	b096      	sub	sp, #88	; 0x58
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	da08      	bge.n	8002e78 <__swhatbuf_r+0x24>
 8002e66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	602a      	str	r2, [r5, #0]
 8002e6e:	061a      	lsls	r2, r3, #24
 8002e70:	d410      	bmi.n	8002e94 <__swhatbuf_r+0x40>
 8002e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e76:	e00e      	b.n	8002e96 <__swhatbuf_r+0x42>
 8002e78:	466a      	mov	r2, sp
 8002e7a:	f000 f8bb 	bl	8002ff4 <_fstat_r>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	dbf1      	blt.n	8002e66 <__swhatbuf_r+0x12>
 8002e82:	9a01      	ldr	r2, [sp, #4]
 8002e84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e8c:	425a      	negs	r2, r3
 8002e8e:	415a      	adcs	r2, r3
 8002e90:	602a      	str	r2, [r5, #0]
 8002e92:	e7ee      	b.n	8002e72 <__swhatbuf_r+0x1e>
 8002e94:	2340      	movs	r3, #64	; 0x40
 8002e96:	2000      	movs	r0, #0
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	b016      	add	sp, #88	; 0x58
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ea0 <__smakebuf_r>:
 8002ea0:	898b      	ldrh	r3, [r1, #12]
 8002ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ea4:	079d      	lsls	r5, r3, #30
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	d507      	bpl.n	8002ebc <__smakebuf_r+0x1c>
 8002eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	6123      	str	r3, [r4, #16]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6163      	str	r3, [r4, #20]
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	ab01      	add	r3, sp, #4
 8002ebe:	466a      	mov	r2, sp
 8002ec0:	f7ff ffc8 	bl	8002e54 <__swhatbuf_r>
 8002ec4:	9900      	ldr	r1, [sp, #0]
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff fa57 	bl	800237c <_malloc_r>
 8002ece:	b948      	cbnz	r0, 8002ee4 <__smakebuf_r+0x44>
 8002ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed4:	059a      	lsls	r2, r3, #22
 8002ed6:	d4ef      	bmi.n	8002eb8 <__smakebuf_r+0x18>
 8002ed8:	f023 0303 	bic.w	r3, r3, #3
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	e7e3      	b.n	8002eac <__smakebuf_r+0xc>
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <__smakebuf_r+0x7c>)
 8002ee6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	6020      	str	r0, [r4, #0]
 8002eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	9b00      	ldr	r3, [sp, #0]
 8002ef4:	6163      	str	r3, [r4, #20]
 8002ef6:	9b01      	ldr	r3, [sp, #4]
 8002ef8:	6120      	str	r0, [r4, #16]
 8002efa:	b15b      	cbz	r3, 8002f14 <__smakebuf_r+0x74>
 8002efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f00:	4630      	mov	r0, r6
 8002f02:	f000 f889 	bl	8003018 <_isatty_r>
 8002f06:	b128      	cbz	r0, 8002f14 <__smakebuf_r+0x74>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	81a3      	strh	r3, [r4, #12]
 8002f14:	89a0      	ldrh	r0, [r4, #12]
 8002f16:	4305      	orrs	r5, r0
 8002f18:	81a5      	strh	r5, [r4, #12]
 8002f1a:	e7cd      	b.n	8002eb8 <__smakebuf_r+0x18>
 8002f1c:	08002195 	.word	0x08002195

08002f20 <__malloc_lock>:
 8002f20:	4801      	ldr	r0, [pc, #4]	; (8002f28 <__malloc_lock+0x8>)
 8002f22:	f7ff ba09 	b.w	8002338 <__retarget_lock_acquire_recursive>
 8002f26:	bf00      	nop
 8002f28:	200000f8 	.word	0x200000f8

08002f2c <__malloc_unlock>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <__malloc_unlock+0x8>)
 8002f2e:	f7ff ba04 	b.w	800233a <__retarget_lock_release_recursive>
 8002f32:	bf00      	nop
 8002f34:	200000f8 	.word	0x200000f8

08002f38 <_free_r>:
 8002f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f3a:	2900      	cmp	r1, #0
 8002f3c:	d044      	beq.n	8002fc8 <_free_r+0x90>
 8002f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f42:	9001      	str	r0, [sp, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f1a1 0404 	sub.w	r4, r1, #4
 8002f4a:	bfb8      	it	lt
 8002f4c:	18e4      	addlt	r4, r4, r3
 8002f4e:	f7ff ffe7 	bl	8002f20 <__malloc_lock>
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <_free_r+0x94>)
 8002f54:	9801      	ldr	r0, [sp, #4]
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	b933      	cbnz	r3, 8002f68 <_free_r+0x30>
 8002f5a:	6063      	str	r3, [r4, #4]
 8002f5c:	6014      	str	r4, [r2, #0]
 8002f5e:	b003      	add	sp, #12
 8002f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f64:	f7ff bfe2 	b.w	8002f2c <__malloc_unlock>
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	d908      	bls.n	8002f7e <_free_r+0x46>
 8002f6c:	6825      	ldr	r5, [r4, #0]
 8002f6e:	1961      	adds	r1, r4, r5
 8002f70:	428b      	cmp	r3, r1
 8002f72:	bf01      	itttt	eq
 8002f74:	6819      	ldreq	r1, [r3, #0]
 8002f76:	685b      	ldreq	r3, [r3, #4]
 8002f78:	1949      	addeq	r1, r1, r5
 8002f7a:	6021      	streq	r1, [r4, #0]
 8002f7c:	e7ed      	b.n	8002f5a <_free_r+0x22>
 8002f7e:	461a      	mov	r2, r3
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	b10b      	cbz	r3, 8002f88 <_free_r+0x50>
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	d9fa      	bls.n	8002f7e <_free_r+0x46>
 8002f88:	6811      	ldr	r1, [r2, #0]
 8002f8a:	1855      	adds	r5, r2, r1
 8002f8c:	42a5      	cmp	r5, r4
 8002f8e:	d10b      	bne.n	8002fa8 <_free_r+0x70>
 8002f90:	6824      	ldr	r4, [r4, #0]
 8002f92:	4421      	add	r1, r4
 8002f94:	1854      	adds	r4, r2, r1
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	6011      	str	r1, [r2, #0]
 8002f9a:	d1e0      	bne.n	8002f5e <_free_r+0x26>
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	6053      	str	r3, [r2, #4]
 8002fa2:	4421      	add	r1, r4
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	e7da      	b.n	8002f5e <_free_r+0x26>
 8002fa8:	d902      	bls.n	8002fb0 <_free_r+0x78>
 8002faa:	230c      	movs	r3, #12
 8002fac:	6003      	str	r3, [r0, #0]
 8002fae:	e7d6      	b.n	8002f5e <_free_r+0x26>
 8002fb0:	6825      	ldr	r5, [r4, #0]
 8002fb2:	1961      	adds	r1, r4, r5
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	bf04      	itt	eq
 8002fb8:	6819      	ldreq	r1, [r3, #0]
 8002fba:	685b      	ldreq	r3, [r3, #4]
 8002fbc:	6063      	str	r3, [r4, #4]
 8002fbe:	bf04      	itt	eq
 8002fc0:	1949      	addeq	r1, r1, r5
 8002fc2:	6021      	streq	r1, [r4, #0]
 8002fc4:	6054      	str	r4, [r2, #4]
 8002fc6:	e7ca      	b.n	8002f5e <_free_r+0x26>
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd30      	pop	{r4, r5, pc}
 8002fcc:	200000fc 	.word	0x200000fc

08002fd0 <_read_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4d07      	ldr	r5, [pc, #28]	; (8002ff0 <_read_r+0x20>)
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	4611      	mov	r1, r2
 8002fda:	2200      	movs	r2, #0
 8002fdc:	602a      	str	r2, [r5, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7fd fab8 	bl	8000554 <_read>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_read_r+0x1e>
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_read_r+0x1e>
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	20000104 	.word	0x20000104

08002ff4 <_fstat_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4d07      	ldr	r5, [pc, #28]	; (8003014 <_fstat_r+0x20>)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	f7fd faec 	bl	80005de <_fstat>
 8003006:	1c43      	adds	r3, r0, #1
 8003008:	d102      	bne.n	8003010 <_fstat_r+0x1c>
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	b103      	cbz	r3, 8003010 <_fstat_r+0x1c>
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	bd38      	pop	{r3, r4, r5, pc}
 8003012:	bf00      	nop
 8003014:	20000104 	.word	0x20000104

08003018 <_isatty_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4d06      	ldr	r5, [pc, #24]	; (8003034 <_isatty_r+0x1c>)
 800301c:	2300      	movs	r3, #0
 800301e:	4604      	mov	r4, r0
 8003020:	4608      	mov	r0, r1
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	f7fd faeb 	bl	80005fe <_isatty>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d102      	bne.n	8003032 <_isatty_r+0x1a>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	b103      	cbz	r3, 8003032 <_isatty_r+0x1a>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	bd38      	pop	{r3, r4, r5, pc}
 8003034:	20000104 	.word	0x20000104

08003038 <_init>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr

08003044 <_fini>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr
