/* Arduino to Arduino SPI Example */

//master
#include<SPI.h>

void setup()
{
  SPI.begin();
  SPI.setDataMode(SPI_MODE0);
  SPI.setClockDivider(SPI_CLOCK_DIV16);
  pinMode(SS,OUTPUT);
  digitalWrite(SS,HIGH);
}
void loop()
{
  digitalWrite(SS,LOW);
  SPI.transfer(1);
  digitalWrite(SS,HIGH);
  delay(100);
}

//slave
#include<SPI.h>
int data;
void setup()
{
  pinMode(13,OUTPUT);
  SPI.begin();
  SPCR|=_BV(SPE); //slave
}
void loop()
{
  data=SPDR;
 
    if(data==1);
    {
     digitalWrite(13,HIGH);
    }
}

//register code


Spi master  

 

#include <avr/io.h> 
#include <util/delay.h> 
#define SCK 5 
#define MISO 4 
#define MOSI 3 
#define SS1 2 
#define SS2 1 

void SPI_Begin() 
{ 
  DDRB |= (1 << MOSI) | (1 << SCK) | (1 << SS1)| (1 << SS2);  // Set MOSI, SCK, and SS as output pins 
  DDRB &= ~(1 << MISO);  // Set MISO as an input pin 
  SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);  // Enable SPI, Master mode, and set clock rate fck/16 
  // PORTB &= ~(1 << SS2);  // Enable Slave Select (SS) pin 
} 


byte SPI_Transfer(byte data)
 { 
  SPDR = data;  // Start transmission by writing data to SPI Data Register (SPDR) 
  while (!(SPSR & (1 << SPIF)));  // Wait for transmission to complete 
  return SPDR;  // Return received data from SPI Data Register (SPDR) 
} 

 
void setup() { 
  Serial.begin(9600); 
  SPI_Begin(); 
  Serial.println("I am SPI Master"); 
} 

 

void loop() { 
  s1(); 
  delay(1000); 
  s2(); 
  delay(1000); 
} 

void s1() 
{ 
  PORTB &= ~(1 << SS1);  // Enable Slave Select (SS) pin 
static byte R1, S1 = 1; 
  delay(1000);  // 1-second delay 
  R1 = SPI_Transfer(S1); 
  Serial.print("m Sent to s1: "); 
  Serial.print(S1, DEC); 
  Serial.print(" | m Received from s1: "); 
  Serial.println(R1, DEC); 
  S1++; 
  PORTB |= (1 << SS1); 
} 

void s2() 
{ 
  PORTB &= ~(1 << SS2);  // Enable Slave Select (SS) pin 
static byte R, S = 100; 
  delay(1000);  // 1-second delay 
  R = SPI_Transfer(S); 
  Serial.print("m Sent to s2: "); 
  Serial.print(S, DEC); 
  Serial.print(" | m Received from s2: "); 
  Serial.println(R, DEC); 
  S++; 
  PORTB |= (1 << SS2); 
} 

   

 

 

S1 


#include<avr/io.h> 
#include<util/delay.h> 
#define SCK 5 // Shift Clockis PB5 
#define MISO 4  // Master In Slave Out is PB4 
#define MOSI 3 // Master Out Slave In is PB3 
#define SS 2 // Slave Select is PB2 

void SPI_Begin_Slave() 
{ 
  DDRB &= ~(1<<MOSI) & ~(1<<SCK) & ~(1<<SS); // Set MOSI, SCK and SS as Input Pins 
  DDRB = (1<<MISO); // Set MISO as an Output Pin 
  SPCR = (1<<SPE); // Enable SPI as a Slave Device 

} 

 

byte SPI_Transfer (byte data) 
{ 

SPDR = data; // Wait for Reception to complete 
while(!(SPSR & (1<<SPIF))); 
return SPDR; // return the received data 
} 

 

void setup() 
{ 

Serial.begin(9600); 
SPI_Begin_Slave(); 
Serial.println ("I am SPI Slave1"); 
} 

  

void loop() 
{ 
static byte R, S = 150; 
R = SPI_Transfer (S); 
Serial.print ("s1 Sent to m: ");  
Serial.print (S, DEC); 
Serial.print ("| s1 Received from m: ");  
Serial.println (R, DEC); 
S++; 
} 

